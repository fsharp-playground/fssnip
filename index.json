{
  "snippets": [
    {
      "id": 22,
      "title": "Filtering lists",
      "comment": "Two functions showing how to filter functional lists using the specified predicate. First version uses naive recursion and the second one is tail-recursive using the accumulator parameter.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-03T23:56:49.3730000",
      "likes": 56,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "list",
        "filter",
        "recursion",
        "pattern matching"
      ]
    },
    {
      "id": 23,
      "title": "Projecting lists",
      "comment": "Three functions showing how to implement projection for functional lists. First version uses naive recursion and the second one is tail-recursive using the accumulator parameter. The third version extends this with continuation passing.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-04T00:11:55.0030000",
      "likes": 60,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "list",
        "map",
        "recursion",
        "pattern matching",
        "continuation passing"
      ]
    },
    {
      "id": 24,
      "title": "Random walk",
      "comment": "Create sequence of floating point values generated by random walk process. Functional solution using sequence expressions and yield! construct in a tail-call position.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-04T00:29:39.0330000",
      "likes": 36,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "random walk",
        "recursion",
        "sequence expressions",
        "yield"
      ]
    },
    {
      "id": 25,
      "title": "Form changing color",
      "comment": "Windows Forms tutorial showing how to create form with button and how to register an event handler. When the button is clicked, the form changes its background color.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-04T00:37:34.0070000",
      "likes": 45,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "windows forms",
        "form",
        "random",
        "color",
        "events",
        "tutorial",
        "hello world"
      ]
    },
    {
      "id": 26,
      "title": "Hello world (F#)",
      "comment": "Classical \"Hello world\" example that prints a message to the console output. This version uses F# printfn function to do the printing.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-04T00:40:01.8930000",
      "likes": 164,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "printf",
        "hello world",
        "let"
      ]
    },
    {
      "id": 27,
      "title": "Hello world (.NET)",
      "comment": "Classical \"Hello world\" example that prints a message to the console output. This version uses .NET Console.WriteLine method to do the printing.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-04T00:42:26.9470000",
      "likes": 29,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "console",
        "writeline",
        "hello world",
        "let",
        "namespace"
      ]
    },
    {
      "id": 28,
      "title": "Friendly date formatting",
      "comment": "Generates a friendly string describing a date relatively to the current date and time. The function returns strings like \"2 secs ago\", \"yesterday\" or \"3 years ago\".",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-04T01:45:40.5100000",
      "likes": 34,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "datetime",
        "format",
        "sprintf"
      ]
    },
    {
      "id": 30,
      "title": "Pipeline list processing",
      "comment": "An example showing how to process list in a pipeline. We first use List.filter to return only even numbers and then use List.map to format them as strings.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-04T04:10:36.2500000",
      "likes": 83,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "pipeline",
        "list",
        "filter",
        "map"
      ]
    },
    {
      "id": 31,
      "title": "'use' Bindings",
      "comment": "Show's how to use F# 'use' key word to dispose a resource when it passes out of scope.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2010-12-04T07:32:35.1430000",
      "likes": 32,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "use",
        "io"
      ]
    },
    {
      "id": 32,
      "title": "Unfolding Sequences",
      "comment": "Demonstrates how to use unfold to create an infinite list of the fibonacci numbers",
      "author": "Robert Pickering",
      "link": "",
      "date": "2010-12-04T07:37:30.1100000",
      "likes": 52,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "lazy",
        "seq",
        "unfold"
      ]
    },
    {
      "id": 33,
      "title": "Using the 'lazy' Keyword",
      "comment": "This snippet uses the lazy keyword to create a delayed computation. It then show's using 'force' to evaluate the computation.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2010-12-04T07:42:20.7330000",
      "likes": 26,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lazy"
      ]
    },
    {
      "id": 34,
      "title": "Using the 'lazy' Keyword",
      "comment": "Demonstrates using the 'lazy' keyword. Show's how a lazy value will only ever be evaluated once.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2010-12-04T07:44:30.9530000",
      "likes": 43,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lazy"
      ]
    },
    {
      "id": 35,
      "title": "Unfolding Sequences",
      "comment": "Show's using the unfold function to create a sequence that terminates once some limit is passed.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2010-12-04T07:49:01.1170000",
      "likes": 33,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lazy",
        "seq",
        "unfold"
      ]
    },
    {
      "id": 36,
      "title": "Recursive functions",
      "comment": "Show's how to define a recursive function that will calculate a fibonacci number.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2010-12-04T07:52:55.8230000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "recursion"
      ]
    },
    {
      "id": 37,
      "title": "Using Active patterns",
      "comment": "Shows how to use an active pattern that will try to determine the format of an input value.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2010-12-04T07:57:50.1770000",
      "likes": 14,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "active pattern"
      ]
    },
    {
      "id": 38,
      "title": "Using Active patterns",
      "comment": "Show's how to create a parametrized active pattern that will match based on a regular expression.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2010-12-04T08:00:18.6070000",
      "likes": 30,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "active pattern"
      ]
    },
    {
      "id": 39,
      "title": "Units of Measure",
      "comment": "Show's how to define units of measure to add stronger typing to your numerical functions.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2010-12-04T08:03:30.1130000",
      "likes": 72,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "units of measure"
      ]
    },
    {
      "id": 40,
      "title": "Nice formatting of type names",
      "comment": "Add extension to System.Type that returns the name of type including generic arguments in a nice readable format. It returns only short names of generic type and type arguments.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-05T14:34:50.3130000",
      "likes": 18,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "extension",
        "system.type",
        "formatting"
      ]
    },
    {
      "id": 41,
      "title": "Support slicing operator",
      "comment": "The snippet shows how to support slicing in a type. Slicing allows you to get for example a 2D sub-matrix of a matrix and is implemented by adding GetSlice member. ",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-06T04:48:09.9800000",
      "likes": 44,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "slice",
        "matrix",
        "indexing",
        "getslice"
      ]
    },
    {
      "id": 42,
      "title": "Random Walk",
      "comment": "Random walk on integers starting at zero. At each step, we either add or subtract one depending on a random coin flip. The code uses Seq.unfold to generate infinite sequence.",
      "author": "James",
      "link": "",
      "date": "2010-12-06T18:30:29.0800000",
      "likes": 50,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "random walk",
        "unfold"
      ]
    },
    {
      "id": 43,
      "title": "Load XAML",
      "comment": "This example shows how to load a Xaml file allowing to use WPF from F#. It also shows how to access WPF objects and register event handlers.",
      "author": "Antonio Cisternino",
      "link": "",
      "date": "2010-12-06T19:27:27.1570000",
      "likes": 97,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "WPF",
        "XAML"
      ]
    },
    {
      "id": 44,
      "title": "Currying",
      "comment": "Currying is about fixing arguments of functions from left to right. It's useful to configurate code and embed parameters that usually serve to define the context of a function execution (i.e. a database connection object). Symbolic functions can be used to reorder arguments if needed.",
      "author": "Antonio Cisternino",
      "link": "",
      "date": "2010-12-07T08:18:19.5030000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "currying"
      ]
    },
    {
      "id": 45,
      "title": "warning check",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2010-12-07T19:35:06.3830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 46,
      "title": "kprintf for logging",
      "comment": "Handy *printf feature: use kprintf to prepend datetime to formatted message",
      "author": "Vladimir Matveev",
      "link": "",
      "date": "2010-12-13T15:34:19.0930000",
      "likes": 51,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "printf"
      ]
    },
    {
      "id": 47,
      "title": "Array shuffle",
      "comment": "Shuffle an array",
      "author": "Laurent",
      "link": "http://laurent.le-brun.eu",
      "date": "2010-12-13T16:06:31.0130000",
      "likes": 45,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "array",
        "shuffle",
        "random"
      ]
    },
    {
      "id": 48,
      "title": "Conditional printf",
      "comment": "Disable printf based on some condition",
      "author": "Laurent",
      "link": "http://laurent.le-brun.eu",
      "date": "2010-12-13T16:19:18.7400000",
      "likes": 36,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "printf",
        "formatting",
        "debug"
      ]
    },
    {
      "id": 49,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2010-12-13T16:28:35.0700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 50,
      "title": "NUnit Sugar",
      "comment": "Some simple functions for writing more idiomatic F# tests with NUnit.",
      "author": "Ryan Riley",
      "link": "http://github.com/panesofglass",
      "date": "2010-12-13T16:29:52.9330000",
      "likes": 81,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "NUnit",
        "unit testing"
      ]
    },
    {
      "id": 51,
      "title": "Parallel Sitemap Test Runner",
      "comment": "A sitemap-based url tester that runs in parallel.",
      "author": "Ryan Riley",
      "link": "http://github.com/panesofglass",
      "date": "2010-12-13T16:32:18.2830000",
      "likes": 43,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "web",
        "testing",
        "sitemap"
      ]
    },
    {
      "id": 52,
      "title": "Bit manipulation methods",
      "comment": "Bit manipulation methods",
      "author": "Andrei Logunov",
      "link": "laborhm@rol.ru",
      "date": "2010-12-13T19:01:33.5770000",
      "likes": 43,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "bits",
        "bit manipulation"
      ]
    },
    {
      "id": 53,
      "title": "Factorial",
      "comment": "Calculates the factorial for positive integers",
      "author": "Stefan Knoblauch",
      "link": "",
      "date": "2010-12-13T20:24:23.9630000",
      "likes": 25,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fac",
        "factorial"
      ]
    },
    {
      "id": 54,
      "title": "Composing a list of functions",
      "comment": "Composition of functions in F# is easily achieved by using the >> operator. You can also chain an arbitary amount of functions (represented as a list or sequence) together by folding the list/seq with >>. [More formally: the set of endomorphisms 'a -> 'a forms a monoid with the binary, associative operator \">>\" (or \"<<\") and the neutral element \"id\".]",
      "author": "Novox",
      "link": "http://stackoverflow.com/users/96583/novox",
      "date": "2010-12-13T20:44:45.2470000",
      "likes": 74,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "fold",
        "reduce",
        "compose",
        "function composition",
        "monoid"
      ]
    },
    {
      "id": 55,
      "title": "megaton/cluster.fs",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2010-12-14T00:57:47.4700000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 56,
      "title": "Minimal XML DSL",
      "comment": "This snippet provides a very small internal DSL for creating and querying XML using the underlying XLinq classes.\r\n\r\n",
      "author": "Blake Coverett",
      "link": "http://bcdev.com/",
      "date": "2010-12-14T03:00:04.7270000",
      "likes": 341,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "XML"
      ]
    },
    {
      "id": 57,
      "title": "FSX Structure",
      "comment": "I use this basic template when writing .fsx files that I might want to compile.   It adjusts the difference in command line/entrypoint handling between a script and a compiled assembly.    This example shows the details for a WPF script — replace the #r's and/or remove the STAThread for a WinForms or Console script. ",
      "author": "Blake Coverett",
      "link": "http://bcdev.com/",
      "date": "2010-12-14T03:26:37.5370000",
      "likes": 98,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "FSX",
        "WPF"
      ]
    },
    {
      "id": 58,
      "title": "Random Type with a few modifications",
      "comment": "The modified Random type is built on top of System.Random type.  It has a member Seed which returns a seed and NextFloat has the same overloads as NextInt (Next in System.Random). The members should further support units of measure.",
      "author": "Oldrich Svec",
      "link": "random",
      "date": "2010-12-14T06:26:04.5430000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "random"
      ]
    },
    {
      "id": 59,
      "title": "Triple (3D Vector)",
      "comment": "This class is a 3D vector representation. There is a module called Triple with operations on the triple type.",
      "author": "Oldrich Svec",
      "link": "",
      "date": "2010-12-14T06:38:18.5800000",
      "likes": 26,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "triple",
        "3D vector"
      ]
    },
    {
      "id": 60,
      "title": "very simple password gen",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2010-12-14T09:31:40.3230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 61,
      "title": "Continuation-Passing Mnemonics",
      "comment": "Continuations provide a means whereby heap space can be traded for stack depth (heap space being generally more plentiful than stack depth).  They are especially useful where tail recursion is not possible.  Here are a couple of simple continuation examples that can be extended to cover more complex scenarios.",
      "author": "Neil Carrier",
      "link": "http://techneilogy.blogspot.com/",
      "date": "2010-12-14T17:28:51.9100000",
      "likes": 83,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "continuations",
        "recursion"
      ]
    },
    {
      "id": 62,
      "title": "Functional style Regex engine",
      "comment": "Functional style Regex engine",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2010-12-14T20:31:41.1170000",
      "likes": 20,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Regex"
      ]
    },
    {
      "id": 63,
      "title": "Compiling quotations",
      "comment": "Demonstrates how to compose code at run time using F# quotations (both typed and untyped) and how to compile and run the quotation using F# PowerPack API.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-15T01:16:21.1830000",
      "likes": 52,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSPowerPack.Community"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "quotations",
        "compilation",
        "run time"
      ]
    },
    {
      "id": 64,
      "title": "Largest Palindrome Number from Product of Two Three Digit Numbers",
      "comment": "Here is an improved version twice shorter, than original",
      "author": "Nick Canzoneri",
      "link": "",
      "date": "2010-12-15T03:14:18.5730000",
      "likes": 66,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "sequence",
        "project euler problem"
      ]
    },
    {
      "id": 65,
      "title": "asd",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2010-12-15T04:58:50.6370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 66,
      "title": "Distance between two 3D segments",
      "comment": "The function segmentSegment takes 2 segments (starting and ending points) and computes the shortest distance between them. The function returns a starting and ending point of the shortest segment between the two segments. The function uses a triple type but can be easily rewritten to work with any other type (vector etc).",
      "author": "Oldrich Svec",
      "link": "",
      "date": "2010-12-15T06:19:46.4300000",
      "likes": 28,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "triple"
      ]
    },
    {
      "id": 67,
      "title": "Association list lookup",
      "comment": "While prototyping programs I find myself using association lists. This little snippet defines a lookup functions for association lists defined as lists of tuples.",
      "author": "Alex Muscar",
      "link": "",
      "date": "2010-12-15T07:59:43.0270000",
      "likes": 64,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "list",
        "lookup"
      ]
    },
    {
      "id": 68,
      "title": "Sequence Random Permutation",
      "comment": "A generic function that randomly permutes the elements of a sequence.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2010-12-15T11:50:33.2800000",
      "likes": 43,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "seq",
        "sequence",
        "random",
        "permutation"
      ]
    },
    {
      "id": 69,
      "title": "elements of 3 value tuple",
      "comment": "Analog to the fst and snd functions of the f# lib some functions for tuples with 3 values which i use quite regularly during prototyping phases.",
      "author": "daniel szymanski",
      "link": "",
      "date": "2010-12-15T16:52:24.6770000",
      "likes": 25,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "tuple"
      ]
    },
    {
      "id": 70,
      "title": "Haskell function : iterate",
      "comment": "Implements iterate function from Haskell's Prelude. The function generates an infinite sequence by applying a function to the initial value (first) and then to the result of previous application.",
      "author": "Nick Palladinos",
      "link": "http://zvon.org/other/haskell/Outputprelude/iterate_f.html",
      "date": "2010-12-15T20:26:03.9430000",
      "likes": 188,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Haskell functions",
        "seq"
      ]
    },
    {
      "id": 71,
      "title": "The Haskell const function",
      "comment": "The const function is simple, but you can use it to make your code more legible. In this example we convert a unary function to a function of arity 2 (that ignores the second argument). Also by using the flip function from Haskell (which is equally easy to define) you can ignore the first argument.",
      "author": "Alex Muscar",
      "link": "",
      "date": "2010-12-16T07:44:01.1600000",
      "likes": 106,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Haskell functions"
      ]
    },
    {
      "id": 72,
      "title": "Project Euler #1",
      "comment": "This snippet is code that solves first Project Euler problem. It finds the sum of all the multiples of 3 or 5 below 1000. Please add other (more efficient, succinct or interesting) solutions to this snippet.",
      "author": "Eugene Gavrin",
      "link": "http://twitter.com/KpoHyc",
      "date": "2010-12-16T11:10:02.4200000",
      "likes": 65,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "list",
        "filter",
        "fold",
        "euler problem"
      ]
    },
    {
      "id": 73,
      "title": "WinForms layout combinators",
      "comment": "A domain specific language for creating layout using Windows Forms. The snippet implements combinators for creating controls and simple automatic arrangement of them.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-17T00:12:37.4470000",
      "likes": 36,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dsl",
        "combinators",
        "winforms",
        "layout"
      ]
    },
    {
      "id": 74,
      "title": "A beautiful ﬁxed-point ﬁnding function",
      "comment": "We start with an initial value and then applying f repeatedly, until the value does not change anymore.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2010-12-17T11:18:26.6500000",
      "likes": 272,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "fixed point"
      ]
    },
    {
      "id": 75,
      "title": "Creating objects with events",
      "comment": "This snippet shows how to create objects with events in F#. It shows both simple event (to be used from F#) and a .NET compatible event with specific delegate type.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-17T11:54:30.0570000",
      "likes": 66,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "delegate",
        "event"
      ]
    },
    {
      "id": 76,
      "title": "Cartesian Product of Lists",
      "comment": "Computes the Cartesian product of a list of lists.  See also corresponding example for a sequence of sequences.",
      "author": "Neil Carrier",
      "link": "http://techneilogy.blogspot.com/",
      "date": "2010-12-18T03:08:48.2170000",
      "likes": 46,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Cartesian product",
        "list"
      ]
    },
    {
      "id": 77,
      "title": "Cartesian Product of Sequences",
      "comment": "Computes the Cartesian product of a sequence of sequences.  See corresponding example for a list of lists.",
      "author": "Neil Carrier",
      "link": "http://techneilogy.blogspot.com/",
      "date": "2010-12-18T03:11:40.7100000",
      "likes": 43,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Cartesian product",
        "seq"
      ]
    },
    {
      "id": 78,
      "title": "Working with paths",
      "comment": "Concatenating paths shouldn't be done just using string concatenation, because the directory separator may differ on various platforms. This snippet shows a simple custom operator for working with paths.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-19T01:07:56.3000000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "path",
        "custom operator"
      ]
    },
    {
      "id": 79,
      "title": "FizzBuzz",
      "comment": "add snippet tag",
      "author": "",
      "link": "",
      "date": "2010-12-19T09:42:55.7130000",
      "likes": 28,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "sample"
      ]
    },
    {
      "id": 80,
      "title": "Traverse quotation",
      "comment": "Shows how to use the 'ExprShape' module to recursively traverse an entire quotation and how to write quotation transformations. As an example, the snippet replaces all numeric constants in the quotation and then runs the transformed code.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-20T04:32:28.8600000",
      "likes": 24,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "quotations",
        "traversal",
        "transformation",
        "compilation"
      ]
    },
    {
      "id": 81,
      "title": "Setting the user agent of a Web request",
      "comment": "Some Web sites deny requests that aren't sent by recognized browsers and search engine crawlers. Setting the user agent header of the request is usually sufficient for bypassing this restriction.  ",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com",
      "date": "2010-12-20T11:04:07.1570000",
      "likes": 30,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WebRequest",
        "WebClient",
        "UserAgent"
      ]
    },
    {
      "id": 82,
      "title": "Asynchronous sequences",
      "comment": "An asynchronous sequence is similar to the seq<T> type, but the elements of the sequence are generated asynchronously without blocking the caller as in Async<T>. This snippet declares asynchronous sequence and uses it to compare two files in 1k blocks.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2010-12-21T01:03:01.9300000",
      "likes": 95,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async",
        "asynchronous",
        "seq",
        "sequence",
        "files"
      ]
    },
    {
      "id": 83,
      "title": "Convert an object to json, and json to object",
      "comment": "There is a namespace System.Runtime.Serialization.Json\r\n\r\nTo serialize generic object you can do like this...\r\n\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium",
      "date": "2010-12-21T12:32:12.5730000",
      "likes": 64,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "JSON",
        "Serialization"
      ]
    },
    {
      "id": 84,
      "title": "Getting a key from Windows registry",
      "comment": "F# code to fetch a registry key \r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium",
      "date": "2010-12-21T12:34:33.9270000",
      "likes": 40,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Registry"
      ]
    },
    {
      "id": 85,
      "title": "Decrypting a Rijndael string",
      "comment": "This F# code decrypts an encrypted string using Rijndael symmetric encryption algorithm. It uses key and initialization vector stored in a registry key.",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium",
      "date": "2010-12-21T12:38:18.8900000",
      "likes": 40,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Rijndael",
        "decrypt",
        "cryptography"
      ]
    },
    {
      "id": 86,
      "title": "Break sequence into n-element subsequences",
      "comment": "I'm working on parallel computations and I thought it would be useful to break work into chunks, especially when processing each element asynchronously is too expensive. The neat thing is that this function is general even though motivation for it is specific. Another neat thing is that this is true lazy sequence unlike what you'd get if you used Seq.groupBy. There are three versions for your enjoyment.",
      "author": "Dmitri Pavlenkov",
      "link": "",
      "date": "2010-12-22T03:44:00.4500000",
      "likes": 58,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "seq"
      ]
    },
    {
      "id": 87,
      "title": "Project Euler #2",
      "comment": "Solution to Project Euler problem 2: Find sum of even terms in fibonacci sequence which do not exceed four million.\r\n\r\nComments about the first version:\r\n1. It does't use memoize becouse of recursive call to unmemoized function \"fibs\". So it take over 20 sec to get answer. A minor change (\"fibs\" to \"fibs' \") reduces this time to 140ms.",
      "author": "D",
      "link": "http://projecteuler.net/index.php?section=problems&id=2",
      "date": "2010-12-22T20:44:19.7900000",
      "likes": 32,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "euler problem"
      ]
    },
    {
      "id": 88,
      "title": "Memoization and Tail Recursive Function",
      "comment": "Hi, I expressed  Memoization and  Memoization Tail Recursive on  the functions.\r\nI hope something useful.",
      "author": "zecl",
      "link": "http://d.hatena.ne.jp/zecl/",
      "date": "2010-12-23T21:03:48.0230000",
      "likes": 19,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "memoize",
        "memoization",
        "recursion",
        "tail recursive"
      ]
    },
    {
      "id": 89,
      "title": "EnumerableStream",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2010-12-25T21:19:48.3100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 90,
      "title": "EnumerableStream",
      "comment": "A lazy enumerable/stream of bytes.",
      "author": "Ryan Riley",
      "link": "http://github.com/panesofglass",
      "date": "2010-12-25T21:24:01.6730000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "Sequence",
        "Stream"
      ]
    },
    {
      "id": 91,
      "title": "Dictionary extensions",
      "comment": "Extensions to dictionaries.",
      "author": "Ryan Riley",
      "link": "https://github.com/panesofglass",
      "date": "2010-12-25T22:20:05.8100000",
      "likes": 27,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Dictionary",
        "extensions"
      ]
    },
    {
      "id": 92,
      "title": "Fibonacci sequence",
      "comment": "Cached fib sequence",
      "author": "Dmitri Pavlenkov",
      "link": "",
      "date": "2010-12-27T01:13:06.6530000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seq",
        "fibonacci",
        "sequence",
        "cache"
      ]
    },
    {
      "id": 93,
      "title": "inline pow",
      "comment": "LanguagePrimitives help create inline functions",
      "author": "Dmitri Pavlenkov",
      "link": "",
      "date": "2010-12-27T04:29:05.0970000",
      "likes": 37,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "inline",
        "LanguagePrimitives",
        "pow"
      ]
    },
    {
      "id": 94,
      "title": "Regex Match Index",
      "comment": "A function for interpreting the zero-based index property of a successful regular expression match in terms of line and column numbers.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2010-12-27T07:19:21.4970000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "regular",
        "expressions",
        "regex"
      ]
    },
    {
      "id": 95,
      "title": "Clojure's Atoms",
      "comment": "Clojure's Atoms are ref like structures, with the addition of (Compare And Swap) update semantics",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2010-12-27T19:21:34.3000000",
      "likes": 23,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Clojure",
        "Atom",
        "Concurrency"
      ]
    },
    {
      "id": 96,
      "title": "Closest Pair of Points",
      "comment": "Closest Pair of points problem in the planar case.",
      "author": "Martin Szarski",
      "link": "http://blog.decoratorpattern.com/2010/12/30/closest-pair-o…s-problem-in-f/",
      "date": "2010-12-30T09:02:59.5830000",
      "likes": 26,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "computational geometry",
        "geometry",
        "spatial"
      ]
    },
    {
      "id": 97,
      "title": "F# impl of SelectMany and TakeUntil from Rx",
      "comment": "F# implementation of SelectMany and TakeUntil (from Rx) on F# events\r\n",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2010-12-30T16:29:53.3430000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Events",
        "Rx"
      ]
    },
    {
      "id": 98,
      "title": "Functions around nullable types",
      "comment": "Various functions around nullable types",
      "author": "Mauricio Scheffer",
      "link": "http://bugsquash.blogspot.com/2010/09/nullable-in-f.html",
      "date": "2010-12-30T23:02:18.4770000",
      "likes": 20,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "nullable"
      ]
    },
    {
      "id": 99,
      "title": "Async hashing",
      "comment": "Async memory or file hashing",
      "author": "Mauricio Scheffer",
      "link": "http://bugsquash.blogspot.com",
      "date": "2010-12-30T23:12:25.8000000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "files",
        "hashing"
      ]
    },
    {
      "id": 100,
      "title": "Async SMTP",
      "comment": "Async wrapper for SmtpClient (which is event-based)",
      "author": "Mauricio Scheffer",
      "link": "http://bugsquash.blogspot.com",
      "date": "2010-12-30T23:19:28.3930000",
      "likes": 14,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "smtp"
      ]
    },
    {
      "id": 101,
      "title": "Parsing string expressions, the lazy way",
      "comment": "Sometimes you'd be surprised at what functionality you can find inside the .Net framework. Apparently the DataTable object can compute string expressions. Nice for testing your own parser implementation, and/or for lazy coders like me.\r\n\r\nNote that the DataTable is created only once and reused with each function call.",
      "author": "Arjen Kopinga",
      "link": "",
      "date": "2010-12-31T10:52:55.3930000",
      "likes": 33,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "expression",
        "parsing"
      ]
    },
    {
      "id": 102,
      "title": "Async TCP Server",
      "comment": "A basic, asynchronous TCP server",
      "author": "Ryan Riley",
      "link": "https://github.com/panesofglass",
      "date": "2011-01-04T17:54:05.3300000",
      "likes": 21,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "server",
        "TCP",
        "async",
        "socket"
      ]
    },
    {
      "id": 103,
      "title": "Tree searching using Tail recursion with continuation",
      "comment": "Sample code which demonstrate tree searching using : Tail recursion with continuation\r\n",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-01-07T11:48:57.2100000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Tail recursion",
        "continuation"
      ]
    },
    {
      "id": 104,
      "title": "Calculating Age",
      "comment": "This function interprets a time span in terms of years, months and days.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2011-01-08T07:10:05.5330000",
      "likes": 24,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "timespan"
      ]
    },
    {
      "id": 105,
      "title": "Async to IObservable",
      "comment": "Wraps an Async as an IObservable to allow easier consumption by other .NET languages. Many thanks to desco for his help: http://cs.hubfs.net/forums/thread/16545.aspx",
      "author": "Ryan Riley",
      "link": "https://github.com/panesofglass",
      "date": "2011-01-10T17:52:33.0500000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async",
        "IObservable",
        "Asynchronous Processing",
        "Rx"
      ]
    },
    {
      "id": 106,
      "title": "Partition a sequence until a predicate is satiated",
      "comment": "This function is given a partition predicate and a sequence.  Until the predicate returns false, a list will be filled with elements.  When it is, both the list and the remainder of the sequence will be returned.  Note that this example preserves the laziness of the unchecked sequence elements.\r\n",
      "author": "Rick Minerich",
      "link": "",
      "date": "2011-01-10T20:25:00.2270000",
      "likes": 59,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 10,
      "tags": [
        "seq",
        "list",
        "subset",
        "partition"
      ]
    },
    {
      "id": 107,
      "title": "Create generic IEnumerable from non-generic",
      "comment": "Depends on Castle Dynamic Proxy 2. Returns an IEnumerable<T> from a System.Type and a System.Collections.IEnumerable. It is a hack I wrote simply because I couldn't find anything in the framework to do this.",
      "author": "Dan Finch",
      "link": "http://da.nfin.ch/",
      "date": "2011-01-10T23:36:54.1370000",
      "likes": 24,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "reflection",
        "generics"
      ]
    },
    {
      "id": 108,
      "title": "Seq.tryTake",
      "comment": "A more tolerant and open-minded take.",
      "author": "Dan Finch",
      "link": "http://da.nfin.ch/",
      "date": "2011-01-11T22:12:10.8800000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seq"
      ]
    },
    {
      "id": 109,
      "title": "Convert a obj list to a typed list without generics",
      "comment": "This is used for building things with reflection at runtime.   As ConstructorInfo arguments require typed collections, it is necessary when parsing to reflected records to first build up contents and then afterward convert the collected obj[] to a 'a[].  This is finally cast back to obj so it can be used as a ConstructorInfo argument. \r\n",
      "author": "Rick Minerich",
      "link": "http://richardminerich.com",
      "date": "2011-01-12T07:35:26.6200000",
      "likes": 27,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Reflection",
        "Collections"
      ]
    },
    {
      "id": 110,
      "title": "Get Stock Quote Data and Historical Stock Prices from Yahoo Finance",
      "comment": "Get Stock Quote Data and Historical Stock Prices from Yahoo Finance.\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium",
      "date": "2011-01-12T14:15:40.4530000",
      "likes": 220,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "WebRequest",
        "finance",
        "stock market"
      ]
    },
    {
      "id": 111,
      "title": "Function to generate circular infinite sequence from a list",
      "comment": "Function to generate circular infinite sequence from a list",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-01-12T15:44:53.7730000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequence",
        "Seq"
      ]
    },
    {
      "id": 112,
      "title": "LazyList",
      "comment": "A LazyList implementation with tail recursive enumeration.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-01-12T18:23:21.4230000",
      "likes": 37,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "LazyList"
      ]
    },
    {
      "id": 113,
      "title": "Easy Wrapper for thread pool work",
      "comment": "An easy wrapper for the TPL that works nicely with (|>)",
      "author": "Paul Greene",
      "link": "",
      "date": "2011-01-12T21:37:14.8800000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "async"
      ]
    },
    {
      "id": 114,
      "title": "Function to get all possible combinations",
      "comment": "Function to get all possible combinations of list items. \r\nThere are some Euler problems (like 77 & 78) to get total amounts. But e.g. for some card game implementations you will need the real items.\r\n\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium",
      "date": "2011-01-13T01:52:04.7630000",
      "likes": 42,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "combination",
        "list",
        "math"
      ]
    },
    {
      "id": 115,
      "title": "Take every Nth element of sequence",
      "comment": "A function that takes every Nth element of a sequence where N is passed as an argument. The snippet shows a naive function and a function using IEnumerator directly to provide an efficient implementation.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-01-13T04:05:33.4230000",
      "likes": 24,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequence",
        "seq"
      ]
    },
    {
      "id": 116,
      "title": "Function to generate all possible combinations where combination \"ab\" != \"ba\"",
      "comment": "Function to generate all possible combinations where combination \"ab\" is different then \"ba\"\r\n",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-01-13T05:21:58.4470000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "List",
        "recursion",
        "combination"
      ]
    },
    {
      "id": 117,
      "title": "Remove first ocurrence from list",
      "comment": "Removes from list the first ocurrence only of an element that satisfies the predicate. Additional elements that also satisfy the predicate remain in the list.",
      "author": "Alexander Rautenberg",
      "link": "http://www.codingforfood.com",
      "date": "2011-01-13T08:50:49.9300000",
      "likes": 47,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "list"
      ]
    },
    {
      "id": 118,
      "title": "Inline factorial samples with fix point",
      "comment": "While reading Tomas Petricek's master thesis, came across FIX operator implementation. Decided to experiment with various implementations of factorial.",
      "author": "Dmitri Pavlenkov",
      "link": "",
      "date": "2011-01-13T18:40:10.9500000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "factorial",
        "recursive",
        "inline",
        "fix",
        "languageprimitives"
      ]
    },
    {
      "id": 119,
      "title": "Clojure's Atoms",
      "comment": "Clojure's Atoms are ref like structures, with the addition of (Compare And Swap) update semantics",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-01-13T21:50:13.6070000",
      "likes": 21,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Clojure",
        "Atom",
        "Concurrency"
      ]
    },
    {
      "id": 120,
      "title": "Supercompilation using quotations",
      "comment": "This code sample shows how to create a function that raises number to a given power using supercompilation with quotations. For any given power, the function returns quoted expression for calculating the power using explicit multiplications, which is then evaluated.",
      "author": "Dmitry Soshnikov",
      "link": "http://www.soshnikov.com",
      "date": "2011-01-13T22:19:14.5600000",
      "likes": 19,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "quotations",
        "supercompilation"
      ]
    },
    {
      "id": 121,
      "title": "Simple HTTP server with Async workflow",
      "comment": "Simple HTTP server with Async workflow and Http Listener",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-01-14T05:16:53.5030000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Async",
        "Server"
      ]
    },
    {
      "id": 122,
      "title": "Playing with async sequences",
      "comment": "Attempt to reimplement functions AsyncRead/AsyncReadLines from 'Rx on the server ' articles (by Jeffrey van Gogh) using idea of AsyncSequence (by Tomas Petricek)",
      "author": "Vladimir Matveev",
      "link": "",
      "date": "2011-01-14T23:06:47.4200000",
      "likes": 25,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F#",
        "Async",
        "Async sequences"
      ]
    },
    {
      "id": 123,
      "title": "Creating charts in F#",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-01-15T23:44:42.1400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 124,
      "title": "Project Euler #182",
      "comment": "The RSA encryption is based on the following procedure:\r\nGenerate two distinct primes p and q. Compute n=pq and phi=(p-1)(q-1).\r\nFind an integer e, 1<e<phi, such that gcd(e,phi)=1.\r\n\r\nThere exist values of e and m such that m^(e) mod n=m.\r\nWe call messages m for which m^(e) mod n=m unconcealed messages.\r\n\r\nChoose p=1009 and q=3643. Find the sum of all values of e, so that the number of unconcealed messages for this value of e is at a minimum.",
      "author": "Natallie Baikevich",
      "link": "",
      "date": "2011-01-16T13:02:37.0830000",
      "likes": 24,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "RSA",
        "euler problem",
        "gcd",
        "recursion",
        "sumBy"
      ]
    },
    {
      "id": 125,
      "title": "Active pattern for let binding inside patterns",
      "comment": "The Let active pattern demonstrated by this snippet can be used to assign values to symbols in pattern matching. This is useful for writing complex pattern matching using match as we can handle multiple cases using a single clause.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-01-17T00:36:33.6130000",
      "likes": 59,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "active pattern",
        "pattern matching"
      ]
    },
    {
      "id": 126,
      "title": "URL Canonicalization",
      "comment": "This function produces safe URLs for Web requests or URI construction. It forces the pattern:\r\nhttp:// + www. OR subdomain. + domain + absolute path.\r\nWhen used in an application that takes URLs as input, the user would  be able to type \"example.com\" instead of \"http://example.com\" or \"http://www.example.com\". It also supports domains like google.co.uk or google.com.au.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2011-01-17T09:59:09.2200000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "URL",
        "URI",
        "Regex"
      ]
    },
    {
      "id": 127,
      "title": "Pascal's Triangle",
      "comment": "This code sample generates Pascal's triangle as jagged 2D list (list of lists).",
      "author": "Dmitry Soshnikov",
      "link": "http://www.soshnikov.com",
      "date": "2011-01-17T21:08:02.9570000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lists",
        "jagged array",
        "algorithms",
        "learning f#"
      ]
    },
    {
      "id": 128,
      "title": "Anagrams",
      "comment": "Let's use the fundamental theorem of arithmetic to determine if two words are anagrams of each other. How? The theorem states (roughly) that each number can be written as a product of prime numbers in only one unique way. For instance 42 = 7 * 2 * 3 = 3 * 7 * 2.\r\n\r\nNow what will happen if you associate a letter with a unique prime number? You can see that \"team\" [71*11*2*41] = \"meat\" [41*11*2*71]. Oh, the possibilities. Note that in the code below big integers are used since the product of many primes will overflow a 32- or even a 64-bit integer.",
      "author": "Arjen Kopinga",
      "link": "",
      "date": "2011-01-18T10:57:25.5370000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Algorithms",
        "anagram"
      ]
    },
    {
      "id": 129,
      "title": "Hex encode / decode",
      "comment": "Performs conversions to and from hexadecimal values.",
      "author": "Daniel Robinson",
      "link": "",
      "date": "2011-01-19T15:46:50.5700000",
      "likes": 26,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "hexadecimal"
      ]
    },
    {
      "id": 130,
      "title": "Quote SQL Server identifiers",
      "comment": "Quotes SQL Server identifiers. Handles embedded quotes.",
      "author": "Daniel Robinson",
      "link": "",
      "date": "2011-01-19T15:57:51.8770000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "SQL Server",
        "T-SQL",
        "identifiers"
      ]
    },
    {
      "id": 131,
      "title": "Lazily split string",
      "comment": "Splits strings lazily, instead of splitting entire string into an array like System.String.Split. Especially useful for very large strings.",
      "author": "Daniel Robinson",
      "link": "",
      "date": "2011-01-20T15:56:10.9270000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "parsing",
        "strings"
      ]
    },
    {
      "id": 132,
      "title": "Change identifier case",
      "comment": "Converts string to Pascal or camel case. Useful mostly for identifiers. Uses case changes to determine word boundaries.",
      "author": "Daniel Robinson",
      "link": "",
      "date": "2011-01-20T16:29:03.7470000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "strings",
        "capitalization"
      ]
    },
    {
      "id": 133,
      "title": "Regular expression active pattern",
      "comment": "Active pattern returning list of captured groups.",
      "author": "Daniel Robinson",
      "link": "",
      "date": "2011-01-20T17:03:15.7900000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "regex",
        "active pattern"
      ]
    },
    {
      "id": 134,
      "title": "debugging window",
      "comment": "The window is useful when you want to print out data to the screen.",
      "author": "Stefan Knoblauch",
      "link": "",
      "date": "2011-01-20T20:19:26.0830000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "windows forms",
        "debugging"
      ]
    },
    {
      "id": 135,
      "title": "Pascal's Triangle (2)",
      "comment": "This code sample generates Pascal's triangle as jagged 2D list (list of lists).\r\nIt takes 0.5 sec to generate 3000 rows (vs 16 sec for http://fssnip.net/23). \r\n\r\nTip: try to avoid of using \"list1 @ list2\" construction.\r\n",
      "author": "Shamil Sayfutdinov",
      "link": "",
      "date": "2011-01-21T13:03:57.1270000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lists",
        "jagged array",
        "algorithms",
        "learning f#"
      ]
    },
    {
      "id": 136,
      "title": "Infinite sequences",
      "comment": "Haskell-inspired infinite sequences",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-01-22T13:04:39.3470000",
      "likes": 44,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Haskell functions",
        "LazyList"
      ]
    },
    {
      "id": 137,
      "title": "Merge two events in one event to move over a list",
      "comment": "Merge two events in one event to move over a list. Can be used to implement a wizard / slider mechanism",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-01-22T19:02:21.5600000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Events"
      ]
    },
    {
      "id": 138,
      "title": "Uri Parser",
      "comment": "A Uri parser using the Cashel library [1]. This implementation is using ArraySegment<byte> as the underlying state, as I'm using it within a server, but it would be trivial to switch it to using a list. Also, note that I am not parsing the Uri into any specific structure, though that, too, would be trivial. For my current purposes, I just needed to validate the Uri.\r\n\r\n[1] https://github.com/panesofglass/cashel",
      "author": "Ryan Riley",
      "link": "https://github.com/panesofglass",
      "date": "2011-01-24T15:21:59.4570000",
      "likes": 25,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "parsing",
        "uri",
        "monad"
      ]
    },
    {
      "id": 139,
      "title": "Composable WCF Web API using Async",
      "comment": "A functional wrapper around the new WCF Web APIs (http://wcf.codeplex.com/). Composition is achieved through the use of the HttpRequestMessage -> Async<HttpResponseMessage> signature.\r\n\r\nPushing the app calls in the MessageHandler intercepts all requests and allows you to take control at the earliest point possible before operation selection occurs. Extending this slightly to call the innerChannel's SendAsync would allow you to create a middleware layer that would work both with this and other, normal Web API services.",
      "author": "Ryan Riley",
      "link": "http://wcfhttpcontrib.codeplex.com/",
      "date": "2011-01-24T16:40:20.2730000",
      "likes": 52,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 10,
      "tags": [
        "Async",
        "wcf",
        "wcf web api",
        "web"
      ]
    },
    {
      "id": 140,
      "title": "LinkedList extensions",
      "comment": "LinkedList functional extension providing find and findi higher order functions that take a predicate function.",
      "author": "Phillip Trelford",
      "link": "",
      "date": "2011-01-27T10:27:57.5100000",
      "likes": 38,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "LinkedList"
      ]
    },
    {
      "id": 141,
      "title": "A simple Quine",
      "comment": "A simple Quine in F#",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-01-30T16:42:13.3770000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Quine"
      ]
    },
    {
      "id": 142,
      "title": "Sorted Map",
      "comment": "Sorted Map",
      "author": "fholm",
      "link": "",
      "date": "2011-01-30T18:31:23.6330000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "map",
        "sorted"
      ]
    },
    {
      "id": 143,
      "title": "A little esoteric os",
      "comment": "Petrovich is more than just a programming language, it is a complete computer operating system and program development environment named after Ivan Petrovich Pavlov. \r\nDesign Principles: \r\n    * Provide an operating system and computer language that can learn and improve its performance in a natural manner.\r\n    * Adapt to user feedback in an intelligent manner. ",
      "author": "Natallie Baikevich",
      "link": "",
      "date": "2011-01-31T08:35:28.7930000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "mailbox processor"
      ]
    },
    {
      "id": 144,
      "title": "Exiting cleanly",
      "comment": "Demonstrates how to run a function when the user presses Ctrl+C, closes the console window, or logs off.",
      "author": "Tim Robinson",
      "link": "",
      "date": "2011-01-31T08:44:00.8400000",
      "likes": 31,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "console",
        "pinvoke"
      ]
    },
    {
      "id": 145,
      "title": "Plotting using Chart сontrol",
      "comment": "This snippet shows how to plot data on a form using .NET 4.0 Chart control.",
      "author": "Dmitry Soshnikov",
      "link": "http://www.soshnikov.com",
      "date": "2011-01-31T14:43:07.2170000",
      "likes": 35,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "plotting",
        "chart control",
        "visualization",
        "charts",
        "graphics"
      ]
    },
    {
      "id": 146,
      "title": "Example of annoying enumeration syntax",
      "comment": "Example of annoying enumeration syntax",
      "author": "fholm",
      "link": "",
      "date": "2011-01-31T21:48:22.1630000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "enumeration"
      ]
    },
    {
      "id": 147,
      "title": "Seq.unsort",
      "comment": "Randomizes order of specified sequence",
      "author": "Phillip Trelford",
      "link": "",
      "date": "2011-02-03T09:16:51.3700000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Seq"
      ]
    },
    {
      "id": 148,
      "title": "A Simple F# QuadTree",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-02-03T23:10:47.1930000",
      "likes": 4,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 149,
      "title": "Find verbose .NET types using Reflection",
      "comment": "Searches all (currently loaded) types using Reflection to find the types with longest and shortest names of members. Uses average length of all type member names as a metric.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-02-04T00:50:38.0930000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fun",
        "reflection",
        "type"
      ]
    },
    {
      "id": 150,
      "title": "Int32.tryParse",
      "comment": "Converts the string representation of a number in-place to an Int32. A return value of None indicates the conversion failed.",
      "author": "Phillip Trelford",
      "link": "http://msdn.microsoft.com/en-us/library/f02979c7.aspx",
      "date": "2011-02-04T07:10:32.8870000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "parsing"
      ]
    },
    {
      "id": 151,
      "title": "A Clojure inspired (race free) memoize function ",
      "comment": "A Clojure inspired (race free) memoize function, that uses a mutable atom cell.",
      "author": "Nick Palladinos",
      "link": "http://clojure.org/atoms",
      "date": "2011-02-04T13:16:15.9530000",
      "likes": 21,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "memoize",
        "Clojure",
        "Atom"
      ]
    },
    {
      "id": 152,
      "title": "Disposable computation builder",
      "comment": "Computation builder that provides easy way of constructing IDisposable objects. It supports elegant composition of disposable objects using 'do!' which can be used for example when working with 'IObservable' type.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-02-04T16:03:30.6400000",
      "likes": 41,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "disposable",
        "computation builder",
        "monad",
        "rx",
        "reactive"
      ]
    },
    {
      "id": 153,
      "title": "Parse HTTP chunked response",
      "comment": "Code to parse HTTP chunked response, to use as a client to a Comet server who uses chunked encoding to transfer real time notification data",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-02-05T10:47:19.6500000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "HTTP",
        "Chunked encoding"
      ]
    },
    {
      "id": 154,
      "title": "Euler 1 as a Computation Expression",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-02-08T18:44:08.3130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 155,
      "title": "Project Euler 1 - While Loop",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-02-08T19:27:08.5330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 156,
      "title": "Miller–Rabin primality test",
      "comment": "Miller–Rabin primality test is an algorithm which determines whether a given number is probable prime. For more information go to http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test",
      "author": "Cesar Mendoza",
      "link": "https://github.com/paks/ProjectEuler/blob/master/Euler2/Euler2/euler2.fs",
      "date": "2011-02-09T20:34:25.5700000",
      "likes": 31,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "prime testing",
        "primes"
      ]
    },
    {
      "id": 157,
      "title": "ObservableObject",
      "comment": "The ObservableObject type implements the INotifyPropertyChanged interface used in WPF and Silverlight to notify on changes to properties that are bound to a control. Specify property names type safely using F# Quotations, i.e. <@ this.PropertyName @> when invoking the NotifyPropertyChanged method. If you are following the MVVM pattern then your View Model class can inherit from the ObservableObject type.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-02-10T13:40:23.9700000",
      "likes": 55,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "WPF",
        "Silverlight",
        "MVVM"
      ]
    },
    {
      "id": 158,
      "title": "Functional wrappers for TryParse APIs",
      "comment": "Exemplary convenience wrappers for some of the System.<Typename>.TryParse APIs, using the combined power of F#' return value deconstruction mechanism via pattern matching, active patterns and option types instead of \"out/ref\" parameters",
      "author": "Novox",
      "link": "http://stackoverflow.com/users/96583/novox",
      "date": "2011-02-10T17:46:57.7130000",
      "likes": 21,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "parsing",
        "pattern matching",
        "active patterns",
        "wrapper"
      ]
    },
    {
      "id": 159,
      "title": "All combinations of list elements",
      "comment": "For a given list, find all possible combinations of elements of the list (not just k-combinations). The result is a list of lists with each element representing one combination. Order of elements is not taken into account.",
      "author": "Alexander Rautenberg",
      "link": "http://www.codingforfood.com",
      "date": "2011-02-10T18:19:55.3400000",
      "likes": 26,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "list",
        "combinations"
      ]
    },
    {
      "id": 160,
      "title": "Cartesian product of n lists",
      "comment": "Cartesian product of a variable number of lists. Input is a list of lists of which the cartesian product is to be constructed; output is a list that contains the elements of the product set, as lists.",
      "author": "Alexander Rautenberg",
      "link": "http://www.codingforfood.com",
      "date": "2011-02-10T22:21:21.2000000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "list",
        "combination",
        "cartesian"
      ]
    },
    {
      "id": 161,
      "title": "Inspect middle of a pipeline in VS 2010 debugger",
      "comment": "Put the code at some place and enable \"Step Into Properties and Operators in Managed Code\":\r\n\r\nhttp://msdn.microsoft.com/en-us/library/cc667388.aspx\r\n\r\nNow you should be able to step into the pipeline operator.",
      "author": "Oldrich Svec",
      "link": "",
      "date": "2011-02-11T08:31:51.8100000",
      "likes": 34,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "debug",
        "pipeline"
      ]
    },
    {
      "id": 162,
      "title": "get the list of LAN Sql servers",
      "comment": "get the list of ethernet sql servers",
      "author": "nCdy",
      "link": "",
      "date": "2011-02-11T11:12:38.2230000",
      "likes": 83,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "SQL Server"
      ]
    },
    {
      "id": 163,
      "title": "Palindromic dates",
      "comment": "Today, 11. february 2011, is a palindromic day according to the European date format (day/month/year). This snippet collects all the palindromic dates until 31 dec. 9999. They are 366, a surprisingly low number.",
      "author": "Francesco De Vittori",
      "link": "http://www.frenk.com",
      "date": "2011-02-11T14:30:33.4670000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences",
        "Lists",
        "Dates"
      ]
    },
    {
      "id": 164,
      "title": "Observable.Subject",
      "comment": "The Subject<T> type implements both IObserver<T> and IObservable<T>. It is functionally equivalent to the type of the same name in the Reactive Extensions (Rx) library. ",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-02-11T16:41:05.8700000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Observable"
      ]
    },
    {
      "id": 165,
      "title": "Ugly hack to call F# functions as static methods",
      "comment": "Ugly hack to call F# functions as static methods",
      "author": "fholm",
      "link": "",
      "date": "2011-02-11T19:50:46.6330000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dlr"
      ]
    },
    {
      "id": 166,
      "title": "reference to array element",
      "comment": "Nice thing you can do in F# that you can't do in C#, pulling a reference to an array element as a local var.",
      "author": "fholm",
      "link": "",
      "date": "2011-02-11T19:59:45.2000000",
      "likes": 24,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "array"
      ]
    },
    {
      "id": 167,
      "title": "Read only ref",
      "comment": "F# implementation of RO_ref from the \"Effective ML\" talk.",
      "author": "fholm",
      "link": "",
      "date": "2011-02-12T11:39:01.4230000",
      "likes": 79,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "ml",
        "ref"
      ]
    },
    {
      "id": 168,
      "title": "Abstract Console.ReadLine as an infinite sequence",
      "comment": "Abstracts console input as an infinite sequence of lines of text",
      "author": "fholm",
      "link": "",
      "date": "2011-02-12T13:31:50.0600000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "console",
        "seq"
      ]
    },
    {
      "id": 169,
      "title": "Re-creating arithmetic with DU",
      "comment": "You never know when you might need this.",
      "author": "Dmitri Pavlenkov",
      "link": "",
      "date": "2011-02-13T03:03:30.7030000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "DU",
        "discriminated union",
        "match"
      ]
    },
    {
      "id": 170,
      "title": "Simple Object orientation using Record types",
      "comment": "Simple Object orientation using Record types. No complex - private public internal virtual abstract object oriented programming :)",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-02-14T05:41:35.2130000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Records",
        "Objects"
      ]
    },
    {
      "id": 171,
      "title": "Farey Sequence",
      "comment": "Return a sequence that contains the numerators and denominators as tuples for Farey Sequence n.",
      "author": "Graham Spiers",
      "link": "",
      "date": "2011-02-14T18:42:08.5100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences",
        "Farey"
      ]
    },
    {
      "id": 172,
      "title": "Jaro-Winkler in F#",
      "comment": "Jaro-Winkler is a fast and effective name matching algorithm.  \r\n\r\nFor more info see \"A Comparison of String Distance Metrics for Name-Matching Tasks\" http://www.isi.edu/info-agents/workshops/ijcai03/papers/Cohen-p.pdf\r\nor the Wikipedia article\r\nhttp://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance",
      "author": "Rick Minerich",
      "link": "RichardMinerich.com",
      "date": "2011-02-14T21:01:11.5030000",
      "likes": 29,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 7,
      "tags": [
        "text",
        "matching"
      ]
    },
    {
      "id": 173,
      "title": "IronJS Boxing Struct",
      "comment": "This is the struct IronJS uses internally to do NaN-tagging of boxed values, using the technique described here http://blog.mozilla.com/rob-sayre/2010/08/02/mozillas-new-javascript-value-representation/ and here http://article.gmane.org/gmane.comp.lang.lua.general/58908",
      "author": "fholm",
      "link": "",
      "date": "2011-02-15T08:41:53.7470000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "ironjs",
        "structs"
      ]
    },
    {
      "id": 174,
      "title": "Caching the function object created",
      "comment": "Caching the function object created",
      "author": "fholm",
      "link": "",
      "date": "2011-02-15T20:29:49.8730000",
      "likes": 16,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "functions",
        "fast",
        "operator"
      ]
    },
    {
      "id": 175,
      "title": "Struct Tuple",
      "comment": "Two/Three/Four-element generic tuples implemented as a value types for writing more efficient F# code.",
      "author": "fholm",
      "link": "",
      "date": "2011-02-15T20:37:18.4870000",
      "likes": 54,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 7,
      "tags": [
        "struct",
        "tuple"
      ]
    },
    {
      "id": 176,
      "title": "Abstracting over 'M'",
      "comment": "A higher kind of request to Don Syme... please please please,,,, we desperately need higher kinds!",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-02-16T10:31:23.2670000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Polymorphism",
        "Monads"
      ]
    },
    {
      "id": 177,
      "title": "Serialization of functions",
      "comment": "Serialization and deserialization of a function value with Soap formatting.\r\n(With serious limitations; not sure how useful this is.)",
      "author": "wmeyer",
      "link": "",
      "date": "2011-02-16T23:28:07.9830000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "serialization"
      ]
    },
    {
      "id": 178,
      "title": "Huffman coding",
      "comment": "Naive implementation of HuffmanCoding",
      "author": "lamer",
      "link": "http://en.wikipedia.org/wiki/Huffman_coding",
      "date": "2011-02-18T21:00:55.2230000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 0,
      "tags": []
    },
    {
      "id": 179,
      "title": "Scheme interpreter in F#",
      "comment": "A small Scheme interpreter using Higher Order Abstract Syntax (HOAS) encoding for terms. The essence of the technique is to use F# (meta-level) functions to encode Scheme (object-level) functions and other binding constructs, thus avoiding the need for representing variables, bindings, explicit substitution and dealing with shadowing.",
      "author": "Anton Tayanovskyy",
      "link": "t0yv0.blogspot.com",
      "date": "2011-02-19T01:46:05.6600000",
      "likes": 36,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "hoas",
        "scheme",
        "learning f#"
      ]
    },
    {
      "id": 180,
      "title": "Dynamic operator using Dynamic Language Runtime",
      "comment": "The snippet shows a simple implementation of the dynamic operator (?) that uses Dynamic Language Runtime and the C# implementation of dynamic operations. The snippet shows how to invoke instance methods with single argument.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-02-20T17:03:17.8900000",
      "likes": 29,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dynamic",
        "invoke",
        "reflection",
        "dlr"
      ]
    },
    {
      "id": 181,
      "title": "Dynamic operator using Reflection",
      "comment": "Demonstrates how to implement the dynamic operator (?) using .NET Reflection. The implementation supports calling constructors, propreties and methods using simple overload resolution (based on parameter count). It handles instance as well as static members.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-02-20T17:24:11.3430000",
      "likes": 56,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "dynamic",
        "invoke",
        "reflection"
      ]
    },
    {
      "id": 182,
      "title": "test version",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-02-20T21:18:35.1230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 183,
      "title": "Top-Down-Operator-Precedence Parser",
      "comment": "F# implementation of a generic Top-Down-Operator-Precedence Parser as described in this paper http://portal.acm.org/citation.cfm?id=512931\r\n\r\nExample starts at line ~300\r\n",
      "author": "fholm",
      "link": "",
      "date": "2011-02-21T14:45:07.2070000",
      "likes": 80,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "parsers",
        "parser"
      ]
    },
    {
      "id": 184,
      "title": "Pascal's Triangle",
      "comment": "Returns the pascal triangle in a 2D list . This snippet computes rows translating the 'visual' method taught at school into Lists and the usage of map2 function. It takes almost 5 seconds to compute 5000 rows.",
      "author": "Horacio Nuñez",
      "link": "http://merthin.com",
      "date": "2011-02-21T22:21:27.0070000",
      "likes": 19,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "pascal",
        "algorithms",
        "lists"
      ]
    },
    {
      "id": 185,
      "title": "Extensions to the Fold function",
      "comment": "This snippet is helpfull in the following cases:\r\n\r\n1) After a consolidation operation using the fold function we need to know how many elements have been processed.   \r\n\r\n2) A consolidation operation needs to use the index of each of the elements processed and we don't want to use\r\n   the mapi function first.\r\n\r\n3) A combination of the above.\r\n\r\nSince the following snippet just adds a wrapper to the existing Fold function we can repeat the approach for \r\narrays and sequences (including the plinq ones)\r\n",
      "author": "Horacio Nuñez",
      "link": "http://merthin.com",
      "date": "2011-02-22T05:57:52.0630000",
      "likes": 27,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "lists",
        "sequences",
        "arrays",
        "extension",
        "fold"
      ]
    },
    {
      "id": 186,
      "title": "String repeater",
      "comment": "A function that efficiently creates a new string containing a given string multiple times. The function is implemented using .NET StringBuilder class.",
      "author": "fholm",
      "link": "",
      "date": "2011-02-22T08:56:30.8370000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "string .net"
      ]
    },
    {
      "id": 187,
      "title": "Union constructors can be used as functions",
      "comment": "Union constructors can be used as functions",
      "author": "fholm",
      "link": "",
      "date": "2011-02-22T12:18:50.8770000",
      "likes": 16,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "unions",
        "functions"
      ]
    },
    {
      "id": 188,
      "title": "Perl Style \"Regex Matches?\" operator",
      "comment": "Perl Style \"Regex Matches?\" operator",
      "author": "fholm",
      "link": "",
      "date": "2011-02-22T16:48:32.1230000",
      "likes": 46,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "regex",
        "regexp",
        "operator",
        "operators"
      ]
    },
    {
      "id": 189,
      "title": "Small embedded DSL to write in F# \"Who is John Galt?\"",
      "comment": "This snippet how we can use F# constructs like discrimated unions, functions and symbolic identifiers to represent proper language statements (albeit limited) using valid F# code.\r\n\r\n",
      "author": "Horacio Nuñez",
      "link": "http://merthin.com",
      "date": "2011-02-23T17:58:33.7600000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dsl",
        "embedded"
      ]
    },
    {
      "id": 190,
      "title": "Create Disposable",
      "comment": "This pattern is helpful when you want to do something temporarily and then restore some state. This was inspired by the System.Disposable.Disposable() class defined in System.Core.dll distributed by the Reactive Extensions for .NET (Rx) library.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2011-02-23T20:18:25.3270000",
      "likes": 32,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "IDisposable",
        "Disposable",
        "patterns"
      ]
    },
    {
      "id": 191,
      "title": "F# googelsearch",
      "comment": "A google search automation.",
      "author": "Chief Inspector Clouseau",
      "link": "",
      "date": "2011-02-24T23:37:02.0600000",
      "likes": 25,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "google search",
        "webcrawling"
      ]
    },
    {
      "id": 192,
      "title": "A Lazy fixed-point combinator",
      "comment": "x = f(x)  encoded in F#",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-02-25T21:19:52.7170000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Lazy",
        "fixed-point combinator",
        "Haskell"
      ]
    },
    {
      "id": 193,
      "title": "Enumerator computation builder",
      "comment": "The snippet defines computation builder for working with IEnumerator. The bind operation (let!) reads next element from the enumerator, so the computation can be used for expressing things that cannot be written just using seq.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-02-27T00:48:18.3300000",
      "likes": 28,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "enumerator",
        "seq",
        "ienumerator",
        "computation builder"
      ]
    },
    {
      "id": 194,
      "title": "Wicked way to solve quadratic equation using list of operators",
      "comment": "This is to demonstrate that: (1) there are many ways to solve the same problems; (2) operators can be grouped together into data structures  and act as data; (3) you can have fun in F# in many ways.",
      "author": "Dmitry Soshnikov",
      "link": "http://www.soshnikov.com",
      "date": "2011-02-27T22:15:08.4000000",
      "likes": 56,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lists",
        "learning f#",
        "wicked"
      ]
    },
    {
      "id": 195,
      "title": "Primitive Pythagorean triples",
      "comment": "Primitive Pythagorean triples generator. It uses an Algorithm found on Wolfram MathWorld and the F# PowerPack matrix library. ",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2011-03-03T15:55:39.4530000",
      "likes": 45,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Mathematics",
        "euler problem",
        "powerpack",
        "Algorithms"
      ]
    },
    {
      "id": 196,
      "title": "Object oriented as it was supposed to be ?",
      "comment": "The snippet shows implementing object orientation using mail box processor. In this context object orientation have this simple definition: \"Objects acts on message passing\". \r\nThe objects created this way are thread safe too :). Not sure how much practical this would be in todays context where object oriented has gone the wrong way.",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-03-04T10:25:55.9330000",
      "likes": 25,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Object oriented",
        "message passing"
      ]
    },
    {
      "id": 197,
      "title": "Bar chart using chart controls",
      "comment": "The snippet shows how to use Microsoft Chart Controls (available in .NET 4.0 and for .NET 3.5) to draw a Bar chart. The sample shows population sizes in different continents.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-03-05T23:26:15.4630000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "charting",
        "chart controls"
      ]
    },
    {
      "id": 198,
      "title": "Doughnut chart using chart controls",
      "comment": "The snippet shows how to use Microsoft Chart Controls (available in .NET 4.0 and for .NET 3.5) to draw a Doughnut chart. The sample shows proportion of seats taken by parties in UK elections.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-03-05T23:28:26.1830000",
      "likes": 77,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "charting",
        "chart controls"
      ]
    },
    {
      "id": 199,
      "title": "Line chart using chart controls",
      "comment": "The snippet shows how to use Microsoft Chart Controls (available in .NET 4.0 and for .NET 3.5) to draw a Line chart. The sample generates a 2D spline calculated using sin and cos functions.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-03-05T23:30:35.1700000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "charting",
        "chart controls"
      ]
    },
    {
      "id": 200,
      "title": "Candlestick chart using chart controls",
      "comment": "The snippet shows how to use Microsoft Chart Controls (available in .NET 4.0 and for .NET 3.5) to draw a Candlestick chart visualizing stock prices. The sample uses price of MSFT stocks over 20 days.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-03-05T23:33:46.8430000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "charting",
        "chart controls"
      ]
    },
    {
      "id": 201,
      "title": "Boxplot diagram using chart controls",
      "comment": "The snippet shows how to use Microsoft Chart Controls (available in .NET 4.0 and for .NET 3.5) to draw a BoxPlot diagram. In this sample, we provide six statistics (Maxmimum, Minimum, Upper quartile, Lower quartile, Average and Median) about observations explicitly.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-03-05T23:35:39.2730000",
      "likes": 20,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "charting",
        "chart controls"
      ]
    },
    {
      "id": 202,
      "title": "Gaussian Random Sequence",
      "comment": "Normalized Random sequence generator conforming to the user supplied mean and sigma utilizing a \"seed factory\" instead of the default time of day.  The Gaussian sequence is based on the central limit theory, averages together the flat distribution from the random generator built into .NET.  Two examples of using normalRand are given to create infinite sequences of white and brown(ian) noise.",
      "author": "Tony Lee",
      "link": "",
      "date": "2011-03-05T23:48:48.8130000",
      "likes": 41,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Random",
        "Sequence"
      ]
    },
    {
      "id": 203,
      "title": "Split a list",
      "comment": "Three ways to split a list in half (but not necessarily in the middle).\r\n\r\nA forth version added that's very short and should be fast, as we only use List.fold.\r\n\r\nNew champ found.",
      "author": "Dmitri Pavlenkov",
      "link": "",
      "date": "2011-03-06T04:04:57.5830000",
      "likes": 69,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "list",
        "split",
        "recursion",
        "fold",
        "partition",
        "match"
      ]
    },
    {
      "id": 204,
      "title": "WPF Custom Control",
      "comment": "This snippet shows how to create a WPF custom control library in F#.",
      "author": "Fahad",
      "link": "http://fadsworld.wordpress.com/",
      "date": "2011-03-06T04:50:40.3730000",
      "likes": 40,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "F#",
        "WPF"
      ]
    },
    {
      "id": 205,
      "title": "Graham scal algorithm for finding the convex hull of a sequence of 2D points",
      "comment": "finds the points lying on the convex hull of the given set of points and \r\nreturns those points in clockwise direction, starting at the point\r\nwith minimum y-value \r\nRemarks: \r\nit's a more or less direct implementation of the algorithm named after Ronald Graham that is explained on http://en.wikipedia.org/wiki/Graham_scan\r\nyou can switch the definition Point for a proper type of your liking - e.g. System.Drawing.Point\r\n",
      "author": "Carsten König",
      "link": "",
      "date": "2011-03-06T17:18:57.3400000",
      "likes": 36,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "computational geometry",
        "convex hull",
        "Graham"
      ]
    },
    {
      "id": 206,
      "title": "WPF DepdencyProperty",
      "comment": "Declaring WPF DependencyProperty in F#",
      "author": "Fahad",
      "link": "",
      "date": "2011-03-07T05:52:21.6970000",
      "likes": 18,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WPF"
      ]
    },
    {
      "id": 207,
      "title": "Implementing active objects with a MailboxProcessor",
      "comment": "Mailbox processors can easily be used to implement active objects. This example shows how to do that with a reusable wrapper type and minimal boilerplate code in the actual class definitions. Supports both asynchronous calls and synchronous calls. For the latter case, exceptions are automatically propagated back to the caller.",
      "author": "Wolfgang Meyer",
      "link": "",
      "date": "2011-03-08T02:16:14.6200000",
      "likes": 83,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Asynchronous Programming",
        "Active Objects",
        "Concurrency"
      ]
    },
    {
      "id": 208,
      "title": "Byte literals",
      "comment": "Demonstrates an array initialized from byte literals, which use the 'uy' suffix, and an array initialized from a string byte array literal",
      "author": "Tim Robinson",
      "link": "",
      "date": "2011-03-09T12:07:31.5170000",
      "likes": 39,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "byte",
        "literal"
      ]
    },
    {
      "id": 209,
      "title": "Curry / Uncurry",
      "comment": "Helpers to convert functions that take a 2-tuple to curried functions and vice versa.\r\nVery helpfull for the \"Zip\"-functor together with operators - see example",
      "author": "Carsten König",
      "link": "",
      "date": "2011-03-10T11:58:43.1030000",
      "likes": 36,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "composition",
        "currying"
      ]
    },
    {
      "id": 210,
      "title": "ZipMap",
      "comment": "Helper function to fold an operator over two sequences\r\nso {x1; x2; x3; x4; ...} and {y1; y2; y3; y4; ..} is mapped with an operator f to {f x1 y1; f x2 y2; ...}\r\nSee example",
      "author": "Carsten König",
      "link": "",
      "date": "2011-03-10T12:18:59.5030000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "composition"
      ]
    },
    {
      "id": 211,
      "title": "QR-decomoposition of a square-matrix using the Gram-Schmidt method",
      "comment": "shows a simple implementation of a vector and matrix type together with a QR-decomposition using the Gram-Schmidt method.\r\n\r\nThe algorithms themselfes are rather easy but I think the implementation of the types and the computations using recursive techniques might be interessting",
      "author": "Carsten König",
      "link": "",
      "date": "2011-03-10T15:02:34.3470000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "QR-decomposition",
        "Gram-Schmidt",
        "linear algebra",
        "matrix",
        "vector"
      ]
    },
    {
      "id": 212,
      "title": "Simple asynchronous functions",
      "comment": "The snippet demonstrates how to compose simple asynchronous functions and how to use try .. with to handle exceptions in asynchronous workflows.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-03-11T12:51:40.0870000",
      "likes": 32,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "async",
        "asynchronous",
        "workflows",
        "try",
        "exception"
      ]
    },
    {
      "id": 213,
      "title": "Functional XML Construction and Query",
      "comment": "This snippet shows how to construct and query XML using XLinq without too many helper functions.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2011-03-11T15:09:51.4800000",
      "likes": 22,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "XML",
        "XLinq"
      ]
    },
    {
      "id": 214,
      "title": "Yahoo Historical Quote Implementation",
      "comment": "F# module to return historical EOD: open | high |low | close | volume quotes from Yahoo.  Single day requests only. DataContract provided on the result record for easy serialization.",
      "author": "akaPhenom",
      "link": "",
      "date": "2011-03-11T17:14:45.2770000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Histocical Stock Quote",
        "Finance",
        "Web"
      ]
    },
    {
      "id": 215,
      "title": "TCP/IP Proxy",
      "comment": "A minimal TCP/IP proxy implementation with F# asynchronous workflows",
      "author": "Ademar Gonzalez",
      "link": "http://ademar.name",
      "date": "2011-03-11T18:08:22.7730000",
      "likes": 24,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "tcp-ip",
        "networking",
        "async"
      ]
    },
    {
      "id": 216,
      "title": "Chronological sequence window beginnings",
      "comment": "An abstraction of the following use case:\r\n\r\nGiven a sequence of dates and max temperatures for each date, extract out the initial dates on which the temp is greater than a given threshold for n consecutive days.\r\n\r\n(Originally posted as an answer to this StackOverflow question: http://stackoverflow.com/questions/5267055 )",
      "author": "ildjarn",
      "link": "",
      "date": "2011-03-11T21:50:51.3130000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "sequence",
        "window",
        "fold"
      ]
    },
    {
      "id": 217,
      "title": "Monadic Memoization",
      "comment": "Modular memoization within a pure functional setting that is implemented as a convenient computation builder.",
      "author": "Nick Palladinos",
      "link": "http://www.cs.utexas.edu/~wcook/Drafts/2006/MemoMixins.pdf",
      "date": "2011-03-12T11:10:33.9830000",
      "likes": 79,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Monads",
        "Memoization"
      ]
    },
    {
      "id": 218,
      "title": "Lexer",
      "comment": "Hand-written efficient JavaScript lexer from the IronJS project https://github.com/fholm/IronJS",
      "author": "fholm",
      "link": "",
      "date": "2011-03-12T16:23:08.6330000",
      "likes": 26,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "lexer",
        "javascript"
      ]
    },
    {
      "id": 219,
      "title": "Asserting Series Convergence: Ramanujan's 1/pi formula",
      "comment": "Asserting a series convergence using high order functions taking for example the 1/pi formula by Ramanujan.\r\nPlay with the parameters to see where the numeric data types limits makes the function to return false.",
      "author": "Horacio Nuñez",
      "link": "http://merthin.com",
      "date": "2011-03-13T10:44:38.7300000",
      "likes": 23,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "ramanujan series"
      ]
    },
    {
      "id": 220,
      "title": "Dumping record type sequence to file",
      "comment": "Easy dump of record type sequence to file",
      "author": "Chief Inspector Clouseau",
      "link": "",
      "date": "2011-03-14T12:19:04.3100000",
      "likes": 23,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Data",
        "File Writing"
      ]
    },
    {
      "id": 221,
      "title": "Member constraints on records",
      "comment": "Demonstrates explicit member syntax as applied to record fields",
      "author": "Tim Robinson",
      "link": "",
      "date": "2011-03-14T20:56:33.2470000",
      "likes": 26,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "generic",
        "record"
      ]
    },
    {
      "id": 222,
      "title": "Compiler Regression in VS2010-SP1",
      "comment": "Compiler regression in VS2010-SP1 ?",
      "author": "fholm",
      "link": "",
      "date": "2011-03-16T14:05:28.8500000",
      "likes": 28,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "compiler",
        "regression",
        "vs2010"
      ]
    },
    {
      "id": 223,
      "title": "annuity",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-03-16T15:02:41.6600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 224,
      "title": "Restartable File.ReadLines",
      "comment": ".Net 4.0 added File.ReadLines to view a file as a sequence, but the sequence can only be read once.  A simple wrapper with seq{yield!} fixes that.",
      "author": "Tony Lee",
      "link": "",
      "date": "2011-03-18T22:49:26.0700000",
      "likes": 40,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "File",
        "Seq"
      ]
    },
    {
      "id": 225,
      "title": "MD5 hash",
      "comment": "A function that computes an MD5 hash from a block of bytes. MD5 isn't cryptographically secure, but it's a handy way of condensing a block of data into a short string.",
      "author": "Tim Robinson",
      "link": "",
      "date": "2011-03-19T19:46:34.9930000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "md5",
        "hashing"
      ]
    },
    {
      "id": 226,
      "title": "Pretty Print Source Code Errors",
      "comment": "A snippet that allows you to pretty print source code errors",
      "author": "fholm",
      "link": "",
      "date": "2011-03-21T21:22:00.7470000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "prettyprint",
        "source",
        "print",
        "error"
      ]
    },
    {
      "id": 227,
      "title": "sum the nodes in a (not-binary) tree using continuations",
      "comment": "you can easily find how to use continuations to iterate over a binary tree but what if the count of children for each node is not known at design time?\r\nIt's not so obvious how to do this in order to get a tail-recursive method.\r\nThis short snippet shows how to do this to sum the values of every leaf.\r\nThe second part demonstrates a general approach for other operations than addition.",
      "author": "Carsten König",
      "link": "",
      "date": "2011-03-22T08:59:14.7130000",
      "likes": 24,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Tail recursion",
        "continuations",
        "tree"
      ]
    },
    {
      "id": 228,
      "title": "Testing inserting new snippet",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-03-24T01:26:05.4000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 229,
      "title": "List Comprehensions with float iterator",
      "comment": "Is it a bug or a feature? :)",
      "author": "Oldrich Svec",
      "link": "http://stackoverflow.com/questions/5429501/list-comprehensions-with-float-iterator-in-f",
      "date": "2011-03-25T07:05:53.4770000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "List Comprehensions"
      ]
    },
    {
      "id": 230,
      "title": "Black Scholes Option Pricing",
      "comment": "The code shows simple implementation of blackscholes algorithm.",
      "author": "Kishor Aher",
      "link": "http://kishordaher.wordpress.com",
      "date": "2011-03-26T01:28:11.3370000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Finance"
      ]
    },
    {
      "id": 231,
      "title": "Historical Volatility  ",
      "comment": "The code snippet is capable of calculating historical volatility using Close Price, High Low Price and Close High Low Price methods. Simply provide symbol, start date and end date of the specific volatility method and it extracts the market data from the yahoo service and calculated the volatility.  ",
      "author": "Kishor Aher",
      "link": "http://kishordaher.wordpress.com",
      "date": "2011-03-26T01:34:21.2830000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Finance",
        "Historical Volatility",
        "Volatility",
        "High Low Volatility",
        "Close Price Volatility"
      ]
    },
    {
      "id": 232,
      "title": "Web Crawler",
      "comment": "This snippet features an F# Web crawler that i'm already using in 2 applications (slightly modified). It's based on a scalable network of communicating agents that follow URLs extracted from HTML pages until reaching the specified limit.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2011-03-26T07:11:55.8330000",
      "likes": 21,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Web",
        "Crawler",
        "Agent",
        "MailboxProcessor",
        "Regex",
        "HTML"
      ]
    },
    {
      "id": 233,
      "title": "Hello",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-03-28T10:40:41.6630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 234,
      "title": "Type-a-head search tree for strings",
      "comment": "This is a search tree for strings I've built for work to back fast type-a-head for AJAX forms, it could be made million times more space efficient but there was no real need for it so.",
      "author": "fholm",
      "link": "",
      "date": "2011-03-28T13:45:54.2270000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "type-a-head",
        "tree",
        "searchtree",
        "string"
      ]
    },
    {
      "id": 235,
      "title": "LiteMedia_Example1_BasicSyntax",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-03-29T16:47:36.2600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 236,
      "title": "Hosting the DLR with IronPython or Ruby",
      "comment": "Definition of the dynamic resolution operators for hosting the DLR. You can either use Ruby or Python, as the module isn't language specific. ",
      "author": "Rainer Schuster",
      "link": "http://dotnet-forum.de/blogs/rainerschuster/",
      "date": "2011-03-31T14:26:16.1470000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "DLR",
        "IronPython",
        "IronRuby",
        "dynamic"
      ]
    },
    {
      "id": 237,
      "title": "One-Way File Synchronization",
      "comment": "Implements one-way file synchronization, also called mirroring, between two folders.",
      "author": "Ademar Gonzalez",
      "link": "http://ademar.name",
      "date": "2011-03-31T20:45:16.8900000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "test"
      ]
    },
    {
      "id": 238,
      "title": "Unit List",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-04-01T16:29:12.0170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 239,
      "title": "Manage Variable Length Dictionary Entries",
      "comment": "Populate and displaythe contents of a dictionary with a variable number of nested records - useful if you want to store and retrieve an arbitrary set of data from a database or other data source",
      "author": "Brendan Campbell",
      "link": "http://theludditegeek.com",
      "date": "2011-04-02T06:06:15.6330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Dictionary",
        "nested",
        "data"
      ]
    },
    {
      "id": 240,
      "title": "Functor => Applicative => Monad",
      "comment": "Yet another attempt of mine to \"haskellify\" my F# coding.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-04-04T09:44:31.8830000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Functors",
        "Applicative Functors",
        "Monads"
      ]
    },
    {
      "id": 241,
      "title": "CSV reader",
      "comment": "I've modified the CSV sample from Expert F# to my needs. I don't wann be forced to use the csv schema as defined by column rows. Therefore I've done two major modifications.\r\n\r\n1. remove the permutation\r\n2. added a new column name option to the ColumnAttribute\r\n3. added a name to csv index mapping\r\n\r\nSo basically you now have 3 options.\r\n1. Don't annotate your record at all and use it as POCO. The order of the record fields is mapped directly to the order in the csv. UPDATE: I don't recommend this any more. As of the writing of this snippet I wasn't aware of the fact, that field order isn't guaranted by the reflection mechanism.\r\n2. Use the index option of the ColumnAttribute. Same as before. \r\n3. Use the name option. This is what I've looked for. I've to deal with tons of csv that has more columns I'm interested in. Have a look at the sample usage below.\r\n\r\nI've moved the type conversion out of the CsvReader class in order to be easyly expandable with custom type conversation (i.e. for combined column values - denormalized data)\r\n",
      "author": "Rainer Schuster",
      "link": "http://dotnet-forum.de/blogs/rainerschuster/",
      "date": "2011-04-04T18:31:10.4230000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "CSV",
        "deserialize",
        "reader"
      ]
    },
    {
      "id": 242,
      "title": "CSV writer",
      "comment": "A simple CSV writer implementation as two type extensions for the Seq module. Use it with Records, Classes and Tuples. Have a look at the modified CSV reader sample from Don Symes Expert F# too http://fssnip.net/3T in order to advance this snippet using the ColumnAttribute\r\n\r\n",
      "author": "Rainer Schuster",
      "link": "http://dotnet-forum.de/blogs/rainerschuster/",
      "date": "2011-04-04T19:13:10.3930000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "CSV",
        "serialize",
        "writer"
      ]
    },
    {
      "id": 243,
      "title": "IRC Jokes",
      "comment": "Simple snippet that demonstrates recursively defined discriminated unions, the Y combinator (for encoding recursive functions) and recursive processing of tree-like structures",
      "author": "Daniel Jackson",
      "link": "http://blog.thinkhard.net",
      "date": "2011-04-04T21:03:05.3100000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Recursion",
        "y-combinator",
        "discriminated unions"
      ]
    },
    {
      "id": 244,
      "title": "Evaluation Strategies",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-04-06T22:31:16.5030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 245,
      "title": "Prime Numbers",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-04-07T12:09:16.0100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 246,
      "title": "Nullable Refs without using AllowNullLiteral",
      "comment": "Nullable Refs without using AllowNullLiteral",
      "author": "fholm",
      "link": "",
      "date": "2011-04-08T09:22:21.4300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "nullable"
      ]
    },
    {
      "id": 247,
      "title": "How to write a financial contract",
      "comment": "Implements the theory from 'How to write a financial contract' by S.L Peyton Jones and J-M Eber",
      "author": "Ademar Gonzalez",
      "link": "http://ademar.name",
      "date": "2011-04-09T14:42:55.6070000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "combinators",
        "finance",
        "contracts",
        "math"
      ]
    },
    {
      "id": 248,
      "title": "Imperative computation builder",
      "comment": "Defines an F# computation builder for encoding imperative computations. The 'return' construct returns immediately and terminates the rest of the computation. It is also possible to return value from a 'for' or 'while' loop.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-04-09T14:59:44.4270000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "imperative",
        "computation builder",
        "return",
        "break"
      ]
    },
    {
      "id": 249,
      "title": "Binary Literals",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-04-11T01:03:55.2830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 250,
      "title": "Immunity",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-04-11T21:42:06.2030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 251,
      "title": "Resource cleanup event combinator",
      "comment": "Declares an event combinator 'Event.using' that automatically releases resources allocated by a previous event occurence. Each event occurence creates a value using a function specified by the user and automatically calls 'Dispose' when generating a new value.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-04-11T23:23:07.5000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "disposable",
        "IDisposable",
        "events",
        "reactive",
        "event"
      ]
    },
    {
      "id": 252,
      "title": "FSharpChart Extensions",
      "comment": "Charting API for F# (version 0.2)",
      "author": "",
      "link": "",
      "date": "2011-04-12T20:37:42.3430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "fsharpchart"
      ]
    },
    {
      "id": 253,
      "title": "Nullable to Option",
      "comment": "it's allways a pain to work with F#'s Option values outside of F# - there you've got the Nullable-class\r\nthis is a short snippet to convert Nullable<'a> to 'a option",
      "author": "Carsten König",
      "link": "",
      "date": "2011-04-15T09:47:06.7730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Nullable",
        "Option"
      ]
    },
    {
      "id": 254,
      "title": "Use of Partial-Case with Parameters",
      "comment": "Depicts use of one kind of active pattern matching; partial-case with parameters.  ",
      "author": "Joel Huang",
      "link": "",
      "date": "2011-04-18T14:04:14.0070000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "active pattern"
      ]
    },
    {
      "id": 255,
      "title": "Awful Space adding code",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-04-18T21:35:52.3530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 256,
      "title": "Combinatorial functions",
      "comment": "Here is my F# take on some combinatorial functions from the book \"Introduction to Functional Programming\" by Richard Bird and Philip Wadler.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2011-04-19T03:24:44.7130000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "Combinatorial functions",
        "mathematics",
        "recursion",
        "Permutations",
        "Combinatorial"
      ]
    },
    {
      "id": 257,
      "title": "Solution to the problem mentioned at : http://professor-fish.blogspot.com/2011/01/tiny-bit-of-denotational-semantics.html",
      "comment": "Solution to the problem mentioned at : http://professor-fish.blogspot.com/2011/01/tiny-bit-of-denotational-semantics.html",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-04-19T04:15:28.8530000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "denotational semantics",
        "Expression evaluation"
      ]
    },
    {
      "id": 258,
      "title": "calculating the distance on earth (with units of measure)",
      "comment": "calculating the distance between two locations on earth using haversine formula\r\nsee http://en.wikipedia.org/wiki/Haversine_formula\r\nand implementing it using the posibilities of F#'s unit of measure system to avoid unit-conversion-errors concerning radians\r\n\r\nconvertet the code found here: http://www.movable-type.co.uk/scripts/latlong.html for an concrete implementation",
      "author": "Carsten König",
      "link": "",
      "date": "2011-04-19T06:02:50.6130000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Geocomputing; Haversine formula"
      ]
    },
    {
      "id": 259,
      "title": "Powerset",
      "comment": "Powerset of set represented as a list. Does not check for repeated elements",
      "author": "Andrew Le Couteur Bisson",
      "link": "",
      "date": "2011-04-19T14:39:27.1670000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "powerset list"
      ]
    },
    {
      "id": 260,
      "title": "ML style module example",
      "comment": "ML style module example",
      "author": "fholm",
      "link": "",
      "date": "2011-04-20T08:36:44.8730000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "ml"
      ]
    },
    {
      "id": 261,
      "title": "Wrapped Class/Interface",
      "comment": "Wrapped Class/Interface\r\n\r\nRemark: better this way - see example",
      "author": "fholm",
      "link": "",
      "date": "2011-04-20T08:58:12.6400000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "wrapper"
      ]
    },
    {
      "id": 262,
      "title": "Rope",
      "comment": "Simple implementation of the rope data structure, http://en.wikipedia.org/wiki/Rope_(computer_science) ",
      "author": "fholm",
      "link": "",
      "date": "2011-04-20T12:26:33.6470000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "rope",
        "string",
        "concat"
      ]
    },
    {
      "id": 263,
      "title": "Typed access to IEnumerable",
      "comment": "This snippet provides a way to gain typed access to System.Collection.IEnumerable values (such as instances of System.Text.RegularExpression.MatchCollection), as long as they support a Count property and an Item accessor.",
      "author": "kvb",
      "link": "http://stackoverflow.com/users/82959/kvb",
      "date": "2011-04-20T14:29:08.1600000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences"
      ]
    },
    {
      "id": 264,
      "title": "Pipelining example",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-04-21T13:39:51.0000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 265,
      "title": "Fholm",
      "comment": "Fast Concatenated String",
      "author": "fholm",
      "link": "",
      "date": "2011-04-23T12:10:42.2330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "string",
        "concat"
      ]
    },
    {
      "id": 266,
      "title": "Efficient Immutable String Concat",
      "comment": "Efficient Immutable String Concat",
      "author": "fholm",
      "link": "",
      "date": "2011-04-23T21:16:13.7070000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "string",
        "concat",
        "fast"
      ]
    },
    {
      "id": 267,
      "title": "Simple Redis F# Client Test",
      "comment": "Simple Redis F# Client Test\r\n(Async version will stop respond when data are too large. Don't know how to solve yet.)",
      "author": "Richard Chang",
      "link": "",
      "date": "2011-04-25T01:46:50.9170000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Socket",
        "Redis"
      ]
    },
    {
      "id": 268,
      "title": "Lazy String",
      "comment": "Lazy string based on seq<char>",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-04-25T05:44:02.3670000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Lazy",
        "Sequences"
      ]
    },
    {
      "id": 269,
      "title": "store yahoo quotes in kdb",
      "comment": "\r\nThis snippet will download the constituents from ftse, stoxx50e,dji,hsi,gspc and store quotes beginning from 1981 into kdb. To get this to work you need to download kpnet from http://kpnet.codeplex.com/ and kdb.\r\n\r\n",
      "author": "Kim Tang",
      "link": "",
      "date": "2011-04-25T11:56:08.4700000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "yahoo quotes",
        "kdb",
        ""
      ]
    },
    {
      "id": 270,
      "title": "Actors acting as Lambdas",
      "comment": "The Untyped Lambda Calculus  encoded as actors (F#'s MailboxProcessors)",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-04-25T16:10:08.6130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Actors",
        "Lambda Calculus",
        "MailboxProcessor"
      ]
    },
    {
      "id": 271,
      "title": "Factorial using Int64, Double and BigInteger",
      "comment": "Recursive Factorial using Int64, Double and BigInteger with execution time.",
      "author": "Carlos Quintanilla",
      "link": "http://carlosqt.blogspot.com/",
      "date": "2011-04-25T20:00:49.1830000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Recursion",
        "Factorial",
        "bigint",
        "Timer"
      ]
    },
    {
      "id": 272,
      "title": "High precedence, right associative backward pipe",
      "comment": "High precedence, right associative backward pipe",
      "author": "Stephen Swensen",
      "link": "http://stackoverflow.com/questions/5443805/why-use-a-backward-pipe-operator-instead-of-function-chaining",
      "date": "2011-04-26T20:35:59.7630000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "operator"
      ]
    },
    {
      "id": 273,
      "title": "A failed attempt at evaluating sequence items in terms of a try-with block",
      "comment": "A broken code example demonstrating how it's you can't catch a single throwing enumeration and continue with F#'s IEnumerable.",
      "author": "Rick Minerich",
      "link": "http://richardminerich.com",
      "date": "2011-04-26T23:37:41.4300000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "Seq",
        "Sequences",
        "Collections",
        "Error Handling"
      ]
    },
    {
      "id": 274,
      "title": "Partition a sequence into groups linearly by predicate",
      "comment": "Partitions a sequence into groups linearly by predicate.   I use this for breaking up my lazy record parsing with sequences into entity-sized chunks which are then easily digestible.\r\n\r\nNote: Edited back from the previous edit as these were heavily profiled and yield! tends to be slow. \r\nEdit #2: Now correctly using \"use\" instead of \"let\" for sequence.GetEnumerator () (Thanks Vladimir Matveev)",
      "author": "Rick Minerich",
      "link": "http://richardminerich.com",
      "date": "2011-04-27T00:10:38.0030000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "Seq",
        "Sequences",
        "Collections",
        "Grouping"
      ]
    },
    {
      "id": 275,
      "title": "Fun with polynoms and inline",
      "comment": "for all those wanting to see the (rather unknown) statical interference of type-parameters (in contrast to generic type parameters) in action.\r\nI demonstrated this by having som e fun with basic algebra and polynoms",
      "author": "Carsten König",
      "link": "",
      "date": "2011-04-27T07:10:09.5830000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "inline",
        "Polynom",
        "statical resolved type parameters"
      ]
    },
    {
      "id": 276,
      "title": "palindromes",
      "comment": "Find every substring that is a palindrome.  A bit lazier than the original.",
      "author": "Kevin Cantu",
      "link": "http://kevincantu.org",
      "date": "2011-04-27T07:57:35.1000000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "F#",
        "palindromes"
      ]
    },
    {
      "id": 277,
      "title": "Permutations",
      "comment": "computes the list of all permutations of a list\r\nfor example the permutations of [1;2;3] will be [1;2;3]; [1;3;2]; [2;1;3]; [2;3;1]; [3;1;2]; [3;2;1]",
      "author": "Carsten König",
      "link": "",
      "date": "2011-04-27T10:02:53.7230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Permutation",
        "list"
      ]
    },
    {
      "id": 278,
      "title": "Very Fast Permutations",
      "comment": "I spent  a lot of time this week profiling different permutation functions from various places on the internet.  The following was by far the fastest:\r\n\r\n",
      "author": "Rick Minerich",
      "link": "http://richardminerich.com",
      "date": "2011-04-27T15:39:39.8170000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "List",
        "Seq",
        "Sequences",
        "Collections",
        "Permutations",
        "Combinatorial"
      ]
    },
    {
      "id": 279,
      "title": "Spreadsheet",
      "comment": "Spreadsheet script runnable inside http://tryfsharp.org includes a custom DataGrid and a parser for simple formulas e.g.:\r\n=1+1\r\n=SUM(A1,A2)\r\nAdd your own functions to the evaluate function.\r\nFor a more comprehensive implementation check out http://cellz.codeplex.com",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-04-27T18:41:36.2370000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Spreadsheet",
        "Silverlight",
        "Parser",
        "DataGrid"
      ]
    },
    {
      "id": 280,
      "title": "Undoable Commands",
      "comment": "A simple implementation of an Undoable Command, with a Document to hold a stack of actions. \r\n\r\n2 examples of UndoableCommand are given - 1 allows property changes to be remembered, and another which allows the user to execute an action with a corresponding undo. \r\n\r\nFurther examples could include CompositeUndoableCommands where the command is itself a list of commands.",
      "author": "Neil Danson",
      "link": "",
      "date": "2011-04-28T20:06:27.2430000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Commands"
      ]
    },
    {
      "id": 281,
      "title": "Tree using sequences",
      "comment": "Tree implementation using sequences.",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-04-29T11:21:46.7170000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequence",
        "Tree"
      ]
    },
    {
      "id": 282,
      "title": "Seq.filter with accumulator ",
      "comment": "Seq.filter with accumulator, without using mutable or ref.",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-04-30T06:21:49.0500000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences"
      ]
    },
    {
      "id": 283,
      "title": "Asynchronous Controller Helper",
      "comment": "The snippet declares a helper for creating asynchronous controllers for ASP.NET MVC 3. It declares a new base class for asynchronous actions that exposes a computation builder for writing actions using F# asynchronous workflows.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-05-03T02:55:19.7300000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "asynchronous workflows",
        "asp.net",
        "web",
        "mvc"
      ]
    },
    {
      "id": 284,
      "title": "exec with redirected io as sequences",
      "comment": "Since F# is my new scripting language, I needed something like Perl's exec but with sequences for Std In and Out.",
      "author": "Tony Lee",
      "link": "",
      "date": "2011-05-03T19:26:33.8970000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequence",
        "scripting"
      ]
    },
    {
      "id": 285,
      "title": "Async SNTP client",
      "comment": "An asynchronous SNTP client that can retrieve the current time from an internet time server (such as time-a.nist.gov) and optionally update the local system clock to match. Demonstrates async UDP communication, bit-shifting, and native interop/PInvoke.",
      "author": "Joel Mueller",
      "link": "",
      "date": "2011-05-03T19:48:27.2000000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "async",
        "UDP",
        "SNTP",
        "interop",
        "pinvoke",
        "networking"
      ]
    },
    {
      "id": 286,
      "title": "Python's sorted function",
      "comment": "This is an attempt to produce similar behavior as seen in the sorted( ) function in Python.\r\nSupporting only one of the three optional arguments.\r\nThe key - Specifies a function of one argument that is used to extract a comparison key from each list element",
      "author": "Cameron Frederick",
      "link": "",
      "date": "2011-05-05T17:16:11.5200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Sorting",
        "Sorted",
        "List"
      ]
    },
    {
      "id": 287,
      "title": "The repmin problem",
      "comment": "The repmin problem is to replace all elements of a tree of numbers by the minimum element, making only a single pass over the original tree. Repmin is a very ingenious example of Circular Programming.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-05-06T12:27:26.9530000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Circular Programming",
        "Repmin",
        "Lazy"
      ]
    },
    {
      "id": 288,
      "title": "The AV Voting System",
      "comment": "The AV Voting System implementation presented at F#unctional Londoners 05/05/2011.",
      "author": "",
      "link": "",
      "date": "2011-05-06T18:12:56.4500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "voting",
        "av"
      ]
    },
    {
      "id": 289,
      "title": "Red-Black-Trees with insert",
      "comment": "Found an very good article on RS-Trees in Haskell (see: http://www.eecs.usma.edu/webs/people/okasaki/jfp99.ps)\r\n\r\nIt heavyly uses pattern recognition to translate those pesky balance-rules into short code.\r\n\r\nBellowe is the simple rewrite of the haskell-implementation in F# - enjoy",
      "author": "Carsten König",
      "link": "http://www.eecs.usma.edu/webs/people/okasaki/jfp99.ps",
      "date": "2011-05-09T08:17:27.4930000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Red Black Trees",
        "pattern matching",
        "trees"
      ]
    },
    {
      "id": 290,
      "title": ".NET Interop",
      "comment": "Facilities for interop with languages supporting null.",
      "author": "Daniel Robinson",
      "link": "",
      "date": "2011-05-09T19:11:30.9800000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "interop",
        "null handling"
      ]
    },
    {
      "id": 291,
      "title": "General power function with units",
      "comment": "The snippet demonstrates how to write a general power function that has correct type involving units-of-measure. The function uses numbers represented using types. The snippet is mainly an example of what can be done (not recommended for the real world).",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-05-11T12:56:50.2630000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "fsharp",
        "types",
        "units",
        "units of measure"
      ]
    },
    {
      "id": 292,
      "title": "sscanf - parsing with format strings",
      "comment": "A more complete version of sscanf, as proposed on stackoverflow by kvb:  http://stackoverflow.com/questions/2415705/read-from-console-in-f\r\n\r\nFixed bug in previous version to work with visual studio '13 ",
      "author": "Wolfgang Meyer",
      "link": "",
      "date": "2011-05-11T22:58:39.8030000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "sscanf",
        "scanf",
        "parsing",
        "printf"
      ]
    },
    {
      "id": 293,
      "title": "Type based Regex Active Patterns",
      "comment": "Regex match via Active Patterns with Type based value extraction. ",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-05-12T16:45:13.9770000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Regex",
        "Active Patterns"
      ]
    },
    {
      "id": 294,
      "title": "Seq.partition",
      "comment": "A partition function on sequences, like List.partition and Array.partition, but yields elements in either partition on demand. Suitable as an extension to Seq.",
      "author": "Stephen Swensen",
      "link": "http://stackoverflow.com/users/236255/stephen-swensen",
      "date": "2011-05-13T05:05:28.4400000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Seq"
      ]
    },
    {
      "id": 295,
      "title": "Computation Builder for Cartesian Products",
      "comment": "Sample framework for computing Cartesian products using a computation builder.",
      "author": "TechNeilogy",
      "link": "http://techneilogy.blogspot.com/",
      "date": "2011-05-14T23:33:33.4130000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "computation builder",
        "cartesian"
      ]
    },
    {
      "id": 296,
      "title": "Abstraction of the \"tail-recursive loop\" pattern",
      "comment": "A novel, due to performance inadequacy, abstraction of the \"tail-recursive loop\" pattern. Approaching what a built-in language feature might look like.",
      "author": "Stephen Swensen",
      "link": "http://stackoverflow.com/users/236255/stephen-swensen",
      "date": "2011-05-16T18:33:53.4730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "F#",
        "Recursion"
      ]
    },
    {
      "id": 297,
      "title": "\"use\"able temporary file",
      "comment": "A simple shortcut for creating temporary files for unit tests.",
      "author": "Benjol",
      "link": "http://stackoverflow.com/users/11410/benjol",
      "date": "2011-05-17T04:37:23.1000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "unittests"
      ]
    },
    {
      "id": 298,
      "title": "Timestamp with timezone (YYYYMMDDhhmmssffff+zzzz)",
      "comment": "Timestamp:\r\nTime format in ISO 8601 with timezone.\r\nYYYYMMDDhhmmssffff+zzzz\r\n\r\nFor example 2011-05-17 19:01:10.000 -0200 would be: 20110517190110000-0200\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.meetup.com/FSharpHelsinki/",
      "date": "2011-05-17T15:43:48.1430000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "datetime",
        "timestamp"
      ]
    },
    {
      "id": 299,
      "title": "SHA512 hash code from a string",
      "comment": "Generates SHA512 hash code from a string. \r\nUsually used in some kind of validity checks, e.g. check first timestamp and then check SHA-hash over id and timestamp to ensure a valid session.\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.meetup.com/FSharpHelsinki/",
      "date": "2011-05-17T16:25:30.5100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "SHA",
        "hashing"
      ]
    },
    {
      "id": 300,
      "title": "F# Quotations with INotifyPropertyChanged",
      "comment": "ViewModelBase for F# users who want to use it in WPF / Silverlight",
      "author": "Fahad",
      "link": "",
      "date": "2011-05-18T07:21:08.2300000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F#",
        "WPF",
        "Silverlight"
      ]
    },
    {
      "id": 301,
      "title": "WebSharper Hello World",
      "comment": "This sample implements \"Hello, world!\" as a WebSharper application. It demonstrates how to compose HTML/XML using combinators, how to dynamically create a button with a handler and how to update an existing DOM element.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-05-19T23:24:07.7430000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "web",
        "websharper",
        "dom",
        "html"
      ]
    },
    {
      "id": 302,
      "title": "Moving Average",
      "comment": "Given a period and a sequence of values, calculates the moving average of the input.  E.g., given a period of 4 and a sequence of { 2.0, 8.0, 12.0, 10.0, 6.0, 4.0, 14.0 }, the result of this function is { 8.0, 9.0, 8.0, 8.5  }.",
      "author": "Brett V. Forsgren",
      "link": "",
      "date": "2011-05-19T23:38:11.6670000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequences",
        "average"
      ]
    },
    {
      "id": 303,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-05-20T01:13:49.2630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 304,
      "title": "Ref Example",
      "comment": "Deferencing the ref FinalAnswer inside a let produces different results than using !FinalAnswer directly.  Why?",
      "author": "",
      "link": "",
      "date": "2011-05-20T10:48:57.4370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "ref"
      ]
    },
    {
      "id": 305,
      "title": "Check if value is a valid enum or flags combination",
      "comment": "-",
      "author": "Daniel Robinson",
      "link": "",
      "date": "2011-05-20T20:15:18.1570000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "enumeration",
        "enum"
      ]
    },
    {
      "id": 306,
      "title": "Calculator",
      "comment": "Simple Silverlight Calculator UI interactive sample runnable inside http://tryfsharp.org.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog/post/Silverlight-4-Calculator-Sample-in-F.aspx",
      "date": "2011-05-21T08:56:32.9600000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Silverlight"
      ]
    },
    {
      "id": 307,
      "title": "Calculator",
      "comment": "Simple Silverlight Calculator UI interactive sample runnable inside http://tryfsharp.org.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog/post/Silverlight-4-Calculator-Sample-in-F.aspx",
      "date": "2011-05-21T08:56:51.0900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Silverlight"
      ]
    },
    {
      "id": 308,
      "title": "Formula Calculator",
      "comment": "Simple formula calculator including dynamic unit of measure support. Run as a script in Try F#, and try formula with units like 3m * 3m.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog/post/Runtime-Units-of-Measure-for-F.aspx",
      "date": "2011-05-21T22:50:20.0230000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Silverlight"
      ]
    },
    {
      "id": 309,
      "title": "Structural BeginUpdate / EndUpdate with Lambda",
      "comment": "Several WinForms controls, like TreeView and ListView, implement methods BeginUpdate and EndUpdate, which suspend repainting of the control while items are being individually added to a control, preventing flicker caused by rapid repainting.\r\n\r\nBut using BeginUpdate and EndUpdate is very imperative, and opens up the possibility for bugs, such as neglecting to call the matching EndUpdate. An obvious improvement would be to create an extension method on types implementing this pattern which takes a unit -> unit lambda which is executed between update pairs. \r\n\r\nBut the pattern is only conventional, rather than through a common base class or interface. Hence this presents a reasonable opportunity to use F#'s statically resolved structural type system to implement a function which only works on Control types with the correct structural signature.",
      "author": "Stephen Swensen",
      "link": "http://stackoverflow.com/users/236255/stephen-swensen",
      "date": "2011-05-22T12:27:17.4200000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "F#",
        "Winforms"
      ]
    },
    {
      "id": 310,
      "title": "Seq.triplewise",
      "comment": "Triple version of Seq.pairwise.",
      "author": "ptan",
      "link": "",
      "date": "2011-05-23T16:02:48.2930000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequences",
        "seq"
      ]
    },
    {
      "id": 311,
      "title": "Select n elements in group from seq ",
      "comment": "Select n elements in group from seq ",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-05-23T16:04:35.7000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Sequence"
      ]
    },
    {
      "id": 312,
      "title": "Create  Open XML Word document",
      "comment": "Create  Open XML Word document using the open XML SDK",
      "author": "",
      "link": "",
      "date": "2011-05-24T09:43:33.9670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Open XML"
      ]
    },
    {
      "id": 313,
      "title": "Create Open XML Word document",
      "comment": "Create Open XML Word document using the open XML SDK",
      "author": "Piet Amersfoort",
      "link": "psaccelerator.nl",
      "date": "2011-05-24T09:59:26.9070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Open XML",
        "Word"
      ]
    },
    {
      "id": 314,
      "title": "Create Open XML Spreadsheet",
      "comment": "Create Open XML Spreadsheet using the open XML SDK",
      "author": "Piet Amersfoort",
      "link": "http://psaccelerator.nl/",
      "date": "2011-05-25T08:33:10.6630000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Open XML",
        "Spreadsheet"
      ]
    },
    {
      "id": 315,
      "title": "Alternative Conditional Printfn",
      "comment": "A different approach to conditional debug functions",
      "author": "David Klein",
      "link": "",
      "date": "2011-05-25T23:05:47.5070000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "debug"
      ]
    },
    {
      "id": 316,
      "title": "async",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-05-26T09:00:54.0670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 317,
      "title": "quest",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-05-26T09:04:53.4830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 318,
      "title": "quest",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-05-26T09:05:32.6300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 319,
      "title": "questflow prototype",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-05-26T09:14:08.2030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 320,
      "title": "quest",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-05-26T10:40:24.8600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 321,
      "title": "quest",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-05-26T11:28:07.8300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 322,
      "title": "quest",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-05-26T13:44:33.5030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 323,
      "title": "Incremental (Functional) QuickSort",
      "comment": "Functional quicksort inspired by the Haskell Quick Sort at http://www.haskell.org/haskellwiki/Introduction.  Since F# lists aren't lazy, uses sequences instead of lists to be haskell like.  Roughly O(n) if you Seq.take 1, full on QS if you enumerate the whole thing. ",
      "author": "Tony Lee",
      "link": "",
      "date": "2011-05-27T01:44:16.7330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "sequence",
        "sorting"
      ]
    },
    {
      "id": 324,
      "title": "A fun-ny WPF DataTemplate DSL",
      "comment": "Parts of a little DSL to create WPF DataTemplate's in F#. Don't even want to think about the length of a corresponding C#. The F# code corresponds 1-to-1 to the visual tree constructed for the template.",
      "author": "Cetin Sert",
      "link": "corsis.sf.net",
      "date": "2011-05-27T05:38:01.2030000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "wpf",
        "datatemplate",
        "dsl"
      ]
    },
    {
      "id": 325,
      "title": "Async File Crawl",
      "comment": "Async File Crawl",
      "author": "fholm",
      "link": "",
      "date": "2011-05-29T20:25:26.2870000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 7,
      "tags": [
        "async",
        "file"
      ]
    },
    {
      "id": 326,
      "title": "Miss Grant's Controller",
      "comment": "State machine example, from Martin Fowler's Domain-Specific Languages book, implemented as an Internal DSL in F#.  The semantic model is implemented with F# discriminated unions. A custom operator (=>) specifies state transitions from events. Finally mutually recursive functions define the state machine.",
      "author": "",
      "link": "",
      "date": "2011-05-29T20:59:17.6630000",
      "likes": 4,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "DSL"
      ]
    },
    {
      "id": 327,
      "title": "Miss Grant's Controller Parser",
      "comment": "State machine example, from Martin Fowler's Domain-Specific Languages book, implemented as an External DSL parser in F#. A set of mutually recursive functions are used to parse the string tokens and build the State Machine as an F# record type.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-05-30T20:09:37.9670000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "DSL"
      ]
    },
    {
      "id": 328,
      "title": "Hughes's FuncList",
      "comment": "A FuncList is a \"list-like\" datatype with constant time append (represented as a function of cons-lists).\r\nThe implementation is based on a convenient computation builder.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-06-01T12:07:21.5800000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "List",
        "Hughes"
      ]
    },
    {
      "id": 329,
      "title": "Create a Open Xml word document from a string array",
      "comment": "Create a Open Xml word document from a string array. In this snippet I did not reference the Open Xml SDK",
      "author": "Piet Amersfoort",
      "link": "http://psaccelerator.nl/",
      "date": "2011-06-01T13:27:00.1130000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Open Xml",
        "Word"
      ]
    },
    {
      "id": 330,
      "title": "Async web request from Silverlight",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-01T17:19:20.5470000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 331,
      "title": "Simple F# ViewModel for Silverlight MVVM",
      "comment": "Silverlight default architecture is Model-View-ViewModel.\r\nThis code gives full design time support for Microsoft Expression Blend. The F# ViewModel is seen as strongly typed data source in the Blend UI. There are two properties binded to the view: HiLabel (OneWay data binding) and MyName (TwoWay data binding). ViewModel implements the INotifyPropertyChanged to support the binding.\r\n\r\nThe view project (HelloApp) is made with Blend (by designers) and it is Silverlight 5.0 project. The view codebehind is c# file and it has only this.DataContext -assignment.\r\n\r\nThe viewmodel project (HelloApp.ViewModel) is F# Silverlight 4.0 library. It is made with VS2010 and F# (by developers). It contains the logical functionality of the current view.\r\n\r\n \r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.facebook.com/pages/The-Greater-Helsinki-Area-F-User-Group/150548908311547",
      "date": "2011-06-01T17:53:49.5230000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Silverlight",
        "MVVM",
        "ViewModel",
        "XAML",
        "INotifyPropertyChanged"
      ]
    },
    {
      "id": 332,
      "title": "Sequence Generator from Async",
      "comment": "Generates a sequence using a sequence generator and Async.StartWithContinuations. This is an attempt at modeling the OWIN delegate structure in F#",
      "author": "Ryan Riley",
      "link": "http://owin.org/",
      "date": "2011-06-02T04:50:26.7100000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "owin",
        "async",
        "seq"
      ]
    },
    {
      "id": 333,
      "title": "Hughes's CPSFuncList",
      "comment": "A CPS version of FuncList, in order to avoid blowing the stack.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-06-02T14:21:53.7070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "List",
        "Hughes"
      ]
    },
    {
      "id": 334,
      "title": "Throttling agent",
      "comment": "Agent that can be used for controlling the number of concurrently executing asynchronous workflows. The agent runs a specified number of operations concurrently and queues remaining pending requests. The queued work items are started as soon as one of the previous items completes.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-06-02T20:33:06.8100000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "agent",
        "message passing",
        "mailboxprocessor",
        "throttling"
      ]
    },
    {
      "id": 335,
      "title": "ReplaySubject",
      "comment": "The ReplaySubject<T> type implements both IObserver<T> and IObservable<T>. It is functionally equivalent to the class of the same name in the Reactive Extensions (Rx) library with a replay buffer of a specified size .",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-06-03T07:55:15.6330000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Observable"
      ]
    },
    {
      "id": 336,
      "title": "Asynchronous Workflow Controller",
      "comment": "The snippet overrides default AsyncControllerActionInvoker so F# async workflows can be used for ASP.NET MVC 3. It declares a new base class for asynchronous controller. Controller method has to have return type Async<ActionResult>.",
      "author": "Dmitry Morozov",
      "link": "",
      "date": "2011-06-03T17:52:13.8830000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "asynchronous workflows",
        "asp.net",
        "web",
        "mvc"
      ]
    },
    {
      "id": 337,
      "title": "Simple Exp",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-04T05:59:29.4600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 338,
      "title": "Simple Exp",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-04T06:11:33.9200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 339,
      "title": "String explode and implode functions",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-04T14:18:41.5970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 340,
      "title": "String explode and implode",
      "comment": "Convert string to and from character lists.",
      "author": "petebu",
      "link": "",
      "date": "2011-06-04T14:23:15.2070000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "string",
        "list"
      ]
    },
    {
      "id": 341,
      "title": "funscript",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-04T22:17:30.2770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 342,
      "title": "Parallel Seq windows eventlogs",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-05T01:59:34.2400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 343,
      "title": "Odd error running a benchmark on Mono",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-05T08:30:14.6670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 344,
      "title": "Active pattern for comparison",
      "comment": "An active pattern for comparing two objects of the same type and implementing IComparable. Modeled on Standard ML comparison.",
      "author": "petebu",
      "link": "",
      "date": "2011-06-05T14:09:25.0300000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "active pattern",
        "comparison",
        "IComparable"
      ]
    },
    {
      "id": 345,
      "title": "Active pattern to define default values",
      "comment": "This active pattern allows you to specify default values for option arguments in the signature of your function, so you can remove unnecessary calls to defaultArg. It also save you having to define a new name for the defaulted value.",
      "author": "Kurt Schelfthout",
      "link": "",
      "date": "2011-06-05T16:56:28.1330000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "active patterns",
        "defaultArg",
        "option"
      ]
    },
    {
      "id": 346,
      "title": "Tuple Performance",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-06T00:28:32.1970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 347,
      "title": "Tuple Performance",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-06T00:33:27.0070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 348,
      "title": "Silverlight asynchronous WebService call with UI-thread syncronization dispatcher",
      "comment": "You can use this code to make a async WebRequest from Silverlight to update ViewModel.",
      "author": "Tuomas Hietanen",
      "link": "http://www.linkedin.com/groups?mostPopular=&gid=3416498",
      "date": "2011-06-06T00:54:16.3570000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Silverlight",
        "async",
        "WebRequest"
      ]
    },
    {
      "id": 349,
      "title": "Weighted Quick-Union with Path Compression",
      "comment": "Implementation of Mutable Weighted Quick-Union with Path Compression in F#",
      "author": "Rick Minerich",
      "link": "http://richardminerich.com",
      "date": "2011-06-07T17:13:43.1070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 9,
      "tags": [
        "Data Structures",
        "Union-Find"
      ]
    },
    {
      "id": 350,
      "title": "Reading a collection of records from database",
      "comment": "This snippet can be used to read all records from a given table and expose them as an IEnumerable<T> (seq)",
      "author": "Eduardo Claudio",
      "link": "",
      "date": "2011-06-07T20:53:41.9230000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "IEnumerable",
        "database"
      ]
    },
    {
      "id": 351,
      "title": "Create Open XML Spreadsheet with data",
      "comment": "Create a Open Xml spreadsheet fromxml. In this snippet I did not reference the Open Xml SDK",
      "author": "Piet Amersfoort",
      "link": "http://psaccelerator.nl/",
      "date": "2011-06-08T07:30:49.5800000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Open Xml",
        "Spreadsheet"
      ]
    },
    {
      "id": 352,
      "title": "Incremental auto-completion",
      "comment": "Returns subsets of strings which match a specified prefix. The prefix is built incrementally by repeatedly calling a search function.",
      "author": "Johann Deneux",
      "link": "",
      "date": "2011-06-08T09:49:34.0130000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "search"
      ]
    },
    {
      "id": 353,
      "title": "Agent based ObjectPool",
      "comment": "This is a simple implementation of an object pool using an agent (MailboxProcessor).\r\n\r\nThe pool is created with an initial number of object using the specified generator.\r\n\r\nThe ObjectPool has three functions:\r\n\r\nPut: An item can be 'Put' into the pool.\r\nGet: An item can be taken from the pool\r\nToListAndClear: A list of all the items in the pool is returned and the pool is cleared.",
      "author": "7sharp9",
      "link": "http://moiraesoftware.com",
      "date": "2011-06-08T13:23:55.5600000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "agent",
        "ObjectPool"
      ]
    },
    {
      "id": 354,
      "title": "Discount/Zero Curve Construction",
      "comment": "A simplistic discount curve bootstrapping process",
      "author": "Wayne Bradney",
      "link": "http://lesscode.net",
      "date": "2011-06-09T02:31:02.5630000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "finance"
      ]
    },
    {
      "id": 355,
      "title": "Quotation property name + comp + value extract",
      "comment": "for zec_ on irc",
      "author": "fholm",
      "link": "",
      "date": "2011-06-13T20:32:29.4630000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "qoutations"
      ]
    },
    {
      "id": 356,
      "title": "Project Euler #4",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-13T21:51:23.3070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 357,
      "title": "RichTextBox SQL highlighting",
      "comment": "Simple RichTextBox SQL highlighting with win32 LockWindowUpdate DllImport",
      "author": "nCdy",
      "link": "http://nCdy.org/",
      "date": "2011-06-14T10:48:59.2670000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WinForms"
      ]
    },
    {
      "id": 358,
      "title": "test1",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-14T21:12:36.7300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 359,
      "title": "Functions not so first class in active patterns",
      "comment": "It seems that you can't pass anonymous functions as parameters to active patterns.",
      "author": "Kurt Schelfthout",
      "link": "",
      "date": "2011-06-17T20:50:11.4230000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "active patterns",
        "anonymous functions"
      ]
    },
    {
      "id": 360,
      "title": "escaping string",
      "comment": "escaping string, very terse . Update: a bit more terse, and perf improvement by using .ToCharArray() and Array.iter",
      "author": "hammett",
      "link": "",
      "date": "2011-06-17T21:49:24.8870000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "string char"
      ]
    },
    {
      "id": 361,
      "title": "Simple string escaping",
      "comment": "Simple string escaping.",
      "author": "fzandona",
      "link": "",
      "date": "2011-06-18T00:18:10.7070000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "escape string char"
      ]
    },
    {
      "id": 362,
      "title": "ICFP2011",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-06-20T00:35:04.9770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 363,
      "title": "Moving average",
      "comment": "Saw a Moving Average example on this site ( http://fssnip.net/4S ) and wondered if it could be done in even fewer lines of code. It can. This is why I love F#!",
      "author": "Paul Papathomas",
      "link": "",
      "date": "2011-06-20T10:31:25.4500000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seq average"
      ]
    },
    {
      "id": 364,
      "title": "All subsets of a set",
      "comment": "A function implemented using sequence expressions that returns all subsets of a specified set. The function is not optimized, but it is very easy to understand.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-06-21T15:07:29.9270000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "set",
        "sequences",
        "sequence expressions",
        "subset"
      ]
    },
    {
      "id": 365,
      "title": "F# Future",
      "comment": "Similar to an async { } block but captures the result for future consumption.  This structure can be very useful for performing multiple result-returning operations  in parallel when the results aren't needed immediately.  For example, performing several read/transform operations or pre-populating a cache with yet-to-be computed values.  Microsoft's Task Parallel Library in .NET 4.0 includes a Future implementation so this version is only needed on earlier .NET versions. Comments, suggestions, and improvements are always welcome.",
      "author": "Jason McCampbell",
      "link": "http://solveddevproblems.blogspot.com/2010/02/f-futures.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+Solveddevproblems+%28SolvedDevProblems%29&utm_content=FeedBurner",
      "date": "2011-06-21T23:49:46.7870000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "parallel",
        "future",
        "thread"
      ]
    },
    {
      "id": 366,
      "title": "Seq.sumBy implemented in terms of Seq.fold",
      "comment": "Seq.sumBy implemented in terms of Seq.fold",
      "author": "ildjarn",
      "link": "http://stackoverflow.com/q/6449043/636019",
      "date": "2011-06-23T05:14:41.2570000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sumBy",
        "fold"
      ]
    },
    {
      "id": 367,
      "title": "F# Future using lazy and a threading event",
      "comment": "F# Future using lazy and a threading event.\r\nSupports creating futures from functions or asyncs.\r\nEager evaluation of can be specified.",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-06-23T06:39:32.7070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Lazy",
        "Threading",
        "Synchronization"
      ]
    },
    {
      "id": 368,
      "title": "Tetris",
      "comment": "Playable Tetris mini-game. Use arrow keys to move left and right and up to rotate, down to drop. Try it out in the browser on TryFSharp.org",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-06-25T19:22:56.3870000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Game",
        "Silverlight",
        "Async"
      ]
    },
    {
      "id": 369,
      "title": "Functional Unparsing SQL",
      "comment": "A combinator based DSL for composing type-safe parameterized sql queries. Inspired by \r\nOlivier Danvy's \"Functional Unparsing\" paper.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-06-27T10:21:16.6000000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "SQL",
        "combinators",
        "continuations"
      ]
    },
    {
      "id": 370,
      "title": "Repeat until",
      "comment": "Repeatedly call a function until it returns a positive result. Implemented using sequences.",
      "author": "Johann Deneux",
      "link": "",
      "date": "2011-06-27T11:42:14.4900000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequence",
        "control-flow"
      ]
    },
    {
      "id": 371,
      "title": "Still Mouse Click Event",
      "comment": "Detects a mouse down then up event without a move.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-06-28T07:02:13.8870000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Silverlight",
        "Async",
        "Events"
      ]
    },
    {
      "id": 372,
      "title": "Still Mouse Click Event Using Scan",
      "comment": "Detects a mouse down then up event without a move.",
      "author": "Zach Bray",
      "link": "http://twitter.com/#!/zbray",
      "date": "2011-06-28T09:09:31.4500000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Silverlight",
        "Events"
      ]
    },
    {
      "id": 373,
      "title": "Improved map declaration",
      "comment": "Ruby like map declaration syntax",
      "author": "Saagar Ahluwalia",
      "link": "",
      "date": "2011-06-28T19:13:18.5770000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Data structures",
        "syntax"
      ]
    },
    {
      "id": 374,
      "title": "WPF/Silverlight Value Converter",
      "comment": "Example of a WPF/Silverlight Value Converter base class and concrete implementation.",
      "author": "Tao Liu and Daniel Mohl",
      "link": "blog.danielmohl.com",
      "date": "2011-06-29T00:54:17.1570000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "WPF",
        "Silverlight"
      ]
    },
    {
      "id": 375,
      "title": "memoizeBy",
      "comment": "Sometimes you might wish to memoize a function whose input doesn't have the equality and comparison constraints, or maybe the comparison of your given type is just too slow for what you need. To fix this, you simply provide a function which converts the input into something more fitting as an extra parameter. ",
      "author": "Rick Minerich",
      "link": "http://richardminerich.com",
      "date": "2011-06-29T23:26:40.2900000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 7,
      "tags": [
        "Memoize",
        "Memoization",
        "Functions",
        "Utility"
      ]
    },
    {
      "id": 376,
      "title": "Cancellable agent",
      "comment": "The snippet implements a wrapper for standard F# agent that can be cancelled using the IDisposable interface. This makes it possible to use the agent locally (e.g. inside asynchronous workflow). When it is no longer needed, the agent's body is cancelled.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-07-01T01:18:58.8100000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "agent",
        "message passing",
        "mailboxprocessor",
        "cancellation"
      ]
    },
    {
      "id": 377,
      "title": "Web Crawler extensions",
      "comment": "The snippet extends a web crawler from snippet http://fssnip.net/3K. It synchronizes all printing using an additional agent (so printed text does not interleave) and the crawling function returns an asynchronous workflow that returns when crawling completes.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-07-02T13:13:18.3800000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "crawling",
        "web",
        "web crawler",
        "agent",
        "mailboxprocessor"
      ]
    },
    {
      "id": 378,
      "title": "Wimbledon special!",
      "comment": "Tennis scoring system (at the game level).  Includes some pattern-matching examples including 'when' guards.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2011-07-02T13:32:13.0500000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "tennis",
        "reflection",
        "match",
        "when"
      ]
    },
    {
      "id": 379,
      "title": "LazyBuilder",
      "comment": "I made LazyBuilder. The synthesis of the lazy function is troublesome. When the call of the Force() method increases, it is ugly. This solves the problem. ",
      "author": "zecl",
      "link": "http://d.hatena.ne.jp/zecl/",
      "date": "2011-07-03T09:38:23.7930000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lazy",
        "computation builder",
        "monad"
      ]
    },
    {
      "id": 380,
      "title": "Creating Visual Studio Macros in F#",
      "comment": "this snippet presents a way to create macros in F# to automato VS IDE environment.\r\n\r\nTo compile, just open a Command prompt window and type:\r\n      fsc --out:fsmacros.dll --reference:envdte.dll --target:library fsmacros.fs\r\n\r\nWhere FSMACROS.FS is the file name I gave for the code. \r\nAfter compile, copy the dll to \r\n    C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\IDE\\PublicAssemblies\r\n\r\nTo use, just open F# interactive in Visual Studio (CTRL+ALT+F) and type:\r\n   #r “envdte”;;\r\n   #r “fsmacros”;;\r\n   Let dte = vs10macros.getDte “The main window title appearing in you VS 2010”;;\r\n",
      "author": "Eduardo Claudio",
      "link": "eduardoclaudio.wordpress.com",
      "date": "2011-07-04T01:07:57.4700000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Visual Studio;DTE;Automation"
      ]
    },
    {
      "id": 381,
      "title": "WPF/Silverlight Attached Property",
      "comment": "Example of a WPF/Silverlight Attached Property (AP). This is a port of a C# AP implementation that can be found at http://www.silverlightshow.net/items/Attached-Properties-in-Silverlight.aspx.",
      "author": "Daniel Mohl",
      "link": "blog.danielmohl.com",
      "date": "2011-07-04T13:26:47.2300000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "WPF",
        "Silverlight"
      ]
    },
    {
      "id": 382,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-04T19:04:00.5370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 383,
      "title": "Interface workaround for circular dependency problem",
      "comment": "Interface workaround for circular dependency problem",
      "author": "fholm",
      "link": "",
      "date": "2011-07-05T13:57:01.9230000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "interface",
        "workaround"
      ]
    },
    {
      "id": 384,
      "title": "Agent Based Scheduler",
      "comment": "An agent based scheduler, can be sent a single schedule message (ScheduleOnce) and multiple schedule message (Schedule).  \r\n\r\nThe schedule messages comprise of a function to receive the message, the message, an initial TimeSpan before the message is scheduled, and another timespan for the schedule repeat.\r\n\r\nCheck out my blog below for more details: \r\nhttp://bit.ly/mK4prb ",
      "author": "7sharp9",
      "link": "http://bit.ly/mK4prb",
      "date": "2011-07-08T00:35:18.0400000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "agent",
        "async",
        "message passing",
        "mailboxprocessor",
        ""
      ]
    },
    {
      "id": 385,
      "title": "Extensions for HTTP servers",
      "comment": "This snippet extends several types from the System.Net namespace. It provides an easy to use API for creating asynchronous (as well as synchronous) HTTP servers using F# asynchronous workflows. ",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-07-09T23:46:06.1130000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "asynchronous workflows",
        "http",
        "server",
        "httplistener"
      ]
    },
    {
      "id": 386,
      "title": "Synchronous, event-based and asynchronous HTTP proxy",
      "comment": "This snippet shows the implementation of three HTTP proxy servers in F#. The first is written using simple synchronous style (that isn't scalable). The second version uses event-based approach in the Node.js style, but is difficult to write. The third version uses F# async workflows and is both scalable and easy to write. ",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-07-09T23:55:29.7670000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async",
        "asynchronous",
        "proxy server",
        "HTTP"
      ]
    },
    {
      "id": 387,
      "title": "Asynchronous HTTP proxy with chunking and caching ",
      "comment": "This snippet shows two improvements to asynchronous HTTP proxy from: http://fssnip.net/6e. First extension is to process page in chunks (instead of downloading the entire content first). The second extension is to use simple agent-based in-memory cache for previously visited pages.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-07-10T00:10:57.9370000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "asynchronous",
        "proxy server",
        "HTTP"
      ]
    },
    {
      "id": 388,
      "title": "Iteratee",
      "comment": "An iteratee based on https://john-millikin.com/software/enumerator/ and http://okmij.org/ftp/Haskell/Iteratee/IterateeIO-talk-notes.pdf",
      "author": "Ryan Riley",
      "link": "http://github.com/panesofglass/FSharp.Monad",
      "date": "2011-07-10T00:27:04.9900000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "iteratee",
        "enumerator",
        "lazy",
        "I/O"
      ]
    },
    {
      "id": 389,
      "title": "WPF Event to Command",
      "comment": "This snippet provides an example of a WPF Event to Command behavior.",
      "author": "Daniel Mohl",
      "link": "blog.danielmohl.com",
      "date": "2011-07-10T13:41:42.7430000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WPF"
      ]
    },
    {
      "id": 390,
      "title": "Tiny IO Monad",
      "comment": "Haskell-style IO in F#.",
      "author": "igeta",
      "link": "",
      "date": "2011-07-12T12:52:29.8370000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "IO",
        "monad",
        "computation builder"
      ]
    },
    {
      "id": 391,
      "title": "Norvig's Spelling Corrector",
      "comment": "A line-by-line translation of Norvig's original Python code. An attempt to view F# as a \"typed\"  Python.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-07-12T20:06:28.7630000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Spelling Corrector",
        "Python"
      ]
    },
    {
      "id": 392,
      "title": "solver",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-13T10:17:44.0170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 393,
      "title": "one to nine puzzle",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-13T10:31:05.2870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 394,
      "title": "one to nine puzzle",
      "comment": "Solve the one to nine puzzle with a utility function that handles the depth first search.    First saw the puzzle here: http://msdn.microsoft.com/en-us/vcsharp/ee957404",
      "author": "dave jones",
      "link": "",
      "date": "2011-07-14T02:43:20.0030000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "puzzle"
      ]
    },
    {
      "id": 395,
      "title": "N-Queens",
      "comment": "Code to solve the N-Queens problem.",
      "author": "dave jones",
      "link": "",
      "date": "2011-07-14T02:48:42.6070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "puzzle"
      ]
    },
    {
      "id": 396,
      "title": "Calculating the angle between the hour and minute hand",
      "comment": "This is a response to a Google interview question that someone encountered. A friend of mine was recently hired there and I've heard some thrilling stories of their interview process. So every now and then, I plan to code up a response to one of the hoards of interview questions they have.",
      "author": "Antwan \"A-Dubb\" Wimberly",
      "link": "",
      "date": "2011-07-14T05:57:27.9400000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "trig"
      ]
    },
    {
      "id": 397,
      "title": "Calculating the angle between the hour and minute hand redux",
      "comment": "This snippet introduces a further subtlety into the previous posting, whereby the intra-hour movement of the hour hand is captured.",
      "author": "HP",
      "link": "",
      "date": "2011-07-14T08:44:39.4230000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "trig"
      ]
    },
    {
      "id": 398,
      "title": "Sudoku with general solve function",
      "comment": "Using the general solve function to solve Sudoku.  The puzzle specific code was translated from Norvig's Sudoku code, but any errors are mine.  Reuses code from fssnip.net/6m and fssnip.net/6n",
      "author": "dave jones",
      "link": "",
      "date": "2011-07-14T10:34:13.9700000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "puzzle"
      ]
    },
    {
      "id": 399,
      "title": "Erlang Ring problem",
      "comment": "Here's an attempt at the Erlang ring problem in F#.",
      "author": "David Grenier",
      "link": "https://lh3.googleusercontent.com/-aZs4FhDwyaQ/Th-WD3Ufl9I/AAAAAAAAAJg/1xObo2ahEJg/Ring+in+F%2523.png",
      "date": "2011-07-15T01:24:21.5570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Erlang Ring Agent"
      ]
    },
    {
      "id": 400,
      "title": "Get COM instances from Running Object Table",
      "comment": "Type extensions for System.Activator which enable the retrieval of COM instances from the Running Object Table.",
      "author": "Huw Simpson",
      "link": "",
      "date": "2011-07-15T11:39:22.7370000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "COM",
        "Interop"
      ]
    },
    {
      "id": 401,
      "title": "Seq group continuous matching elements",
      "comment": "Seq group continuous matching elements\r\n[1;1;1;2;2;2] will become [ [1;1;1] ; [2;2;2] ]",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-07-15T17:48:27.8670000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Sequence"
      ]
    },
    {
      "id": 402,
      "title": "Union-Friendly Generic Binary Serializer",
      "comment": "Implements binary serialization. The encoding supports all records, unions, numeric types, strings, rank-1 arrays, maps, sets, lists and dictionaries.  Strings are interned for efficiency. The encoding also uses binary compression (GZIP).",
      "author": "Anton Tayanovskyy",
      "link": "https://gist.github.com/1082622",
      "date": "2011-07-15T17:53:02.0100000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "serialization"
      ]
    },
    {
      "id": 403,
      "title": "Draw rectangle in TryFSharp.org",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-16T00:48:57.2100000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 404,
      "title": "raiseAfterHandlers",
      "comment": "Raises an exception again after attempting to run one or more handlers. Any failures in the handlers will be put into a new AggregateExeption. If no additional errors are raised, the original exception will be re-raised with a preserved stack trace.",
      "author": "Sebastian Good",
      "link": "",
      "date": "2011-07-16T23:18:53.6870000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "exception"
      ]
    },
    {
      "id": 405,
      "title": "Split string input on a function",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-18T05:35:02.1470000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 406,
      "title": "Turtle",
      "comment": "Turtle graphics library implemented as an internal DSL, providing a very similar syntax to Logo, it is runnable inside TryFSharp.org. ",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-07-18T19:53:34.5000000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "DSL"
      ]
    },
    {
      "id": 407,
      "title": "Split sequences",
      "comment": "Split sequences based on a predicate.",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-07-19T06:42:15.5530000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Sequences"
      ]
    },
    {
      "id": 408,
      "title": "Seq.groupWhen function",
      "comment": "The snippet declares a function that groups adjacent elements of a sequence. A new group is started when the specified predicate holds about an element. Groups are constructed eagerly (using lists).",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-07-19T14:07:28.5470000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequences",
        "seq",
        "grouping",
        "IEnumerator"
      ]
    },
    {
      "id": 409,
      "title": "ByteString",
      "comment": "An initial attempt at creating a ByteString type based on the Haskell version.",
      "author": "Ryan Riley",
      "link": "http://wizardsofsmart.net/",
      "date": "2011-07-22T06:58:25.0900000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "ByteString",
        "Stream",
        "List",
        "Sequence",
        "ArraySegment"
      ]
    },
    {
      "id": 410,
      "title": "Permutation and Combination",
      "comment": "Permutation and Combination using ListBuilder.",
      "author": "zecl",
      "link": "http://d.hatena.ne.jp/zecl/",
      "date": "2011-07-24T05:29:48.8330000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "computation builder",
        "permutation",
        "combination"
      ]
    },
    {
      "id": 411,
      "title": "Return the first result using Async.Choice",
      "comment": "The snippet implements Async.Choice method that takes several workflows and creates a workflow, which returns the first result that was computed. After a workflow completes, remaining workflows are cancelled using the F# async cancellation mechanism. (The method doesn't handle exceptions.)",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-07-24T13:36:06.6100000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "async",
        "asynchronous workflows",
        "choice",
        "non-determinism"
      ]
    },
    {
      "id": 412,
      "title": "Splice sequence into other sequence",
      "comment": "Splices a sequence into another sequence at a specified index n. Can replace the existing element at n or keep it.",
      "author": "Henrik Ravn",
      "link": "http://twitter.com/#!/hravnx",
      "date": "2011-07-26T07:50:06.8130000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequence",
        "splice"
      ]
    },
    {
      "id": 413,
      "title": "Erik Lippert's Comma Quibbling",
      "comment": "An old solution of mine to Erik Lippert's Comma Quibbling challenge. \r\nI really like this snippet because it shows that with F# we can hack elegant but also fast code.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-07-26T11:16:13.9800000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "LazyList"
      ]
    },
    {
      "id": 414,
      "title": "Soundex Algorithm",
      "comment": "Algorithms for generating US Census and Daitch-Mokotoff soundex string(s) based on a text input. Soundex is a phonetic algorithm for indexing names by sound, as pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling.",
      "author": "Matt Wilson",
      "link": "",
      "date": "2011-07-26T15:54:49.6270000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequences",
        "Algorithms"
      ]
    },
    {
      "id": 415,
      "title": "Take value from a sequence only when it changes",
      "comment": "Take value from a sequence only when it changes (based on a predicate).\r\nEx: Seq [1;1;1;3;3;3;5;5;5] will result in [3;5]",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-07-26T16:24:49.6730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Seq",
        "filtering"
      ]
    },
    {
      "id": 416,
      "title": "JoinList",
      "comment": "A JoinList is a variation on the list type that offers a constant time append operation.",
      "author": "Ryan Riley",
      "link": "https://github.com/panesofglass/FSharp.Monad",
      "date": "2011-07-27T06:55:06.9270000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Sequences",
        "Collections",
        "Lists"
      ]
    },
    {
      "id": 417,
      "title": "Complex 1 - Intro",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:02:02.6030000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 418,
      "title": "Complex 2 - First Operator",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:06:26.4370000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 419,
      "title": "Complex 1 - Intro",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:07:44.0330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 420,
      "title": "Complex 3 - Operators",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:08:53.9800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 421,
      "title": "Complex 4 - Conjugate",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:10:46.0430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 422,
      "title": "Complex 5 - Polar Form",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:12:05.6770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 423,
      "title": "Complex 6 - Roots",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:13:46.3800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 424,
      "title": "Complex 7 - Chapter 2 Problems",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:15:12.3300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 425,
      "title": "Complex 8 - Graphics Intro",
      "comment": "Fixing the Silverlight color mismatch.",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:17:38.2070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Complex",
        "TryFSharp"
      ]
    },
    {
      "id": 426,
      "title": "Complex 8 - Graphics Intro",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:24:21.9200000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 427,
      "title": "Complex 9 - Draw Sets",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:26:35.7530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 428,
      "title": "Complex 10 - Draw Mandelbrot",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-07-28T21:28:17.6570000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 429,
      "title": "Overloads to get tuple items",
      "comment": "The static representations, unlike the encoded System.Tuple<_,...,_> forms, of tuples do not have ItemX properties and therefore static structural constraints cannot be used to obtain the nth item of a tuple. Here we give a utility with overloads for obtaining the nth item of a tuple. However, type inference is undermined in the presence of overloads  ",
      "author": "Stephen Swensen",
      "link": "http://stackoverflow.com/users/236255/stephen-swensen",
      "date": "2011-07-29T13:16:38.4300000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Tuples"
      ]
    },
    {
      "id": 430,
      "title": "Universal Type",
      "comment": "Implements a type into which any other type can be embedded. Check out this link for a discussion: http://ocaml.janestreet.com/?q=node/18",
      "author": "Ademar Gonzalez",
      "link": "http://ademar.name",
      "date": "2011-07-31T00:07:15.8500000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "types",
        "universal",
        "heterogeneous",
        "container"
      ]
    },
    {
      "id": 431,
      "title": "Basic WinForms drag and drop",
      "comment": "Quick example of using drag-n-drop with WinForms.",
      "author": "MichaelGG",
      "link": "",
      "date": "2011-08-01T18:30:44.0570000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WinForms",
        "events"
      ]
    },
    {
      "id": 432,
      "title": "IDisposable dispose helper",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-02T16:59:01.8670000",
      "likes": 3,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 433,
      "title": "Nontrivial Gotos",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-03T19:07:42.8870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 434,
      "title": "11 - Mouse Handlers",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-04T22:14:08.1500000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 435,
      "title": "12 - Function Display",
      "comment": "Complex function display with two Argand planes, and dots.\r\nAdded exponential function.",
      "author": "",
      "link": "",
      "date": "2011-08-04T22:16:03.7000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Complex",
        "WPF"
      ]
    },
    {
      "id": 436,
      "title": "Seq.reduceBallanced function",
      "comment": "The function has the same type as Seq.reduce. Instead of reducing elements from the left to the right, it splits the input into two halves, reduces each half separately and then aggregates the results using the given function. This means that the values are aggregated into a ballanced tree, which can save stack space.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-08-07T13:26:52.5430000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequence",
        "tree",
        "reduce",
        "aggregate",
        "stack"
      ]
    },
    {
      "id": 437,
      "title": "Async based MapReduce",
      "comment": "Async is a very versatile structure, which has been used to compose CPU/IO bound computations.\r\nSo it is very tempting to implement a MapReduce function based on Async and borrowing ideas from the theory of list homomorphisms. ",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-08-09T12:18:49.8130000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Async",
        "MapReduce"
      ]
    },
    {
      "id": 438,
      "title": "Pairing Heap",
      "comment": "https://secure.wikimedia.org/wikipedia/en/wiki/Pairing_heap",
      "author": "",
      "link": "",
      "date": "2011-08-09T14:58:31.5670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "heap"
      ]
    },
    {
      "id": 439,
      "title": "Finding matching pairs in two sequences",
      "comment": "Here's a function which takes a comparator function and two sequences, and returns tuples consisting of an item from each sequence, where the comparator function returns true for those two items.\r\n\r\nThis is a small part of my wider project to generate guitar chord shapes.  One of the requirements there is to take a list of 'wanted' notes for a chord, and a list of 'available' notes within a range of frets and to combine them into an actual set of frettings.  That's what led to tryFindFirstPair and hence to findPairs.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2011-08-09T15:01:17.3670000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "learning F#",
        "sequences"
      ]
    },
    {
      "id": 440,
      "title": "Her name is Cherry; we've just met",
      "comment": "Third cut of a guitar chord shape generator.  Given a fretted instrument with a particular tuning (eg. 6 string guitar tuned EADGBE), the generator will produce the frettings necessary to play any specified chord.  This is not done from a chord library, but algorithmically (hence should work with whacky tunings).  This version doesn't fully respect the limitations of the human hand beyond specifying a maximum 'stretch' of a few frets, so some of the shapes generated would need a friend to help play them!  This will be dealt with in a future version.  This third version contains improved handling of differing tunings and instruments (eg. DADGAD; banjo) but still doesn't check for unplayable shapes.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2011-08-09T17:33:16.2070000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "guitar",
        "chord",
        "music"
      ]
    },
    {
      "id": 441,
      "title": "A little nicer",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-10T15:11:02.7570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 442,
      "title": "13 - Trig Functions Display",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-11T21:32:43.2700000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 443,
      "title": "IterateeCPS",
      "comment": "An iteratee that uses continuation-passing style as an optimization. There is no more discriminated union, and the signature should feel familiar to those using Async.StartWithContinuations.",
      "author": "Ryan Riley",
      "link": "http://wizardsofsmart.net/",
      "date": "2011-08-12T06:50:13.3570000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "iteratee",
        "enumerator",
        "lazy",
        "I/O",
        "CPS",
        "continuations",
        "sequences"
      ]
    },
    {
      "id": 444,
      "title": "StructPerfTest",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-13T14:27:47.7600000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 445,
      "title": "equalstest2",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-13T14:48:30.6230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 446,
      "title": "Continuation Monad with Call/CC",
      "comment": "This is an implementation of the Continuation monad using a type, taking an exception handler, and allowing for Call/CC. This specific implementation is mostly Matt Podwysocki's. I have a similar implementation using a purely functional, exception-handler-less version in FSharp.Monad. Until now, I haven't been able to resolve the callCC operator.",
      "author": "Ryan Riley",
      "link": "http://github.com/panesofglass/FSharp.Monad",
      "date": "2011-08-17T08:01:00.9670000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "continuation",
        "monad",
        "callcc",
        "call-with-current-continuation"
      ]
    },
    {
      "id": 447,
      "title": "14 - Function Sets Display",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-17T11:33:02.5600000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 448,
      "title": "Simple job processor ",
      "comment": "Generic batch job processor using Mail box processor. Sending quit message using PostAndReply will ensure that all jobs are completed before returning. (Exception handling is responsibility of the job)",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-08-18T13:05:56.9630000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Mailboxprocessor",
        "job",
        "async"
      ]
    },
    {
      "id": 449,
      "title": "AsyncSeq - Introduction and Crawler",
      "comment": "This snippet demonstrates programming using asynchronous sequences. It contains (hidden) implementation of AsyncSeq type and combinators for working with it. More importantly, it demonstrates how to use asynchronous sequences to implement a simple sequential on-demand crawler.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-08-19T02:10:51.6130000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "asynchronous",
        "asynchronous sequence",
        "asyncseq",
        "crawler",
        "web crawler"
      ]
    },
    {
      "id": 450,
      "title": "foo",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-19T14:47:42.1400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 451,
      "title": "Chain of responsibility ",
      "comment": "The following sample wants to make sure the person’s age is between 18 and 65, weight is no more than 200 and tall enough (>120). ",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:05:00.4230000",
      "likes": 74,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 452,
      "title": "Decorate pattern ",
      "comment": "implement the decorate pattern in F#. The decorate pattern is to add new featuures to an object at runtime.",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:07:35.1600000",
      "likes": 36,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 453,
      "title": "Observer pattern",
      "comment": "Observer pattern in F#",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:10:11.5200000",
      "likes": 34,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 454,
      "title": "Strategy pattern",
      "comment": "Strategy pattern in F#",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:11:36.4770000",
      "likes": 68,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 455,
      "title": "State Pattern",
      "comment": "the interest rate is decided by the internal state: account balance",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:12:59.8430000",
      "likes": 32,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 456,
      "title": "Adapter pattern",
      "comment": "Invoke the methods from incompatible types",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:14:28.9330000",
      "likes": 94,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 457,
      "title": "Command pattern for Redo-Undo",
      "comment": "Command pattern for redo-undo scenario.",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:17:13.3770000",
      "likes": 45,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 458,
      "title": "Composite pattern and Visitor Pattern",
      "comment": "use composite pattern to construct a tree and visitor pattern to bring back the traverse result.",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:19:47.3500000",
      "likes": 33,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 459,
      "title": "Singleton Pattern",
      "comment": "singleton pattern in F#",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:43:32.1570000",
      "likes": 37,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 460,
      "title": "Factory Pattern",
      "comment": "Factory pattern in F#",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-20T06:44:33.1630000",
      "likes": 68,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 461,
      "title": "Rx CombineLatest for list of IObservable<'a> to IObservable<'a array>.",
      "comment": "Rx CombineLatest for list of IObservable<'a> to IObservable<'a array>.",
      "author": "Ankur Dhama",
      "link": "",
      "date": "2011-08-20T07:10:56.0000000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Rx"
      ]
    },
    {
      "id": 462,
      "title": "Proxy Pattern",
      "comment": "Proxy pattern is a class functioning as an interface to something else.",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-21T02:25:02.8170000",
      "likes": 37,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 463,
      "title": "Clumsy LoopBuilder",
      "comment": "Clumsy LoopBuilder.It's mischievous trick.",
      "author": "zecl",
      "link": "http://d.hatena.ne.jp/zecl/",
      "date": "2011-08-22T12:48:27.5100000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "computation builder",
        "break",
        "continue"
      ]
    },
    {
      "id": 464,
      "title": "Euler #5",
      "comment": "Euler #5 solution",
      "author": "Michael Falanga",
      "link": "",
      "date": "2011-08-23T12:00:50.3130000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "euler problem",
        "algorithm",
        "recursion",
        "lists",
        "learning F#",
        "puzzles",
        "seq"
      ]
    },
    {
      "id": 465,
      "title": "sqr",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-23T15:45:31.3170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 466,
      "title": "pushkin tree",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-24T04:01:06.8570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 467,
      "title": "Growing Tree Algorithm for Maze Generation",
      "comment": "There are several maze creation algorithms (http://www.astrolog.org/labyrnth/algrithm.htm). The interesting point about Growing Tree one is that it turns into the others (for example, Recursive Backtracker and Prim's algo) when we choose the next step in different ways. Check it with tryfsharp.org.",
      "author": "Natallie Baikevich",
      "link": "",
      "date": "2011-08-25T19:48:28.2600000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "maze",
        "silverlight",
        "async"
      ]
    },
    {
      "id": 468,
      "title": "Timing function",
      "comment": "Modify function comment",
      "author": "",
      "link": "",
      "date": "2011-08-25T22:00:02.6000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "timing"
      ]
    },
    {
      "id": 469,
      "title": "Chain of responsibility II",
      "comment": "Unlike the previous chain of responsibility, this version use the pipeline to chain responsibilities. ",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-08-26T08:22:26.2570000",
      "likes": 97,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 470,
      "title": "Pushkin tree v 2.0",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-08-29T23:06:52.0200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 471,
      "title": "Scrap Your Boilerplate ",
      "comment": "Scrap Your Boilerplate with the help of F#. Based on the original paper by Ralf Laemmel and Simon Peyton Jones.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-08-30T09:38:09.5030000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Generic Programming",
        "Haskell",
        "rank-2"
      ]
    },
    {
      "id": 473,
      "title": "Prime numbers - Sieve of Eratosthenes",
      "comment": "Basic prime number generator",
      "author": "d95danb",
      "link": "",
      "date": "2011-08-31T18:12:29.0130000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "primes",
        "math",
        "Eratosthenes"
      ]
    },
    {
      "id": 474,
      "title": "Prime testing",
      "comment": "Simple check if a number is prime. See also http://fssnip.net/2w.",
      "author": "d95danb",
      "link": "",
      "date": "2011-09-01T09:34:07.1170000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "prime testing",
        "primes",
        "math"
      ]
    },
    {
      "id": 475,
      "title": "15 - Parameterized Paths",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-01T21:56:00.4100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 476,
      "title": "16 - Integration",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-01T22:16:03.9670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 477,
      "title": "Jaro-Winkler in F#, Optimized",
      "comment": "formatting for blog",
      "author": "",
      "link": "",
      "date": "2011-09-02T17:57:36.7170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 8,
      "tags": [
        "jarowinkler"
      ]
    },
    {
      "id": 478,
      "title": "JaroWinkler in F#, and more",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-02T21:36:21.1800000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 479,
      "title": "JaroWinkler in F#, and more",
      "comment": "fsdfsdf",
      "author": "",
      "link": "",
      "date": "2011-09-02T21:37:12.3770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "sfdfdf"
      ]
    },
    {
      "id": 480,
      "title": "DNS, Async",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-03T08:19:06.5900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 481,
      "title": "Calculating when the 1000th XKCD will appear",
      "comment": "Calculate's when a the nth XKCD will appear, starting from XKCD 946. For a full explanation this snippet see:\r\nhttp://strangelights.com/blog/archive/2011/09/02/calculating-when-the-1000th-xkcd-will-appear.aspx",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog/archive/2011/09/02/calculating-when-the-1000th-xkcd-will-appear.aspx",
      "date": "2011-09-03T12:16:00.4870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Sequences",
        "Puzzles"
      ]
    },
    {
      "id": 482,
      "title": "Coroutine",
      "comment": "An implementation of Coroutine by using a continuation monad. It's using a monad library [1]. \r\n[1] https://github.com/fsharp/fsharpx",
      "author": "einblicker",
      "link": "http://d.hatena.ne.jp/einblicker",
      "date": "2011-09-04T00:49:43.0530000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "continuations",
        "coroutine"
      ]
    },
    {
      "id": 483,
      "title": "Parallel Strassen Matrix Multiplication",
      "comment": "Strassen's Multiplication Algorithm works much better than the standard approach when the matrix is large.\r\nThe program implements a parallel version of it.",
      "author": "Zhuobo Feng",
      "link": "",
      "date": "2011-09-04T22:08:24.1030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Strassen",
        "Matrix Multiplication"
      ]
    },
    {
      "id": 484,
      "title": "Circular queue",
      "comment": "A circular queue implemented over an array.",
      "author": "Johann Deneux",
      "link": "https://bitbucket.org/johdex/xnautils/src/258468aa30b2/XNAUtils/CircularQueue.fs",
      "date": "2011-09-05T10:50:17.9170000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "collections",
        "array",
        "queue"
      ]
    },
    {
      "id": 485,
      "title": "Delimited Continuation Monad",
      "comment": "Oleg's delimited continuation monad [1] and creating an external iterator from an internal iterator using it. [1] http://okmij.org/ftp/continuations/implementations.html#genuine-shift",
      "author": "einblicker",
      "link": "http://d.hatena.ne.jp/einblicker",
      "date": "2011-09-05T14:01:45.0000000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "continuations",
        "computation builder",
        "monad"
      ]
    },
    {
      "id": 486,
      "title": "WPF / SilverLight Converter II",
      "comment": "version 1 is http://fssnip.net/62. This new version support convert from any existing function to a converter function by using composition and pipeline.  The convert function is to make the function signature agree to the IValueConverter interface. You can add new functions in the FunctionLibrary module and reuse the class definition to reduce the coding effort.\r\n\r\nThe first sample is to show how to make the converter pipeline work, the second one is a debugger converter used to debug the data binding problem.",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-09-06T01:34:54.2070000",
      "likes": 83,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "WPF",
        "SilverLight"
      ]
    },
    {
      "id": 487,
      "title": "Jaro-Winkler in F#, Extended",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-07T18:15:00.3600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 488,
      "title": "imperative gale shapely",
      "comment": "vsdfd",
      "author": "",
      "link": "",
      "date": "2011-09-07T23:15:28.2270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 8,
      "tags": [
        "fsdfdsf"
      ]
    },
    {
      "id": 489,
      "title": "Command pattern for Redo-Undo II",
      "comment": "This command redo-undo implement group the command under Do/Undo category. ",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-09-08T22:24:47.0700000",
      "likes": 60,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 490,
      "title": "Call/CC for Async",
      "comment": "An implementation of call-with-current-continuation for Async.",
      "author": "Ryan Riley",
      "link": "http://github.com/fsharp/fsharpx",
      "date": "2011-09-08T23:10:56.3770000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "async",
        "continuation",
        "callcc"
      ]
    },
    {
      "id": 491,
      "title": "Wrong use of Call/CC for Async",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-08T23:33:21.7000000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 492,
      "title": "Minesweeper in 99 lines of code ",
      "comment": "This program is written in only 99 lines of actual code and remains enough readability.\r\nI used few short-coding technics.\r\n1. no XAML.\r\n2. pre-calculate every useful data for the purpose of eliminating useless states\r\n3. using record type with set property as an alternative of view-model\r\n4. initialize everything in one place.\r\n5. encapsulate all states in one place.",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2011-09-09T11:46:34.3470000",
      "likes": 14,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Game",
        "Puzzle"
      ]
    },
    {
      "id": 493,
      "title": "Download stock prices as async sequence",
      "comment": "The snippet uses asynchronous sequences (from F# AsyncExtensions) to download historical stock data from Yahoo. Data is downloaded in a buffered way on demand (as needed) and returned line by line. The sample then prints OHLC values for first 30 items.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-09-11T02:11:58.0500000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async",
        "asynchronous",
        "asynchronous sequence",
        "asyncseq",
        "ohlc",
        "stock",
        "download",
        "yahoo"
      ]
    },
    {
      "id": 494,
      "title": "Creating observable using Async.StartDisposable",
      "comment": "Implements a simple Async.StartDisposable extension that can be used to easily create IObservable values from F# asynchronous workflows. The method starts an asynchronous workflow and returns IDisposable that cancels the workflow when disposed. ",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-09-11T13:10:23.9800000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "async",
        "asynchronous workflows",
        "observable",
        "event",
        "dispose"
      ]
    },
    {
      "id": 495,
      "title": "Sliding window for Observable",
      "comment": "Implements the Observable.windowed function that creates an observable returning a sliding window. The function is an observable version of Seq.observable. The implementation uses a simple F# agent that keeps partial windows and sends them to an observer.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-09-11T18:38:43.5930000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "observable",
        "agent",
        "windowed",
        "sliding window"
      ]
    },
    {
      "id": 496,
      "title": "How does Observable.Window behave?",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-12T00:36:21.2670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 497,
      "title": "Get the F# module or type of the calling code.",
      "comment": "This code snippet enables the retrieval of the entity (Module or F# Type) in which the calling code is executing. This can be used to find the module or type name.",
      "author": "Huw Simpson",
      "link": "",
      "date": "2011-09-12T12:29:05.9770000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "reflection",
        "meta-data"
      ]
    },
    {
      "id": 498,
      "title": "Integer factorization",
      "comment": "Return a list of the prime factors for a natural number using trial division and a prime sieve.\r\n\r\nRef: http://en.wikipedia.org/wiki/Trial_division\r\nRef: http://fssnip.net/7D\r\n\r\n",
      "author": "d95danb",
      "link": "",
      "date": "2011-09-12T13:26:36.4470000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "primes factorization math"
      ]
    },
    {
      "id": 499,
      "title": "Integer factorization",
      "comment": "Return a list of the prime factors for a natural number using trial division and a prime sieve.\r\n\r\nRef: http://en.wikipedia.org/wiki/Trial_division\r\nRef: http://fssnip.net/7D\r\n\r\n",
      "author": "d95danb",
      "link": "",
      "date": "2011-09-12T13:26:38.5100000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "primes factorization math"
      ]
    },
    {
      "id": 500,
      "title": "Find Files Bigger Than",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-13T12:19:23.3200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 501,
      "title": "netty",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-18T15:09:22.3500000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 502,
      "title": " Pack consecutive duplicates of list elements into sublists",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-20T18:05:40.0130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 503,
      "title": "Pack consecutive duplicates of list elements into sublists",
      "comment": "Pack consecutive duplicates of list elements into sublists.If a list contains repeated elements they should be placed in separate sublists.\r\n\r\n",
      "author": "Naveen",
      "link": "http://naveensrinivasan.com",
      "date": "2011-09-20T18:14:00.3170000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "list"
      ]
    },
    {
      "id": 504,
      "title": "Project Euler Problem 19",
      "comment": "How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?\r\n",
      "author": "Gene Belitski",
      "link": "",
      "date": "2011-09-20T20:50:52.8970000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Project Euler",
        "puzzles"
      ]
    },
    {
      "id": 505,
      "title": "Project Euler Problem 31 ",
      "comment": "In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:\r\n\r\n1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).\r\nIt is possible to make £2 in the following way:\r\n\r\n1x£1 + 1x50p + 2x20p + 1x5p + 1x2p + 3x1p\r\nHow many different ways can £2 be made using any number of coins?\r\n",
      "author": "Gene Belitski",
      "link": "",
      "date": "2011-09-20T21:12:56.7170000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Project Euler",
        "puzzles"
      ]
    },
    {
      "id": 506,
      "title": "Gluing-up sequence members",
      "comment": "While thinking on Project Euler Problem 40 solution (http://projecteuler.net/index.php?section=problems&id=40) the following subproblem has surfaced: how to glue up string presentations of a sequence members to reach a given length of result string. The snippet gives at least 3 different implementations of such function with performance comparison; as a bonus a solution to Problem 40 is given.",
      "author": "Gene Belitski",
      "link": "",
      "date": "2011-09-21T04:53:00.8870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences",
        "Project Euler"
      ]
    },
    {
      "id": 507,
      "title": " Read roman numerals",
      "comment": "Function that  parses a Roman-numeral string and return the number it represents.",
      "author": "Naveen",
      "link": "http://naveensrinivasan.com",
      "date": "2011-09-22T19:36:34.7070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "strings"
      ]
    },
    {
      "id": 508,
      "title": "Calculate taxes in Israel ",
      "comment": "updated to use a zip list and changed the bands to use ints",
      "author": "",
      "link": "",
      "date": "2011-09-22T21:42:10.0370000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "tax",
        "rate",
        "cummalitive"
      ]
    },
    {
      "id": 509,
      "title": "Stack Calc Monad",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-23T17:16:26.4700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 510,
      "title": "Pipeline vs composition performance",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-09-26T17:48:19.7730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 511,
      "title": "SHA256",
      "comment": "Calculates sha256 of the files passed in on the command line.  Usage: fsi sha256.fsx downloadedFile.zip",
      "author": "Tony Lee",
      "link": "",
      "date": "2011-09-26T21:38:52.5570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "crypto",
        "scripting",
        "hash"
      ]
    },
    {
      "id": 512,
      "title": "Yet another command-line parser",
      "comment": "The snippet shows a parser for command-line arguments supporting value lists for single commands. Calling with the following arguments:  \"Arg 1\" \"Arg 2\" -test \"Case 1\" \"Case 2\" -show -skip \"tag\" \r\nproduces the following map:  map [(\"\", seq [\"Arg 1\"; \"Arg 2\"]); (\"show\", seq []); (\"skip\", seq [\"tag\"]);(\"test\", seq [\"Case 1\"; \"Case 2\"])] which can be used to find what data have been sent along with different commands. Calling with the following: \"Arg 1\" \"Arg 2\" /test=\"Case 1\" \"Case 2\" --show /skip:tag produces the same result.",
      "author": "Gennady Loskutov",
      "link": "",
      "date": "2011-09-29T13:01:57.8530000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "command-line",
        "Seq",
        "parsing"
      ]
    },
    {
      "id": 513,
      "title": "Write roman numerals",
      "comment": "Just a pendant to Naveen's readromannumerals; takes an int and produces a roman numeral string",
      "author": "Jonas Avelin",
      "link": "",
      "date": "2011-09-29T19:28:23.2470000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "strings"
      ]
    },
    {
      "id": 514,
      "title": "Clojure-like lambda function syntax",
      "comment": "This snippet implements a Clojure-like lambda function syntax using Code Quotations. However, this implementation is slow and, moreover, not type-safe. So I'm looking for a way to solve the issues.",
      "author": "einblicker",
      "link": "http://d.hatena.ne.jp/einblicker/",
      "date": "2011-09-30T15:12:19.9730000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "quotations"
      ]
    },
    {
      "id": 515,
      "title": "Logging",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-01T14:10:10.3930000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 516,
      "title": "RSK algorithm",
      "comment": "Implements a bijective mapping between permutations and pairs of standard Young tableaux, both having the same shape.\r\nhttp://en.wikipedia.org/wiki/Robinson%E2%80%93Schensted_correspondence",
      "author": "Ademar Gonzalez",
      "link": "http://ademar.name",
      "date": "2011-10-01T14:31:05.2330000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "Mathematics",
        "algorithm",
        "Young tableaux",
        "RSK",
        "combinatorics"
      ]
    },
    {
      "id": 517,
      "title": "Tree traverse & compare",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-05T21:20:12.3930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 518,
      "title": "Twitter Stream API",
      "comment": "Twitter now provides a streaming API which can be used to obtain a continuous stream of tweets on any set of topics, locations, etc., in real time. Read the full details here.\r\n\r\nIt would be nice to convert this stream into an F# sequence so that it can be treated just as any other sequence if F#. This provides “composability”; separation of the generation of a sequence from its consumption.\r\n\r\nHere is a snippet that does that.",
      "author": "Faisal Waris",
      "link": "http://fwaris.wordpress.com/2011/10/06/turning-a-continuous-twitter-stream-into-a-sequence-using-seq-unfold/",
      "date": "2011-10-07T15:01:04.5730000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Twitter",
        "Stream API",
        "Seq.unfold"
      ]
    },
    {
      "id": 519,
      "title": "Test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-12T13:42:23.7030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 520,
      "title": "Monadic Retry",
      "comment": "A Monad for composing computations with retry logic. (Useful when we work with Cloud Services)",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-10-12T16:46:29.0200000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Retry",
        "Monad",
        "Builder"
      ]
    },
    {
      "id": 521,
      "title": "RateLimitedMessage",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-13T16:01:06.0130000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 522,
      "title": "csproj-file parsing with Linq2Xml",
      "comment": "This program reads all *.csproj-files from a path and then uses Linq2Xml to show data about the projects.\r\n\r\nThis should be a good template for scripts to manage tons of c#-project files.\r\n\r\nF# and LINQ-to-XML is very powerful combination.\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium/",
      "date": "2011-10-14T21:33:24.8270000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "linq-to-xml",
        "csproj",
        "project",
        "XLinq",
        "XML"
      ]
    },
    {
      "id": 523,
      "title": "Incorrect implementation, correct theory of cracking",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-15T02:06:39.6970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 524,
      "title": "Async Wait Operation",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-15T13:56:04.0900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 525,
      "title": "Assembly signature generation for MSBuild",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-16T09:58:11.7400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 526,
      "title": "Times Table game",
      "comment": "Simple times table console based game.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-10-16T19:50:18.7300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Console",
        "Game"
      ]
    },
    {
      "id": 527,
      "title": "Longest Increasing Sub Seq  ",
      "comment": "Find the longest consecutive sub-sequence of increasing numbers.",
      "author": "Naveen",
      "link": "http://naveensrinivasan.com",
      "date": "2011-10-17T20:30:01.6730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "puzzle"
      ]
    },
    {
      "id": 528,
      "title": "float double math",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-17T23:00:01.4330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 529,
      "title": "Async.Choose operation",
      "comment": "Non-deterministic choice operation for F# asynchronous workflows - creates a workflow that returns the result of one of two asynchronous workflows, depending on which completes first. (The other workflow is not cancelled.)",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-10-18T01:30:30.2470000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "asynchronous workflows",
        "non-determinism",
        "choice"
      ]
    },
    {
      "id": 530,
      "title": "JSON Parser",
      "comment": "JSON Parser using Regular Expressions & Active Patterns (just for fun).",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-10-19T22:20:48.1370000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "JSON",
        "Serialization"
      ]
    },
    {
      "id": 531,
      "title": "CRC16",
      "comment": "simple CRC16",
      "author": "nCdy",
      "link": "http://ncdy.org/",
      "date": "2011-10-21T08:52:24.3730000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "crc"
      ]
    },
    {
      "id": 532,
      "title": "String to Int and String",
      "comment": "Regex String and Int, e g : \"qwe123\" -> \"qwe\" and 123, \"qwe\" -> \"qwe\", 123 -> 123",
      "author": "nCdy",
      "link": "http://nCdy.org/",
      "date": "2011-10-21T09:02:05.2470000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "string Regex"
      ]
    },
    {
      "id": 533,
      "title": "Auto-Properties",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-22T03:07:12.3270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 534,
      "title": "Lazy variable",
      "comment": "When we need lazy evaluation, we use the Lazy<'T>.\r\nHowever, the Lazy<'T> must evaluate explicitly.\r\nThis example enables implicit evaluation(call-by-need).",
      "author": "Nobuhisa",
      "link": "http://d.hatena.ne.jp/Nobuhisa/",
      "date": "2011-10-22T16:48:10.4430000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lazy"
      ]
    },
    {
      "id": 536,
      "title": "Simple Reactive Extensions Example",
      "comment": "Subject is a class that implements both IObservable<'T> and IObserver<'T>\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.facebook.com/pages/The-Greater-Helsinki-Area-F-User-Group/150548908311547",
      "date": "2011-10-22T22:43:00.0000000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Rx-Interfaces",
        "Rx-Core",
        "Rx-Linq"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "Rx",
        "reactive"
      ]
    },
    {
      "id": 537,
      "title": "async clip",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-24T09:31:29.9070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 538,
      "title": "async clip",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-24T09:31:51.5630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 539,
      "title": "pipeline clip",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-10-24T09:44:31.9400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 540,
      "title": "Simple timed-expiry cache",
      "comment": "Basic thread-safe timed-expiry cache, implemented as a MailboxProcessor.",
      "author": "Yusuf Motara",
      "link": "",
      "date": "2011-10-25T04:45:59.8830000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "MailboxProcessor",
        "cache"
      ]
    },
    {
      "id": 541,
      "title": "Compute CC.Net build statistics",
      "comment": "Written against CruiseControl.NET v1.5. Queries a CruiseControl.NET server for a project list and then computes min, max, average, and standard deviation of the build durations based on the statistics.csv CC.NET maintains.",
      "author": "Matt Wilson",
      "link": "",
      "date": "2011-10-28T17:38:27.2870000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "cruisecontrol",
        "io",
        "build",
        "cc.net",
        "math"
      ]
    },
    {
      "id": 542,
      "title": "ipv4 conversion snippet",
      "comment": "ipv4 conversion snippet, updated based on current version, changed a lot to make it a bit more .NETish",
      "author": "david klein",
      "link": "http://negativeack.blogspot.com/",
      "date": "2011-11-01T04:42:14.9300000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "ipv4",
        "bitwise",
        "map"
      ]
    },
    {
      "id": 543,
      "title": "F#-friendly SocketAsyncEventArgs",
      "comment": "The name is a bit trying, but the overall callback approach greatly simplifies the mechanism for calling and handling the System.Net.Sockets.Socket Async methods.",
      "author": "Ryan Riley",
      "link": "http://github.com/fracture-io/fracture",
      "date": "2011-11-01T19:34:33.3600000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "network",
        "sockets",
        "fracture",
        "async",
        "SocketAsyncEventArgs"
      ]
    },
    {
      "id": 544,
      "title": "Calculate PI number",
      "comment": "PI number calculation based on the wikipedia page(http://en.wikipedia.org/wiki/Pi#cite_note-59).\r\nI used Newton's , Machine's and Ramanujan's formula.\r\n(updated: line 21: Seq.take => Seq.truncate)",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2011-11-02T07:30:36.0000000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Mathematics"
      ]
    },
    {
      "id": 545,
      "title": "A fast sieve of Eratosthenes",
      "comment": "A prime Eratosthenes' sieve, using a bit array and sieving only odd composites to conserve memory and keep things fast.",
      "author": "Arjen Kopinga",
      "link": "",
      "date": "2011-11-02T09:28:14.2300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "primes",
        "sieve",
        "Eratosthenes",
        "Algorithms"
      ]
    },
    {
      "id": 546,
      "title": "Folding over prime factors",
      "comment": "Let's have some fun with higher order functions and instead of folding over a list, fold over the prime factors of a number. It can be optimized further by dividing out real primes instead of numbers of the form 6k+/-1, but it's not embarrassingly slow.",
      "author": "Arjen Kopinga",
      "link": "",
      "date": "2011-11-02T09:51:47.4170000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Algorithms",
        "primes",
        "factorize",
        "fold"
      ]
    },
    {
      "id": 547,
      "title": "Memoization for dynamic programming",
      "comment": "The snippet shows how to implement reusable memoization function and how to use it to implement efficient Fibonacci number generator using dynamic programming.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-11-02T22:00:44.9300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "memoization",
        "dynamic programming",
        "fibonacci"
      ]
    },
    {
      "id": 548,
      "title": "Another tennis implementation",
      "comment": "Simple game of tennis... refactored after reading Richard Minerich blog post @http://richardminerich.com/2011/02/the-road-to-functional-programming-in-f-from-imperative-to-computation-expressions/",
      "author": "Colin Bull",
      "link": "",
      "date": "2011-11-03T12:32:32.9730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "tennis",
        "computational workflows"
      ]
    },
    {
      "id": 549,
      "title": "Tennis Kata",
      "comment": "Another solution to the Tennis Kata, to score a tennis game.",
      "author": "Don Syme",
      "link": "",
      "date": "2011-11-03T13:19:42.7430000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Tennis; Sample; Functional Data; Kata"
      ]
    },
    {
      "id": 550,
      "title": "Parser Monad and Combinators",
      "comment": "Simple Parser Monad implementation based on the paper \"Monadic Parsing in Haskel\" by Graham Hutton and Erik Meijer. Code discussion available here: http://blogs.msdn.com/b/fzandona/archive/2011/10/17/parsing-json-the-fun-way-monadic-parsers-records-and-type-providers-part-2.aspx",
      "author": "fzandona",
      "link": "",
      "date": "2011-11-03T17:03:11.6030000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Parser Monad; Monad"
      ]
    },
    {
      "id": 551,
      "title": "JSON Parser Monad",
      "comment": "Simple JSON parser implemented using the Parser Monad. Code discussion here: http://blogs.msdn.com/b/fzandona/archive/2011/11/02/parsing-json-the-fun-way-json-parser-monad-part-3.aspx",
      "author": "fzandona",
      "link": "",
      "date": "2011-11-03T17:04:24.1870000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "JSON; Parser Monad"
      ]
    },
    {
      "id": 552,
      "title": "Yet another Tennis Kata",
      "comment": "It's a joke one liner implementation of Tennis Kata.Please see this code not seriously. ",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2011-11-04T03:13:28.8500000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Tennis",
        "Kata",
        "Golf"
      ]
    },
    {
      "id": 553,
      "title": "Caching agent",
      "comment": "Agent that keeps a cache of web pages that were downloaded previously. The agent handles messages to add and get data as well as message to clear the cache.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-11-04T11:42:10.9730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async",
        "asynchronous",
        "agent",
        "caching",
        "http"
      ]
    },
    {
      "id": 554,
      "title": "Agent Registry",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-04T12:46:01.0300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 555,
      "title": "Copy-set an array",
      "comment": "Copy an array into a new one, changing the value at index 42 to 123. Uses \"function\" and pattern patching.",
      "author": "Johann Deneux",
      "link": "",
      "date": "2011-11-05T11:23:55.9270000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "array"
      ]
    },
    {
      "id": 556,
      "title": "The dining philosophers",
      "comment": "The dining philosophers problem implemented using a waiter.",
      "author": "Alex Muscar",
      "link": "",
      "date": "2011-11-08T19:19:26.6530000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "MailboxProcessor",
        "message passing",
        "Concurrency",
        "async"
      ]
    },
    {
      "id": 557,
      "title": "Convert the number of indentation spaces in a sourcecode.",
      "comment": "This small script converts continuous 4 spaces to 2 spaces by using Regex.\r\nIt gets the source code from a clip board text and save it to clip board.\r\nSince this program doesn't parse the source code, conversion is not perfect.\r\nBut writing script which interacts with clipboard is so easy, you can automate your trivial coding work with a small effort.\r\nUsing F#interactive with Clipboard is my favorite way of meta-programming.",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2011-11-09T07:06:56.5830000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Meta-Programming",
        "Scripting"
      ]
    },
    {
      "id": 558,
      "title": "Seq.groupAfter function",
      "comment": "This snippet is basically the same as http://fssnip.net/6A, except that the element whose predicate holds ends the previous group and the element after it starts a new one.\r\nThose two snippets (Seq.groupWhen, Seq.groupAfter) would be generally equivalent to the Haskell functions 'breakBefore' and 'breakAfter' from Data.List.Grouping.",
      "author": "Thorsten Meinecke",
      "link": "",
      "date": "2011-11-09T17:07:53.1670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequences",
        "seq",
        "grouping",
        "IEnumerator"
      ]
    },
    {
      "id": 559,
      "title": "Dont know if it's right",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-10T01:22:37.3700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 560,
      "title": "Concatenate two strings together",
      "comment": "Concatenates two strings together: ML or OCaml style",
      "author": "Cameron Frederick",
      "link": "",
      "date": "2011-11-10T18:49:01.8400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "string",
        "strings",
        "concatenate"
      ]
    },
    {
      "id": 561,
      "title": "Simple JS Calculator",
      "comment": "Simple calculator application for adding numbers, compiles to JavaScript via Pit (v0.1) (http://pitfw.posterous.com). \r\nRun: http://trelford.com/PitCalculatorApp.htm",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-11-11T18:56:37.9030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "JS",
        "Pit"
      ]
    },
    {
      "id": 562,
      "title": "LINQ to SQLite",
      "comment": "Simplest possible sample code for accessing an in-process SQLite database file using LINQ\r\nThe code does not use a dbml file for the mapping, but an attribute enriched type.\r\n(F# script, .Net 4.0, F# 2.0)",
      "author": "Dirk Devriendt",
      "link": "",
      "date": "2011-11-11T21:15:14.1870000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Data",
        "SQLite",
        "SQL",
        "LINQ"
      ]
    },
    {
      "id": 563,
      "title": "Journey book (domain model)",
      "comment": "...",
      "author": "",
      "link": "",
      "date": "2011-11-12T14:35:54.2530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "none"
      ]
    },
    {
      "id": 564,
      "title": "Semi-Coroutine",
      "comment": "This snippet implements a semi-coroutine by continuations.",
      "author": "einblicker",
      "link": "http://d.hatena.ne.jp/einblicker/",
      "date": "2011-11-13T07:19:05.0030000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "continuations",
        "coroutine"
      ]
    },
    {
      "id": 565,
      "title": "Template pattern",
      "comment": "Template pattern is a behavior-based pattern. Realized the importance of high order function, this is a way to use high order function. Still keep the type structure to organize my code.",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-11-14T01:24:02.2270000",
      "likes": 38,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns"
      ]
    },
    {
      "id": 566,
      "title": "Non-deterministic computation builder",
      "comment": "Computation builder for writing non-deterministic computations.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-11-16T19:26:09.8570000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "monad",
        "computation builder",
        "workflow",
        "non-determinism"
      ]
    },
    {
      "id": 567,
      "title": "Human Date",
      "comment": "Datetime Readable for Humans, Ported from Clojure https://github.com/pmn/noir-messageboard/blob/master/src/noir_messageboard/utils/utils.clj",
      "author": "christophd",
      "link": "",
      "date": "2011-11-17T09:34:19.9700000",
      "likes": 25,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "datetime",
        "format",
        "sprintf"
      ]
    },
    {
      "id": 568,
      "title": "University enrollment (CZE vs. EU)",
      "comment": "Using World Bank type provider and FSharpChart to show average university enrollment in Czech Republic, European Union and OECD members.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2011-11-18T15:21:01.5130000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "type provider",
        "world bank",
        "fsharpchart",
        "charting"
      ]
    },
    {
      "id": 569,
      "title": "Times Table JS game",
      "comment": "Simple times table browser based game., compiles to JavaScript via Pit (v0.1) (http://pitfw.posterous.com). Run: http://trelford.com/SevenSixes.htm",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-11-19T11:19:08.0130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "JS",
        "Pit"
      ]
    },
    {
      "id": 570,
      "title": "test code for the serializer",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-19T11:51:06.7770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 571,
      "title": "worley-noise",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-20T21:32:47.4670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 572,
      "title": "better worley noise",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-20T21:39:30.5370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 573,
      "title": "failed perlin noise attempt",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-21T21:15:00.6370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 574,
      "title": "Mini IoC Container",
      "comment": "Minimal Inversion of Control (IoC) Container for Dependency Injection (DI) in under 100 lines of code. Implements the 3 Rs of DI: Register, Resolve, Release.\r\nNote: missing thread safety and fluent interface.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-11-22T07:13:32.0770000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "NUnit"
      ],
      "source": "",
      "versions": 7,
      "tags": [
        "DI",
        "IoC",
        "Dependency Injection",
        "Container"
      ]
    },
    {
      "id": 575,
      "title": "Bi directional map",
      "comment": "Bi directional map to implement toString and fromString function for descriminated unions.",
      "author": "nagat01",
      "link": "",
      "date": "2011-11-22T12:11:14.9170000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Maps"
      ]
    },
    {
      "id": 576,
      "title": "perlin noise",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-22T18:46:37.6830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 577,
      "title": "foo",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-23T05:29:57.9500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 578,
      "title": "scheduler",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-23T22:53:01.0100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 579,
      "title": "toString and fromString for discriminated unions",
      "comment": "General toString and fromString for discriminated unions using FSharp.Reflection",
      "author": "Jonas Avelin",
      "link": "",
      "date": "2011-11-24T08:46:37.2170000",
      "likes": 23,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "discriminated union",
        "string"
      ]
    },
    {
      "id": 580,
      "title": "Make a chain of functions",
      "comment": "Function composition can be done by using >> operator. The snippet at  http://fssnip.net/S is a wonderful sample. But that version generates a function which is not easy when you want to debug. This version is to use pipeline (|>) operator.",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2011-11-28T03:07:52.3900000",
      "likes": 27,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Compose",
        "functions"
      ]
    },
    {
      "id": 581,
      "title": "LandOfF",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-28T16:07:05.6970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 582,
      "title": "vortex level 0 over the wire",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-30T06:51:51.8270000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 583,
      "title": "F# syntax for creating HTML/XML",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-11-30T19:11:36.6730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 584,
      "title": "Building a WPF application in functional way",
      "comment": "I started to write pure F# + WPF application in about half a year ago.\r\nToday, I found a good way to compose WPF controls with dependent values.\r\nIt's only writing a dependency object type as a class and give it to constructors of GUI controls.\r\nIn this snippet \"Volume\",\"ColorVolume\" and \"ShapeContainer\" has no properties.\r\nBut works as a View which represents internal Model and allows users to change internal data.\r\nYou only need calling a constructor of them.\r\nIt means that you can compose GUI controls and it's functionality as a immutable data structure.\r\n(Update 2011/12/02 8:33:00(UTC+09:00) : Removed some user defined operators and renamed a type similar to DependencyObject in this snippet Reactor to SharedValue.)\r\n(Update 2011/12/02 9:04:01(UTC+09:00) : renamed some variables..)",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2011-12-01T12:42:45.5130000",
      "likes": 14,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "WPF",
        "GUI",
        "reactive"
      ]
    },
    {
      "id": 585,
      "title": "Forking console output to a string",
      "comment": "Higher order function 'withOutStr' to fork console output to a string. The function temporarily redirects Console.Out to a custom TextWriter",
      "author": "Jonas Avelin",
      "link": "",
      "date": "2011-12-01T13:26:27.2030000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "string",
        "Console"
      ]
    },
    {
      "id": 586,
      "title": "Serial Port Reader",
      "comment": "Code to drive a serial port.\r\n\r\nTrivial application to read a paper tape to a file from a GNT4604 paper tape reader attached to serial port COM3:\r\n",
      "author": "Andrew Herbert",
      "link": "http://www.herbertfamily.org.uk/andrew",
      "date": "2011-12-03T09:18:29.2230000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Ports",
        "serial",
        "paper tape"
      ]
    },
    {
      "id": 587,
      "title": "Mixed number",
      "comment": "A function to calculate 'mixed numbers' - eg. 1 1/8. (With fix to reduce the fractional part to its lowest terms)",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2011-12-08T21:48:54.1300000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "fractions",
        "mixed numbers"
      ]
    },
    {
      "id": 588,
      "title": "Union Editor for WinForms PropertyGrid",
      "comment": "A quick-and-dirty editor for discriminated unions in a property grid.  I use this for editing trees of F# records and unions.  Note that any records must have a \"Default\" static property which returns a default instance.",
      "author": "Rick Minerich",
      "link": "richardminerich.com",
      "date": "2011-12-08T22:20:40.2100000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WinForms",
        "PropertyGrid",
        "Discriminated Unions"
      ]
    },
    {
      "id": 589,
      "title": "Polyvariadic fixpoint",
      "comment": "Polyvariadic fixpoint combinator in F# (heavily inspired by Haskell)",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2011-12-09T14:42:03.5700000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fixedpoint",
        "Haskell",
        "Laziness"
      ]
    },
    {
      "id": 590,
      "title": "Starbucks",
      "comment": "Simple DSL for describing cups of Starbucks coffee and computing prices (in dollars).",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-12-11T18:39:35.2270000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "DSL"
      ]
    },
    {
      "id": 591,
      "title": "Light XML DSL",
      "comment": "A light domain specific language for declaring xml in F# as code.",
      "author": "Huw Simpson",
      "link": "",
      "date": "2011-12-14T12:50:55.7900000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "XML",
        "DSL",
        "LinqToXml"
      ]
    },
    {
      "id": 592,
      "title": "Between operators",
      "comment": "A couple of operators for 'between, inclusive' and 'between, exclusive'.",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2011-12-15T13:21:14.4570000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "operator overloading"
      ]
    },
    {
      "id": 593,
      "title": "DSL for financial contracts",
      "comment": "Simple domain-specific language (DSL) for describing financial contracts in F#. A contract is represented using a discriminated union. Evaluating a contract gives the orders that may happen at a given date.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/blog",
      "date": "2011-12-16T10:33:00.7070000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "dsl",
        "domain-specific language",
        "discriminated union",
        "financial"
      ]
    },
    {
      "id": 594,
      "title": "Active pattern to extract HttpStatusCode from WebException",
      "comment": "A simple active pattern that allows you to match WebExceptions by HttpStatusCode. I find it useful for quick scripts where I only need WebClient and don't have to get involved with WebRequest etc.",
      "author": "Leaf Garland",
      "link": "",
      "date": "2011-12-16T18:18:47.6170000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "active pattern",
        "exception",
        "WebClient"
      ]
    },
    {
      "id": 595,
      "title": "Simple typeclass implementation",
      "comment": "I learned how to implement this by reading this great good project http://code.google.com/p/fsharp-typeclasses/ \r\nBut I can't understand why the project needs ternary operator.\r\nI used binary operator and seems it's okay.\r\n",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2011-12-17T13:21:18.3630000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Monad",
        "Applicative",
        "Typeclass"
      ]
    },
    {
      "id": 596,
      "title": "Random Subset",
      "comment": "A function that takes a random subset from a seq<'T>.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2011-12-17T13:54:06.4970000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "List",
        "Array",
        "Seq",
        "Recursion",
        "Random",
        "Collections"
      ]
    },
    {
      "id": 597,
      "title": "Tidy up text using composed functions",
      "comment": "Some simple functions to tidy up text and quote it, so that it's suitable to go into a CSV.",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2011-12-17T15:28:03.0030000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "composition operator; text; CSV"
      ]
    },
    {
      "id": 598,
      "title": "Tidy up text using composed functions",
      "comment": "Some simple functions to tidy up text and quote it, so that it's suitable to go into a CSV.",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2011-12-17T15:28:04.1270000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "composition operator; text; CSV"
      ]
    },
    {
      "id": 599,
      "title": "Observable Async Subject",
      "comment": "Simple Async Observable Subject<'T> based on MailboxProcessor. Type declaration is more ML like, but the idea is represented in a simple way!",
      "author": "Fahad",
      "link": "",
      "date": "2011-12-19T19:08:06.7330000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Observable",
        "Rx"
      ]
    },
    {
      "id": 600,
      "title": "Enum -> MVC3 SelectList",
      "comment": "Converts an Enum to a Selectlist which can be used by a @Html.DropDownList ",
      "author": "christophd",
      "link": "",
      "date": "2011-12-20T13:46:25.0330000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "mvc3",
        "mvc",
        "enum"
      ]
    },
    {
      "id": 601,
      "title": "XNA's Vector3 with units of measure",
      "comment": "A vector type with units of measure built on top of XNA's Vector3.\r\nNot complete, the point is mainly to show how to use generic units of measure to adapt an existing type.",
      "author": "Johann Deneux",
      "link": "",
      "date": "2011-12-22T17:17:25.7430000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "math",
        "xna",
        "units of measure"
      ]
    },
    {
      "id": 602,
      "title": "Using units of measure for safe array access",
      "comment": "A typical problem when working with arrays and indices is that it's easy to access an array with the wrong index. Units of measure in F# can be applied to integers, which makes it possible to abuse them to prevent this kind of error.",
      "author": "Johann Deneux",
      "link": "",
      "date": "2011-12-22T18:26:33.9100000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "array",
        "units of measure"
      ]
    },
    {
      "id": 603,
      "title": "Calculate left margins",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-12-28T13:50:51.5700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 604,
      "title": "Calculate left margins",
      "comment": "Take some text and work out where the left margins are, returning the most common margin settings first.  Useful for processing somewhat messy text items like movie scripts.\r\n\r\nLeft margins are defined by leading spaces.  Tabs must be expanded before calling.",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2011-12-28T13:53:48.5530000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "margins text"
      ]
    },
    {
      "id": 605,
      "title": "Possible bug",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2011-12-30T02:55:11.7430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 606,
      "title": "Fast inverse square root",
      "comment": "This is an implementation of the famous 'magic number' method of rapidly calculating (inverse) square roots.  (See http://en.wikipedia.org/wiki/Fast_inverse_square_root.)\r\n\r\nIn practice, this version is no faster in F# than using 1./sqrt(x).  I've posted it as an example of how you can get down-and-dirty with the bits in F# if you need to.\r\n\r\n",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2011-12-30T08:59:26.8070000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "fast inverse square root; bitwise"
      ]
    },
    {
      "id": 607,
      "title": "Drag move for GUI controls",
      "comment": "This script opens a window with a red rectangle which is moved by dragging.\r\nI like writing interactive GUI without MVVM, FRP and Markup language.",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2011-12-31T06:32:14.5900000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WPF",
        "GUI",
        "drag and drop"
      ]
    },
    {
      "id": 608,
      "title": "Baccarat",
      "comment": "Shuffles a deck of cards, deals 2 hands applying punto banco rules before declaring a winner or a tie.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2011-12-31T15:11:34.3200000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "card",
        "game"
      ]
    },
    {
      "id": 609,
      "title": "Point of Sale",
      "comment": "10 line Point of Sale (POS) application takes barcodes from a USB barcode scanner or keyboard adding matching products. Entering an empty string completes the action and gives the total.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-01-02T15:30:42.8570000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "POS"
      ]
    },
    {
      "id": 610,
      "title": "Heterogeneous container",
      "comment": "OCaml original here : http://eigenclass.org/R2/writings/heterogeneous-containers-in-ocaml",
      "author": "Ademar Gonzalez",
      "link": "http://ademar.name",
      "date": "2012-01-06T01:56:15.3070000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "types",
        "universal",
        "heterogeneous",
        "container"
      ]
    },
    {
      "id": 611,
      "title": "Temp",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-01-06T06:50:45.5170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 612,
      "title": "F# counter agent",
      "comment": "The snippet shows a simple F# agent that calculates average from the received values. It supports one message for adding numbers to the statistics and one for resetting the state. Moreover, the agent limits the processing rate to 1 message per second.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/blog",
      "date": "2012-01-06T23:39:14.0100000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async",
        "asynchronous workflows",
        "agent",
        "mailboxprocessor"
      ]
    },
    {
      "id": 613,
      "title": "Transform expressions into Excel formulae",
      "comment": "Sometimes it is extremely useful to check some calculations with Excel. The snippet shows how F# expressions can be transformed into Excel formulae. The data is exported together with the formulae, e.g. a, b and sum function as input sets A1's value to a, B1's to b and C1's formula to \"=$A$1+$B$1\"",
      "author": "Natallie Baikevich",
      "link": "",
      "date": "2012-01-07T20:48:35.0870000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "quotations",
        "excel",
        "reflection"
      ]
    },
    {
      "id": 614,
      "title": "WMI F#",
      "comment": "Determining If You Are Running the Checked Build p.48 Windows Internals 5th Edition.",
      "author": "David Klein",
      "link": "",
      "date": "2012-01-09T03:20:26.0000000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WMI",
        "ManagementObject"
      ]
    },
    {
      "id": 615,
      "title": "PacMan Maze",
      "comment": "PacMan maze view runnable inside TryFSharp.org",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-01-09T08:22:26.6770000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Game"
      ]
    },
    {
      "id": 616,
      "title": "n-ary Seq.map ",
      "comment": "A pattern for creating n-ary Seq.map functions.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-01-09T15:14:13.8400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Seq",
        "map",
        "zipWith",
        "Applicative Functor"
      ]
    },
    {
      "id": 617,
      "title": "n-ary Seq.map (Numerals)",
      "comment": "A pattern for creating n-ary Seq.map functions, based on numerals.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-01-11T13:01:04.3000000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Seq",
        "map",
        "zipWith",
        "Applicative Functor"
      ]
    },
    {
      "id": 618,
      "title": "F# async mailprocessor",
      "comment": "F# koodia async käsittelyyn",
      "author": "Not important",
      "link": "",
      "date": "2012-01-11T18:54:14.0630000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async mailprocessor"
      ]
    },
    {
      "id": 619,
      "title": "paraller exec",
      "comment": "Async & paraller",
      "author": "Not important",
      "link": "",
      "date": "2012-01-11T20:26:01.9370000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async paraller"
      ]
    },
    {
      "id": 620,
      "title": "BrainFuck ",
      "comment": "A Small BrainFuck Interpretor (~50 lines). Probably not very efficient only started learning F# a few days ago.",
      "author": "Adam Speight",
      "link": "http://www.dreamincode.net/forums/index.php?automodule=blog&blogid=217&",
      "date": "2012-01-12T13:36:33.4900000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "BrainFuck Interpretor"
      ]
    },
    {
      "id": 621,
      "title": "Risk Assignment in F#",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-01-13T02:23:33.1900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 622,
      "title": "Loading .fs files",
      "comment": "This script facilitates to load all the .fs files in the specified F# project in correct compilation order.",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2012-01-13T06:02:37.5630000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Scripting",
        "Input and Output",
        "Parsing"
      ]
    },
    {
      "id": 623,
      "title": "Fake ternary operator for creating arrows",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-01-13T19:39:18.2400000",
      "likes": 3,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 624,
      "title": "Nest items of a sequence",
      "comment": "A function that nests items of a sequence that do not match a specified predicate under the last item that matches the predicate. The input is a sequence of values and the result is a sequence of pairs where the second element is a list of nested items.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/blog",
      "date": "2012-01-17T01:28:16.0570000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequence",
        "list",
        "collections"
      ]
    },
    {
      "id": 625,
      "title": "Generate a repeating infinite sequence ",
      "comment": "A little function which generates an infinite sequence consisting of repeats of items from some shorter sequence.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-01-19T17:03:07.5970000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences"
      ]
    },
    {
      "id": 626,
      "title": "Tiny F# EDSL for creating system / hardware IDs on Windows using WMI classes",
      "comment": "A quick and reconfigurable way to create system or hardware IDs based on WMI Win32 classes for software licensing or similar purposes. (Perhaps a perfect fit for type providers in F# 3.0!)",
      "author": "Cetin Sert",
      "link": "http://portfusion.sourceforge.net",
      "date": "2012-01-20T15:48:10.7900000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 18,
      "tags": [
        "WMI",
        "Hardware ID",
        "license",
        "licensing",
        "key",
        "hardware",
        "security",
        "System.Management"
      ]
    },
    {
      "id": 627,
      "title": "Send HTTP POST request",
      "comment": "The snippet shows how to send HTTP POST request to a web page and download the generated HTML result. The POST data is encoded as a byte array and written to the request stream of HttpWebRequest.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/blog",
      "date": "2012-01-20T16:14:25.2030000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "net",
        "internet",
        "web",
        "http",
        "html",
        "webrequest"
      ]
    },
    {
      "id": 628,
      "title": "Circular Buffer",
      "comment": "A Circular, or Ring, Buffer that flattens incoming arrays and allows consumers to take arbitrary-sized chunks. Improvements and suggestions welcome. Fork my gist at https://gist.github.com/1648579.",
      "author": "Ryan Riley",
      "link": "https://gist.github.com/1648579",
      "date": "2012-01-21T05:47:56.0700000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "circular buffer",
        "data structure",
        "stream",
        "pipeline"
      ]
    },
    {
      "id": 629,
      "title": "StackOverflowCrawler",
      "comment": "Tries to find the best technologies from stackoverflow.\r\nDon't use too wide tags (with many thousand request) or firewall will block you!\r\n",
      "author": "",
      "link": "",
      "date": "2012-01-21T15:19:49.2530000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "webcrawling"
      ]
    },
    {
      "id": 630,
      "title": "Pong",
      "comment": "Pong video game runnable inside TryFSharp.org. Player 1 keys 'Q' - up, 'A' - down. Player 2 keys 'P' - up, 'L' - down.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-01-21T16:06:20.6630000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Silverlight",
        "Game",
        "Async"
      ]
    },
    {
      "id": 631,
      "title": "Async.Parallel2 and Async.Parallel3",
      "comment": "Async.Parallel2 and Async.Parallel3, for running three Async's in parallel as thread pool tasks. Alternative versions given which use Async.Parallel under the hood.",
      "author": "Don Syme",
      "link": "",
      "date": "2012-01-21T17:54:10.7830000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Async",
        "Parallel"
      ]
    },
    {
      "id": 632,
      "title": "Simple sql command helper",
      "comment": "Minimalist assistant to read data / execute database command.\r\n\r\n //I have question \r\n //How to Print the read value i.e.Customer.Id and Customer.Name\r\n //some sample regarding are available??\r\n //Link For convering c# code to f# would be helpful-reply me at ",
      "author": "S. Kasperovich",
      "link": "",
      "date": "2012-01-23T14:39:55.8700000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "Data",
        "Functions"
      ]
    },
    {
      "id": 633,
      "title": "fibbonaci ",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-01-25T18:13:08.5500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 634,
      "title": "Bananas in F#",
      "comment": "A pattern for programming with generic folds (catamorphisms). Based on the classic \"Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire\" (1991) (Meijer, Fokkinga,  Paterson).",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-01-25T18:26:58.4330000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Catamorphisms"
      ]
    },
    {
      "id": 635,
      "title": "Lab1",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-01-26T10:48:12.1370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 636,
      "title": "Peano constructs",
      "comment": "Here we define Peano arithmetic using F# abstract data types.",
      "author": "Daniil",
      "link": "",
      "date": "2012-01-27T16:44:24.9730000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "numbers",
        "types"
      ]
    },
    {
      "id": 637,
      "title": "Retail Domain",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-01-31T10:56:09.8100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 638,
      "title": "Async.Sleep with immediate cancellation ",
      "comment": "Implementation of Async.Sleep in f# 2.0 doesn't allow break it execution until the time elapsed. Here is the alternate implementation which support immediate cancellation. According to discussion http://stackoverflow.com/questions/9041491/is-there-any-reason-why-async-sleep-can-not-be-canceled-immediately .",
      "author": "Andrei Kolomentsev",
      "link": "",
      "date": "2012-01-31T23:52:12.2430000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "asynchronous",
        "sleep"
      ]
    },
    {
      "id": 639,
      "title": "Peter Henderson's picture language from SICP",
      "comment": "An implementation of (part of) Peter Henderson's picture language from the SICP book.",
      "author": "Jonas Avelin",
      "link": "",
      "date": "2012-02-03T20:07:01.8070000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "graphics"
      ]
    },
    {
      "id": 640,
      "title": "Auto-completion in any winforms text box",
      "comment": "The standard windows.forms text box supports auto-completion, but only for single-line text boxes.\r\nThe code below can be used to add auto-completion against a fixed set of words to any text box that inherits from TextBoxBase.\r\n",
      "author": "Johann Deneux",
      "link": "",
      "date": "2012-02-06T17:18:58.6430000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "auto-completion",
        "textbox",
        "winforms"
      ]
    },
    {
      "id": 641,
      "title": "Curve difference by sum-of-squares",
      "comment": "An operator to compare two curves by the sum-of-squares-of-differences method.",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2012-02-06T19:03:16.0670000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "curve operator fold fold2"
      ]
    },
    {
      "id": 642,
      "title": "Discrete Fréchet Distance",
      "comment": "Compute the Discrete Fréchet Distance between two arrays (which may be of different lengths).  Based on the 1994 algorithm by Thomas Eiter and Heikki Mannila.\r\n\r\nNot extensively tested, so use at your peril!\r\n\r\n(This version with some small fixes.)",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2012-02-08T21:25:13.1770000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Frechet distance",
        "curves",
        "math"
      ]
    },
    {
      "id": 643,
      "title": "Ninety-Nine F# Problems - Problems 1 - 10 - Lists",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T22:52:30.6930000",
      "likes": 17,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "lists"
      ]
    },
    {
      "id": 644,
      "title": "Ninety-Nine F# Problems - Problems 11 - 20 - List, continued]",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.\r\n",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T22:54:22.9030000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "lists"
      ]
    },
    {
      "id": 645,
      "title": "Ninety-Nine F# Problems - Problems 21 - 28 - Lists again",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T22:55:30.2330000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "lists"
      ]
    },
    {
      "id": 646,
      "title": "Ninety-Nine F# Problems - Problems 31 - 41 - Arithmetic]",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T22:57:04.8800000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "arithmetic"
      ]
    },
    {
      "id": 647,
      "title": "Ninety-Nine F# Problems - Problems 46 - 50 - Logic and Codes",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T22:58:56.4830000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "logic",
        "codes"
      ]
    },
    {
      "id": 648,
      "title": "Ninety-Nine F# Problems - Problems 54 - 60 - Binary trees",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T23:02:28.0700000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "trees"
      ]
    },
    {
      "id": 649,
      "title": "Ninety-Nine F# Problems - Problems 61 - 69 - Binary trees",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T23:05:13.7430000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "trees"
      ]
    },
    {
      "id": 650,
      "title": "Ninety-Nine F# Problems - Problems 70 - 73 - Multiway Trees",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T23:08:43.1100000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "trees"
      ]
    },
    {
      "id": 651,
      "title": "Ninety-Nine F# Problems - Problems 80 - 89 - Graphs",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T23:22:11.3670000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#",
        "graphs"
      ]
    },
    {
      "id": 652,
      "title": "Ninety-Nine F# Problems - Problems 90 - 94 - Miscellaneous problems]",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T23:25:22.6170000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#"
      ]
    },
    {
      "id": 653,
      "title": "Ninety-Nine F# Problems - Problems 95 - 99 - Miscellaneous problems]",
      "comment": "These are F# solutions of Ninety-Nine Haskell Problems which are themselves translations of Ninety-Nine Lisp Problems and Ninety-Nine Prolog Problems. The solutions are hidden so you can try to solve them yourself.",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-02-08T23:26:35.3930000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Ninety-Nine F# Problems",
        "tutorial",
        "F#"
      ]
    },
    {
      "id": 654,
      "title": "md5 cracking",
      "comment": "Simple md5 cracker, example of using permutations and pseq rather than cracking.",
      "author": "david klein",
      "link": "https://twitter.com/#!/davidkl_",
      "date": "2012-02-09T08:57:03.4230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "md5 cracking",
        "pseq"
      ]
    },
    {
      "id": 655,
      "title": "deserialising php's serialise",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-02-09T10:20:07.1400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 656,
      "title": "Frequency Tables, Shift Cipher",
      "comment": "Solving Ceasar shfit with frequency tables.",
      "author": "David Klein",
      "link": "https://twitter.com/#!/davidkl_",
      "date": "2012-02-10T11:41:03.8730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "classic ciphers",
        "frequency table"
      ]
    },
    {
      "id": 657,
      "title": "Stackoverflow API script",
      "comment": "A script that consumes the Stackoverflow API in a dynamic fashion",
      "author": "Mauricio Scheffer",
      "link": "http://bugsquash.blogspot.com",
      "date": "2012-02-10T23:57:58.5970000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dynamic",
        "api",
        "json",
        "web"
      ]
    },
    {
      "id": 658,
      "title": "generating partions of a number",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-02-14T18:23:43.6700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 659,
      "title": "Matrix",
      "comment": "Matrix",
      "author": "Matrix",
      "link": "",
      "date": "2012-02-14T20:46:59.3730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Matrix"
      ]
    },
    {
      "id": 660,
      "title": "TicTacToe(Joinads Example)",
      "comment": "TicTacToe game simulator implemented by using Joinads(http://tomasp.net/blog/joinads-async-prog.aspx).\r\nGame logic in this snippet was simplified so nicely by using Joinads.\r\nYou can run this snippet on Try Joinads (http://tryjoinads.org/).",
      "author": "nagat01",
      "link": "http://d.hatena.ne.jp/mclh46/",
      "date": "2012-02-15T09:45:36.3000000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Game",
        "Async",
        "Joinads"
      ]
    },
    {
      "id": 661,
      "title": "Save attachments from exchange inbox",
      "comment": "Save the attachments of the first 10 mails to disk",
      "author": "Joeri Belis",
      "link": "",
      "date": "2012-02-15T15:23:21.0870000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        ".NET Libraries",
        "Exchange web service",
        "ews"
      ]
    },
    {
      "id": 662,
      "title": "Lecture",
      "comment": "",
      "author": "Lecture",
      "link": "",
      "date": "2012-02-15T19:00:41.2800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Lecture"
      ]
    },
    {
      "id": 663,
      "title": "Team Foundation Server: Check Out a file",
      "comment": "Team Foundation Server (TFS): Check Out a file.\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium",
      "date": "2012-02-16T11:33:54.5630000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "TFS"
      ]
    },
    {
      "id": 664,
      "title": "read CSV with .net FileHelpers library",
      "comment": "example to use the open source .net FileHelpers library to read a CSV ( http://filehelpers.sourceforge.net/ ). \r\n\r\ncsv example with no exception error\r\nfield1,field2,field3\r\n123,123,aaa\r\n456,123,aaa\r\n\r\nexample with exception where the functions returns an empty array\r\nfield1,field2,field3\r\n123,aaa,aaa\r\n456,123,aaa\r\n\r\n",
      "author": "Joeri Belis",
      "link": "http://filehelpers.sourceforge.net/",
      "date": "2012-02-17T10:27:26.5200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FileHelpers"
      ],
      "source": "",
      "versions": 3,
      "tags": [
        ".net library"
      ]
    },
    {
      "id": 665,
      "title": "WrapPanel",
      "comment": "Positions child elements in sequential position from left to right, breaking content to the next line at the edge of the containing box. Tryable at http://tryfsharp.org",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-02-18T13:07:11.5600000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Silverlight",
        "Control"
      ]
    },
    {
      "id": 666,
      "title": "Factoring out FSharpChart",
      "comment": "Using FSharpChart control.\r\nJust call Charting.Plot() to chart series or collections of series. No need to create forms, etc.",
      "author": "Boris Kogan",
      "link": "http://viralfsharp.com",
      "date": "2012-02-18T22:37:49.4000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "FSharpChart",
        "Reflection",
        "charting",
        "active patterns"
      ]
    },
    {
      "id": 667,
      "title": "Dining philosophers (Joinads)",
      "comment": "A simple and declarative solution based on Joinads.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-02-19T18:14:42.5730000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Joinads"
      ]
    },
    {
      "id": 668,
      "title": "Transform a sequence into a sequence-of-sequences",
      "comment": "Take a sequence and make it into a sequence of sequences, where the inner sequences are of a specified length.  (The last inner sequence may be shorter.)\r\n\r\nUseful, for instance, for rending sequences into two-way HTML grids.",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2012-02-20T21:14:36.1600000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences",
        "grouping"
      ]
    },
    {
      "id": 669,
      "title": "Take a sample of a sequence",
      "comment": "Take a sample of a specified length from a sequence.  The sample is guaranteed to be of the requested size (unless there are too few elements in the original sequence).  Sample items will be taken at equal intervals.  (This version with some simplifications and tidy-ups.)",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2012-02-20T21:32:47.5900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Sequences"
      ]
    },
    {
      "id": 670,
      "title": "csproj-file parsing with Linq2Xml - part 2",
      "comment": "This program reads all *.csproj-files from a path and then uses Linq2Xml to show or modify data about the projects. This should be a good template for scripts to manage tons of c#-project files. F# and LINQ-to-XML is very powerful combination.\r\n ",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium",
      "date": "2012-02-22T17:20:55.4670000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "linq-to-xml",
        "csproj",
        "project",
        "XLinq",
        "XML"
      ]
    },
    {
      "id": 671,
      "title": "WPF Command in F#",
      "comment": "demonstrate how to use object expression to create a WPF/Silverlight command. ",
      "author": "Tao Liu",
      "link": "http://apollo13cn.blogspot.com/",
      "date": "2012-02-22T21:27:05.2530000",
      "likes": 21,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "WPF",
        "SilverLight"
      ]
    },
    {
      "id": 672,
      "title": "foo",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-02-23T15:49:12.8870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 673,
      "title": "n-gram algorithm",
      "comment": "Simple n-gram algorithm implementation <https://en.wikipedia.org/wiki/N-gram>",
      "author": "Daniil Frumin",
      "link": "",
      "date": "2012-02-23T17:25:56.9500000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "trees",
        "binary trees",
        "n-gram"
      ]
    },
    {
      "id": 674,
      "title": "Private Implementation Inheritance without boilerplate",
      "comment": "How to avoid delegation boilerplate in inhertance heavy OOP code while maintaining proper accessibility\r\nlike seen here https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/seq.fs#L82\r\nand mentioned in Expert F# 2.0 \"Using Partially Implemented Types via Implementation Inheritance \"\r\nUses auto-properties that only work with F# 3.0\r\n",
      "author": "Associat0r",
      "link": "",
      "date": "2012-02-23T18:58:32.9170000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "XNA",
        "OOP",
        "Inheritance",
        "Object-Oriented Programming",
        "Object Expressions",
        "Classes",
        "Interface"
      ]
    },
    {
      "id": 675,
      "title": "Pimpl",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-02-25T19:07:11.6100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 676,
      "title": "Pimpl ctor ref prop",
      "comment": "Sim",
      "author": "",
      "link": "",
      "date": "2012-02-25T20:02:03.0500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 677,
      "title": "Higher-Order Functions for Excel",
      "comment": "Some of the standard higher-order functions (like Seq.map, Seq.iter, Seq.filter) but implemented for Excel interop.  Effortlessly iterate across ranges of cells, reading them, updating them or formatting them.\r\n\r\nNB. Type-information won't be displayed correctly on fssnip (Office not installed on server presumably), so to get this working paste the code into VS, make yourself a spreadsheet with a range called 'MyRange' and use FSI to explore.",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2012-02-28T15:22:52.2770000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Excel",
        "interop"
      ]
    },
    {
      "id": 678,
      "title": "Turing machine interpreter",
      "comment": "A Turing machine emulator. An infinite tape is simulated by a zipper, instructions are stored in the binary tree for faster lookup.",
      "author": "Daniil",
      "link": "",
      "date": "2012-02-29T17:16:10.1700000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "turing machine",
        "algorithm"
      ]
    },
    {
      "id": 679,
      "title": "Polymorphic Maybe monad with default value.",
      "comment": "Polymorphic (via generics) Maybe monad/computational expression with default value + Zipper",
      "author": "Daniil",
      "link": "",
      "date": "2012-03-01T10:06:03.8570000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "monad",
        "computational expression",
        "monads",
        "zipper",
        "polymorphism"
      ]
    },
    {
      "id": 680,
      "title": "How many words can you spell on a calculator?",
      "comment": "We all know about BOOBIES - but how many other dictionary words can you spell upside-down on a calculator?",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2012-03-01T22:32:52.9170000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "puzzles"
      ]
    },
    {
      "id": 681,
      "title": "Langton's ant",
      "comment": "Implementation of Langton's ant route..\r\nTakes first 1000 steps and returns only black fields.",
      "author": "stejcz",
      "link": "",
      "date": "2012-03-02T12:14:48.6970000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "sample",
        "learning F#",
        "wiki",
        "algorithm"
      ]
    },
    {
      "id": 682,
      "title": "Langton's ant // OOP :)",
      "comment": "Implementation of Langton's ant route.. Takes first 1000 steps and returns only black fields.",
      "author": "stejcz",
      "link": "",
      "date": "2012-03-02T12:22:21.5470000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sample",
        "learning F#",
        "wiki",
        "algorithm"
      ]
    },
    {
      "id": 683,
      "title": "unit test in VS11 beta",
      "comment": "Demo F# unit test in VS11 beta. In VS 2010 unit testing requires a hack whereby you add a c# test project to your solution and add to that project a linked item to the DLL of the F# project with the test methods.",
      "author": "Jack Fox",
      "link": "http://www.linkedin.com/in/jackfox",
      "date": "2012-03-03T17:56:45.5900000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "testing"
      ]
    },
    {
      "id": 684,
      "title": "Lab3",
      "comment": "Lab3",
      "author": "Mikhail Dubov",
      "link": "",
      "date": "2012-03-03T22:20:25.0230000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Lab3"
      ]
    },
    {
      "id": 685,
      "title": "Remove duplicate list elements",
      "comment": "I have been working on my \"Functional Style\" and like to think that I have improved a bit.\r\nThe list order is no longer maintained in this snippet; however  as the order change is simply a feature of the foldBack process  the reversal of input and reversal of output is a reliable (and efficient?) fix.\r\n",
      "author": "visProcessEngg",
      "link": "",
      "date": "2012-03-04T05:09:18.1800000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Remove Duplicates",
        "List",
        "Tail Recursion"
      ]
    },
    {
      "id": 686,
      "title": "A simple sieve",
      "comment": "A simple implementation for the sieve of Eratosthenes.",
      "author": "Gab_km",
      "link": "",
      "date": "2012-03-08T08:55:33.3470000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "primes",
        "sieve",
        "Eratosthenes",
        "Algorithm"
      ]
    },
    {
      "id": 687,
      "title": "MbUnit DSL",
      "comment": "DSL for functional style, HUnit-like testing with MbUnit.",
      "author": "Mauricio Scheffer",
      "link": "http://bugsquash.blogspot.com",
      "date": "2012-03-13T23:06:06.9330000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "mbunit",
        "testing"
      ]
    },
    {
      "id": 688,
      "title": "How many lines of code does your project contain?",
      "comment": "A simple way to count the non-blank, non-comment lines in your code.   (Doesn't use project files to identify source; just a wildcard.  Doesn't support multi-line comments.)",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-03-14T14:58:24.9930000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "source code",
        "line count"
      ]
    },
    {
      "id": 689,
      "title": "Powerset",
      "comment": "Powerset function followed by with tiny sample.",
      "author": "notostraca",
      "link": "",
      "date": "2012-03-15T09:25:31.4370000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "set",
        "powerset"
      ]
    },
    {
      "id": 690,
      "title": "Haskell to F# (some operators)",
      "comment": "Just toying around with making my F# code a little smaller with Haskell operators\r\n",
      "author": "Cameron Frederick",
      "link": "https://twitter.com/#!/cammcad",
      "date": "2012-03-15T23:22:36.4170000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Haskell",
        "Haskell operators"
      ]
    },
    {
      "id": 691,
      "title": "Poll a file until it is quiet",
      "comment": "One of the problems with using FileSystemWatcher to detect new files and process them is that it tells you when the file starts being created, not when it finishes.  Use this little function to poll the file until it stops being written to.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-03-16T16:29:10.3270000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "IO",
        "file handling"
      ]
    },
    {
      "id": 692,
      "title": "Sierpinski triangle, WPF",
      "comment": "Draws a Sierpinski triangle using WPF",
      "author": "Mathias Brandewinder",
      "link": "http://www.clear-lines.com/blog/",
      "date": "2012-03-16T20:56:59.2000000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "WPF",
        "Sierpinski",
        "Sequences",
        "Geometry",
        "fun"
      ]
    },
    {
      "id": 693,
      "title": "Exception Retry Computation Expression",
      "comment": "Retry monad: chaining functions together, retrying each one if exceptions are thrown, until the first time a function can no longer be retried",
      "author": "Boris Kogan",
      "link": "http://viralfsharp.com/2012/03/17/retry-monad-an-implementation",
      "date": "2012-03-18T06:09:13.8530000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "computation expression",
        "monad",
        "retry"
      ]
    },
    {
      "id": 694,
      "title": "EditDistance",
      "comment": "Computes the Minimum Edit Distance or the Levenshtein Distance between two words",
      "author": "Gustavo Guerra",
      "link": "http://blog.codebeside.org",
      "date": "2012-03-18T23:49:35.9400000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Algorithms",
        "NLP"
      ]
    },
    {
      "id": 695,
      "title": "Lazy Xml",
      "comment": "A Lazy Xml structure for processing large xml documents.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-03-21T15:48:11.6700000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Lazy",
        "Xml"
      ]
    },
    {
      "id": 696,
      "title": "Lightweight syntax for creating JSon objects using Newtonsoft's Json.Net",
      "comment": "There's an easy way to create JSon objects using Newtonsoft's Json.Net. The common problem with Json.Net is that there's usualy a lot of overhead when creating Json with it as there're a lot of 'new', parentheses, nested objects when we don't need them. And it becomes  annoying quite fast. DU Json and toJson function allow to create Json tree and convert it to Json.Net JObject hierarchy. \r\n\r\nOn the examples the usage of lightweight syntax doesn't give a lot of win but it will be more clearer when it come to more complicated objects.",
      "author": "Dmitry Lobanov",
      "link": "",
      "date": "2012-03-21T17:57:26.1500000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "json"
      ]
    },
    {
      "id": 697,
      "title": "HTML File Type",
      "comment": "Discriminated unions to represent a HTML file.(not completely)",
      "author": "Gab_km",
      "link": "",
      "date": "2012-03-22T16:46:33.3470000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "discriminated union",
        "HTML"
      ]
    },
    {
      "id": 698,
      "title": "What word is most like the word \"turtle\"?",
      "comment": "A while ago I posted a snippet to calculate the 'Discrete Fréchet Distance' between two curves. If we treat a word as a 'curve' by giving each letter an index (with similar-sounding letters having closer indices) we can compare words by the Fréchet distance between them!  An alternative to edit-distance...",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2012-03-23T09:36:40.3300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "learning F#",
        "text processing"
      ]
    },
    {
      "id": 699,
      "title": "arcanum #1",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-03-23T17:20:35.9370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 700,
      "title": "Expression parsing with monads",
      "comment": "Compositional expression parsing with monads.\r\n\r\nhttps://bitbucket.org/ZachBray/parsad",
      "author": "Zach Bray",
      "link": "zbray.com",
      "date": "2012-03-27T10:27:03.5100000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Monads",
        "Regular Expressions"
      ]
    },
    {
      "id": 701,
      "title": "Levenshtein distance",
      "comment": "Computes Levenshtein (min edit) distance between two strings\r\nhttp://en.wikipedia.org/wiki/Levenstein_Distance",
      "author": "Lakret",
      "link": "levenshtein",
      "date": "2012-03-28T04:28:20.6370000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Algorithms",
        "Text processing"
      ]
    },
    {
      "id": 702,
      "title": "Static scope for immutable variables",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-03-28T13:27:14.3070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 703,
      "title": "Porter Stemmer",
      "comment": "Porter Stemmer, please contribute fixes, suggestions, this is merely a syntactic rewrite, I believe though there are some slight mistakes. http://tartarus.org/~martin/PorterStemmer/ ,fixed up endswithdoubleconsonant and endswithocondition",
      "author": "David Klein",
      "link": "https://twitter.com/#!/davidkl_",
      "date": "2012-03-29T11:49:21.2530000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "stemming",
        "word stem",
        "porter stemmer"
      ]
    },
    {
      "id": 704,
      "title": "reflection",
      "comment": "reflection, not exactly efficient but good canvas to start exploring",
      "author": "David Klein",
      "link": "https://twitter.com/#!/davidkl_",
      "date": "2012-03-30T09:28:01.6500000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "reflection"
      ]
    },
    {
      "id": 705,
      "title": "In-place parallel QuickSort",
      "comment": "It's fairly straightforward in-place QuickSort implementation which uses ThreadPool for parallelization. Still slower than library function Array.sortInPlace, though.",
      "author": "Lakret",
      "link": "",
      "date": "2012-03-30T13:16:50.0330000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Imperative",
        "Sort",
        "Algorithms"
      ]
    },
    {
      "id": 706,
      "title": "SIngle Life Annuity",
      "comment": "A single life annuity function in F# including supporting functions such as probability of survival, pure endowment and discounted interest rate calculation.\r\n",
      "author": "Kevin Roche",
      "link": "",
      "date": "2012-03-30T16:21:47.1830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Actuarial",
        "Annuity"
      ]
    },
    {
      "id": 707,
      "title": "Single Life Annuity",
      "comment": "A single life annuity function in F# including supporting functions such as probability of survival, pure endowment and discounted interest rate calculation.\r\nI've gone for (what I believe to be) a more functional approach than the previous version. I've cobbled together a sort of computation expression type to facilitate transforming the AgeVector. The code below contains test data and sample tests so that you can see how it should be used. \r\nIf you have any queries or advice about this please contact me on twitter @CdeRoiste .\r\n\r\nHave fun!",
      "author": "Kevin Roche",
      "link": "",
      "date": "2012-04-02T08:48:06.5930000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "Actuarial",
        "Annuity"
      ]
    },
    {
      "id": 708,
      "title": "JSON parsing with monads",
      "comment": "JSON parsing with monads. See also \"Expression parsing with monads\" (http://fssnip.net/bi). \r\n\r\nAuthor URL: http://www.zbray.com",
      "author": "Zach Bray",
      "link": "https://bitbucket.org/ZachBray/parsad",
      "date": "2012-04-02T22:56:50.7230000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Monads",
        "Regular Expressions",
        "Parsing"
      ]
    },
    {
      "id": 709,
      "title": "Async HTTP server",
      "comment": "Creating an asynchronous HTTP Server in F#.",
      "author": "Julian Kay",
      "link": "http://www.branded3.com/b3labs/creating-a-simple-http-server-with-f/",
      "date": "2012-04-05T10:53:07.4500000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "http",
        "server"
      ]
    },
    {
      "id": 710,
      "title": "Bayesian Monte Carlo of Let's Make a Deal",
      "comment": "This code illustrates Bayes' Theorem in action on the Let's Make a Deal problem (aka Monty Hall Problem), which several authors have used to illustrate Bayes' Theorem. (It's easy to search the internet for further explanation.) Run with the audit option to audit up to the first 100 games. Running without audit is faster and can simulate a couple billion games.",
      "author": "Jack Fox",
      "link": "",
      "date": "2012-04-07T18:03:40.1400000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "bayestheorem",
        "game"
      ]
    },
    {
      "id": 711,
      "title": "Monotone Chain Convex Hull Algorithm",
      "comment": "Andrew's Monotone Chain Convex Hull algorithm: given points in 2 dimensions, determine their convex hull by constructing the upper and lower hull.",
      "author": "Mathias Brandewinder",
      "link": "http://www.clear-lines.com/blog/",
      "date": "2012-04-07T23:50:17.3070000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Geometry",
        "Math",
        "Algorithms"
      ]
    },
    {
      "id": 712,
      "title": "Darkus April-2012 contest entry",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-04-09T13:55:56.5630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 713,
      "title": "Monadic transactions for Clojure-style atoms",
      "comment": "This is a simple implementation of a monadic transaction builder for Clojure-style atoms. Based on original code by Nick Palladinos.",
      "author": "",
      "link": "",
      "date": "2012-04-12T18:16:58.4070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "monadic transactions"
      ]
    },
    {
      "id": 714,
      "title": "Monadic transactions for Clojure-style atoms",
      "comment": "This is a simple implementation of a monadic transaction builder for Clojure-style atoms. \r\n\r\nBased on original code by Nick Palladinos.",
      "author": "Eirik Tsarpalis",
      "link": "www.nessos.gr",
      "date": "2012-04-12T18:44:07.3330000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "monadic transactions",
        "thread safety",
        "atom"
      ]
    },
    {
      "id": 715,
      "title": "Expanding quotations",
      "comment": "The snippet implements a function \"expand\" that takes a quotation and performs two operations. It replaces all calls to methods marked with ReflectedDefinition with the body of the method and it simplifies all expressions that can be reduced in call-by-name style (let binding & application of lambda).",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-04-15T13:45:11.8030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "quotations",
        "expand",
        "lambda",
        "quotation",
        "exprshape"
      ]
    },
    {
      "id": 716,
      "title": "Building Strings",
      "comment": "When sprintf and String.concat is either too slow or not really what is needed, one can use System.Text.StringBuilder. This snippet makes working with StringBuilder much more convenient and the resulting code more succint.",
      "author": "Bent Rasmussen",
      "link": "xosfaere.wordpress.com",
      "date": "2012-04-15T21:25:08.2100000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "String",
        "StringBuilder",
        "Format",
        "Helper"
      ]
    },
    {
      "id": 717,
      "title": "Tesco in 70 lines of code",
      "comment": "Domain model for the Tesco checkout implemented in F# using discriminated unions (in 20 lines of code) and console-based user interface for scanning products and calculating the total price.",
      "author": "Tomas Petricek",
      "link": "",
      "date": "2012-04-17T09:16:57.6500000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "tesco",
        "domain modelling",
        "dsl",
        "discriminated unions",
        "tutorial"
      ]
    },
    {
      "id": 718,
      "title": "Finalizing Tesco purchase",
      "comment": "The sample shows two different reprezentations of Tesco checkout. The first one stores scanned items - as a list of either purchase or cancel items - and the second stores final bill with product and total quantity. The snippet implements transformation that corresponds to finalizing the purchase.",
      "author": "Tomas Petricek",
      "link": "",
      "date": "2012-04-17T11:18:00.8070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "tesco",
        "domain modelling",
        "dsl",
        "discriminated union",
        "transformation"
      ]
    },
    {
      "id": 719,
      "title": "Simple NumericLiteral example",
      "comment": "You can use numeric literals, constant expressions and operator overloading to make your own arithmetics. Useful in DSL languages.\r\n\r\nWith NumericLiterals, you can use any of Q, R, Z, I, N, G.\r\n\r\nBasic syntax:\r\n[Number][Letter] will forward the call to the type NumericLiteral[Letter] to FromInt32 [Number] \r\n(or FromInt64 or FromString...)",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium/",
      "date": "2012-04-18T17:26:10.5830000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "NumericLiteral",
        "literal",
        "dsl"
      ]
    },
    {
      "id": 720,
      "title": "F# 3.0 - EntityFramework Type Provider usage with Northwind DB",
      "comment": "A small sample how to use F# 3.0  Entity Framework (EF) Type Provider.\r\nVisual Studio 11 Beta (and Northwind sample database) needed.\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://fi.linkedin.com/in/thorium",
      "date": "2012-04-18T20:45:53.0570000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "type provider",
        "EF",
        "EntityFramework",
        "SQL",
        "F# 3.0",
        "database"
      ]
    },
    {
      "id": 721,
      "title": "Statistical functions",
      "comment": "Some basic statistics functions in F#, including erfc, erfcinv, normcdf, normpdf, norminv, additiveCorrection, multiplicativeCorrection, a Box-Mueller RandomSampler and a unitized type for a Gaussian distribution. Based on Ralf Herbrich's samples at http://blogs.technet.com/b/apg/archive/2008/04/05/trueskill-through-time.aspx",
      "author": "Robert Herman",
      "link": "http://blogs.technet.com/b/apg/archive/2008/04/05/trueskill-through-time.aspx",
      "date": "2012-04-19T14:41:41.0470000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Statistics",
        "Gaussian",
        "Normal",
        "Distributions erfc",
        "erfcinv",
        "Sampling"
      ]
    },
    {
      "id": 722,
      "title": "Simple builder example: Nullable",
      "comment": "Simple Computational expressions / monad / builder -example, using .NET Nullable as demo.",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium",
      "date": "2012-04-19T17:09:57.7930000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 7,
      "tags": [
        "builder",
        "monad",
        "computation builder",
        "nullable"
      ]
    },
    {
      "id": 723,
      "title": "F# Koan Setup",
      "comment": "Setup Code for Online F# Koans",
      "author": "Chris Marinos",
      "link": "",
      "date": "2012-04-20T09:03:08.9600000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 8,
      "tags": [
        "F# Koans"
      ]
    },
    {
      "id": 724,
      "title": "F# Koans",
      "comment": "An online version of the F# Koans for use with tryfsharp",
      "author": "Chris Marinos",
      "link": "koans",
      "date": "2012-04-20T09:14:44.2800000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "F# Koans"
      ]
    },
    {
      "id": 725,
      "title": "Classifier DSL",
      "comment": "sample",
      "author": "",
      "link": "",
      "date": "2012-04-20T19:08:41.5630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "dsl"
      ]
    },
    {
      "id": 726,
      "title": "Classifier DSL Setup",
      "comment": "Classifier DSL Setup",
      "author": "",
      "link": "",
      "date": "2012-04-20T19:55:23.8230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "dsl"
      ]
    },
    {
      "id": 727,
      "title": "DSL for Financial Contracts",
      "comment": "Simple domain-specific language for modeling of financial contracts.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-04-21T04:41:49.0230000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 7,
      "tags": [
        "dsl"
      ]
    },
    {
      "id": 728,
      "title": "DSL for Price Patterns (Setup)",
      "comment": "Domain-specific language for detecting patterns in stock prices. Run using try F#.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-04-21T04:49:09.2000000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "dsl"
      ]
    },
    {
      "id": 729,
      "title": "DSL for Price Patterns (Demo)",
      "comment": "Examples that use domain-specific langauge for detecting price patterns. To run the sample, load the previous snippet in TryF#. It opens the sample automatically.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-04-21T04:56:06.6370000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 7,
      "tags": [
        "dsl"
      ]
    },
    {
      "id": 730,
      "title": "Recursive descent parser using active patterns",
      "comment": "Parsing without external dependencies. Uses recursive active patterns and regular expressions.",
      "author": "",
      "link": "",
      "date": "2012-04-21T12:27:34.8230000",
      "likes": 4,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "parsing",
        "active patterns"
      ]
    },
    {
      "id": 731,
      "title": "Fun with Ping and Pong",
      "comment": "Yet another ping pong sample with agents.",
      "author": "Ryan Riley",
      "link": "http://github.com/panesofglass",
      "date": "2012-04-26T06:35:17.8130000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "MailboxProcessor",
        "agent",
        "ping pong"
      ]
    },
    {
      "id": 732,
      "title": "Ping and Pong go Chunking Along",
      "comment": "Parameterizing pong allows us to do even more fun things. Here we  use a few message types to allow stateful consumption of data sent by ping to its pongs.",
      "author": "Ryan Riley",
      "link": "http://github.com/panesofglass",
      "date": "2012-04-26T13:57:19.5570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "MailboxProcessor",
        "agent",
        "ping pong"
      ]
    },
    {
      "id": 733,
      "title": "OminaisuusStorage-testi",
      "comment": "Korjasin modulen P:n olemaan isolla... :-)",
      "author": "",
      "link": "",
      "date": "2012-04-28T21:33:30.5530000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "mailboxprocessor",
        "ominaisuudet",
        "entiteetit"
      ]
    },
    {
      "id": 734,
      "title": "Composing Queries in F#",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-04-29T19:03:52.9130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 735,
      "title": "Aggregate Agent",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-05-03T04:16:17.7170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 736,
      "title": "Inverse Fizz Buzz  ",
      "comment": "Inspired by this post:\r\nhttp://www.jasq.org/2/post/2012/05/inverse-fizzbuzz.html\r\n\r\n(fixed small typo, plus trying out this editing fssnip for the first time)",
      "author": "Tony Abell",
      "link": "",
      "date": "2012-05-06T15:22:29.7600000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "fizz buzz"
      ]
    },
    {
      "id": 737,
      "title": "Yet another Fibonacci",
      "comment": "In mathematics, the Fibonacci numbers or Fibonacci series or Fibonacci sequence are the numbers in the following integer sequence: [0; 1; 1; 2; 3; 5; 8; 13; 21; 34; 55; 89; 144; 233; 377; ...]\r\n\r\nhttp://en.wikipedia.org/wiki/Fibonacci_number\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://cs.hubfs.net/org/FSharpHelsinki",
      "date": "2012-05-06T23:41:43.6770000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "fibonacci"
      ]
    },
    {
      "id": 738,
      "title": "Scrap Your Boilerplate (with class)",
      "comment": "A typecast free experiment in Generic Programming. Inspired by \"Scrap Your Boilerplate (with class)\".",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-05-07T20:37:39.5670000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Generic Programming",
        "Haskell"
      ]
    },
    {
      "id": 739,
      "title": "Async Primitives",
      "comment": "A set of Async primitives as described by Dave Thomas [1] (and derived from Stephen Toub [2]).\r\n\r\n[1] http://moiraesoftware.com/blog/2012/04/22/back-to-the-primitive-ii/\r\n[2] http://blogs.msdn.com/b/pfxteam/archive/2012/02/11/10266923.aspx",
      "author": "Ryan Riley",
      "link": "http://github.com/panesofglass",
      "date": "2012-05-09T02:54:53.2200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "threading"
      ]
    },
    {
      "id": 740,
      "title": "How to check whether an F# function/method has been initialized",
      "comment": "Sometimes, we may run into this kind of situation that  we want to check if the given method/function has been initialized. We all know this is fairly easy in C#, since we can use delegate to invoke the function , then verify if the value of delegate is null. But in F# , delegate is rarely needed because F# can treat a function as a value, without the need for any wrapper. So , here is an easy way to solve this problem.\r\n",
      "author": "ZackZhou",
      "link": "",
      "date": "2012-05-10T05:42:25.7100000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "F#",
        "null"
      ]
    },
    {
      "id": 741,
      "title": "Speech Stackoverflow article automatically",
      "comment": "This snippet automatically speeches text of question,answers and comments in a Stackoverflow article.\r\nIt requires HtmlAgilityPack(available from Nuget package manager).(Attention: You need reset F# interactive to stop the speech)",
      "author": "nagat01",
      "link": "http://nagat01.blogspot.jp/",
      "date": "2012-05-10T14:26:21.5970000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "web",
        "HTML",
        "parsing",
        "Regular Expressions"
      ]
    },
    {
      "id": 742,
      "title": "Huy123",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-05-12T09:43:13.4070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 743,
      "title": "Traits, Mixins and Aspect-Oriented Programming in F#",
      "comment": "A compositional type system built using generics and monads in F#. It is only a very limited, _toy_ project exploring traits, mixins and aspect-oriented programming. ",
      "author": "Zach Bray",
      "link": "http://www.zbray.com",
      "date": "2012-05-12T17:20:44.8670000",
      "likes": 15,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "monad",
        "mixin",
        "generic",
        "types",
        "aspect-oriented"
      ]
    },
    {
      "id": 744,
      "title": "tryNth",
      "comment": "Computes the nth value of a sequence if the nth value is past the length of the sequence then None is returned else some",
      "author": "Colin Bull",
      "link": "",
      "date": "2012-05-13T19:47:51.2470000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences"
      ]
    },
    {
      "id": 745,
      "title": "F# yet another Interop example",
      "comment": "Quick demo of using F# to interop with a native C library. C Library has not been checked for algorithm correctness (but works exactly as the origional). ",
      "author": "David Klein",
      "link": "https://twitter.com/#!/davidkl_",
      "date": "2012-05-14T06:43:09.7670000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "F#",
        "Interop",
        "boyer moore",
        "string matching"
      ]
    },
    {
      "id": 746,
      "title": "derived ctor fail",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-05-14T12:23:21.6470000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 747,
      "title": "Dojo chart example for Try F# ",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-05-16T16:05:21.9600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 748,
      "title": "Concurrent Memoization",
      "comment": "Memoize a function in a thread-safe manner.\r\nAdded a wrapper around the value a. The idea being, that a unit value is represented as a null value at run time and as such the concurrent dictionary throws.",
      "author": "Matt Collins",
      "link": "",
      "date": "2012-05-17T09:47:59.8630000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "memoize",
        "concurrent"
      ]
    },
    {
      "id": 749,
      "title": "How to Serialize Record, Discriminated Union and Tuple in Azure?",
      "comment": "Here is the implementation of the three types in WCF Azure, and a sample using WCF in worker role, a WPF test project to invoke the three kinds of data type from worker role. Link is http://fsharp3sample.codeplex.com/SourceControl/changeset/view/13876",
      "author": "AndrewXue",
      "link": "",
      "date": "2012-05-18T06:12:25.9300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "F#",
        "Azure",
        "Serialize"
      ]
    },
    {
      "id": 750,
      "title": "Translating quotations to LINQ",
      "comment": "A sample that translates simple F# quotations (method calls, property getters) to stnadard C# LINQ expression trees.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-05-18T20:36:45.8670000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "meta-programming",
        "quotations",
        "linq",
        "expression"
      ]
    },
    {
      "id": 751,
      "title": "Using AutoMapper with F#",
      "comment": "This wrapper will handle translating F# quotations into LINQ expressions that AutoMapper can use, enabling AutoMapper to be configured from F# code. You must reference AutoMapper and FSharp.PowerPack.Linq, or include Linq.fsi and Linq.fs from the PowerPack into your project.",
      "author": "Joel Mueller",
      "link": "",
      "date": "2012-05-18T23:43:51.4430000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "AutoMapper",
        "FSPowerPack.Community"
      ],
      "source": "",
      "versions": 3,
      "tags": [
        "linq",
        "automapper"
      ]
    },
    {
      "id": 752,
      "title": "Player",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-05-19T14:40:23.4600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 753,
      "title": "Player",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-05-19T14:43:14.8270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 754,
      "title": "Berzerk",
      "comment": "Zombie state machine code sample. \r\nUse arrow keys to move humanoid.\r\nRobots activate when in range of humanoids. \r\nTry it out in the browser with TryFSharp.org.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-05-21T06:32:12.6000000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Game",
        "Silverlight"
      ]
    },
    {
      "id": 755,
      "title": "Minesweeper Kata",
      "comment": "Solution to Minesweeper Kata challenge at Goto Copenhagen 2012 conference \"Programming with the Stars\" track.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-05-23T10:34:56.7600000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Kata",
        "Game"
      ]
    },
    {
      "id": 756,
      "title": "Minesweeper Kata 2",
      "comment": "Solution to Minesweeper Kata second challenge at Goto Copenhagen 2012 conference \"Programming with the Stars\" track. Runnable at http://tryfsharp.org.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-05-23T11:01:59.9630000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Kata",
        "Silverlight",
        "Game"
      ]
    },
    {
      "id": 757,
      "title": "Get Assemblies from NuGet",
      "comment": "Given a NuGet package name, this code will download the package, extract it to a temp directory, and return a sequence of FileInfo objects representing assemblies from that package, with a preference for .NET 4.5 and 4.0 assemblies, if present. Requires the \"DotNetZip\" package.",
      "author": "Joel Mueller",
      "link": "nuget, zip, async",
      "date": "2012-05-24T04:43:44.4570000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "DotNetZip"
      ],
      "source": "",
      "versions": 6,
      "tags": [
        "nuget",
        "async",
        "zip"
      ]
    },
    {
      "id": 758,
      "title": "Minesweeper Tweet",
      "comment": "Minesweeper computation Kata as a tweet (140 characters) not counting code to open namespace and to prepare field as a 2D array.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-05-25T22:20:46.2800000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Kata",
        "Game"
      ]
    },
    {
      "id": 759,
      "title": "Codomains through Reflection",
      "comment": "Any type signature has the form of a curried chain T0 -> T1 -> .... -> Tn, where Tn is not a function type. The codomain of a type is precisely Tn. This is a simple implementation that uses reflection to determine the codomain for arbitrary types.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-05-26T00:28:41.9000000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "codomain",
        "reflection",
        "FSharpFunc"
      ]
    },
    {
      "id": 760,
      "title": "Eurovision - Some(points)",
      "comment": "The Eurovision final scoring system using records and some higher order functions.  (Results are fictional - no-one seems to publish the full voting live online.)",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-05-26T22:41:44.3530000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "learning F#",
        "sequences",
        "records"
      ]
    },
    {
      "id": 761,
      "title": "Simple Markov chains",
      "comment": "Small example illustrating how to use Arrays and Sequences to simulate simple Markov chain and evaluate their stationary distribution.",
      "author": "Mathias Brandewinder",
      "link": "http://www.clear-lines.com/blog/",
      "date": "2012-05-27T23:16:23.7630000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "math",
        "markov",
        "simulation",
        "probability"
      ]
    },
    {
      "id": 762,
      "title": "Brainfuck",
      "comment": "A minimal Brainfuck Interpreter (<30 lines) running Hello World!",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-05-28T22:05:51.3570000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Interpreter"
      ]
    },
    {
      "id": 763,
      "title": "MailboxProcessor with exception handling",
      "comment": "An extension of MailboxProcessor that catches all unhandled exceptions (in the body of the mailbox processor) and reports them using an event. Otherwise, the public interface is the same as for MailboxProcessor.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-05-29T20:15:28.5000000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "mailboxprocessor",
        "agent",
        "async",
        "exception"
      ]
    },
    {
      "id": 764,
      "title": "Merge two sorted lists by a key",
      "comment": "Merges two sorted lists by a key.",
      "author": "Simon Weijgers",
      "link": "",
      "date": "2012-05-30T16:16:59.9930000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lists"
      ]
    },
    {
      "id": 765,
      "title": "Befunge",
      "comment": "Minimal Befunge-93 interpreter.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-05-30T17:51:08.6330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Interpreter"
      ]
    },
    {
      "id": 766,
      "title": "Asynchronous Entity Framework Query",
      "comment": "Entity Framework doesn't currently support async operations, but as long as the underlying provider is System.Data.SqlClient we can make it work.",
      "author": "Joel Mueller",
      "link": "",
      "date": "2012-05-30T23:44:00.4270000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "EntityFramework"
      ],
      "source": "",
      "versions": 6,
      "tags": [
        "entity framework",
        "async"
      ]
    },
    {
      "id": 767,
      "title": "Processing Prices & Charting (Setup)",
      "comment": "Implements simple library for downloading Yahoo stock prices and displaying charts in Try F#. This snippet loads another one with examples.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-05-31T23:13:33.6370000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "try f#"
      ]
    },
    {
      "id": 768,
      "title": "Processing Prices & Charting (Demo)",
      "comment": "Sample code using a simple library for downloading Yahoo stock prices. The demo shows how to process sequences and so on (to run this, load & run previous snippet).",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-06-01T00:05:10.0930000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "try f#"
      ]
    },
    {
      "id": 769,
      "title": "Yet Another Financial Contracts (Setup)",
      "comment": "Yet another tutorial based on the DSL for modelling financial contracts. This part just loads library for downloading prices & loads another snippet. Designed to run in Try F#.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-06-01T00:41:11.1670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "try f#"
      ]
    },
    {
      "id": 770,
      "title": "Yet Another Financial Contracts (Demo)",
      "comment": "Yet another tutorial based on the DSL for modelling financial contracts. This is a walkthrough with examples and tasks that is loaded by the previous 'Setup' snippet. Designed to run in Try F#.\r\n",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-06-01T01:09:42.6700000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "try f#"
      ]
    },
    {
      "id": 771,
      "title": "Calculate PI using Monte Carlo",
      "comment": "Simple walkthrough that demonstrates how to estimate the value of PI using Monte Carlo simulation. A few holes need to be filled in and then you can run & parallelize the sample!",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-06-01T01:38:43.8130000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "try f#",
        "monte carlo",
        "simulation",
        "math",
        "pi"
      ]
    },
    {
      "id": 772,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T12:44:56.6070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 773,
      "title": "asda",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T12:47:55.1330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 774,
      "title": "asd",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T12:50:35.3700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 775,
      "title": "asfdasdf",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T13:00:05.0570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 776,
      "title": "asfdasdf",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T13:00:52.1000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 777,
      "title": "wer",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T13:01:25.1200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 778,
      "title": "asd",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T13:05:39.9670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 779,
      "title": "123",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T13:09:01.3930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 780,
      "title": "131",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T13:11:51.4900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 781,
      "title": "131",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T13:12:20.7630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 782,
      "title": "123123",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-01T13:12:59.3670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 783,
      "title": "ad hoc tagged sets",
      "comment": "Given an ordered set S and an arbitrary set T, any function T -> S induces a natural ordering on T. We use this idea and the infrastructure provided by Tagged.Set to quickly construct sets over arbitrary types with custom comparison rules.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-06-01T13:14:06.3230000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "tagged sets",
        "comparable types"
      ]
    },
    {
      "id": 784,
      "title": "Fsi with PropertyGrid",
      "comment": "This is a small fsx script that views the current 'it' value of Fsi in a PropertyGrid.\r\n\r\nHow to use it:\r\n- Copy the source code into a file called FsiProp.fsx and place it next to Fsi.exe\r\n- Start Fsi.exe with --load:FsiProp.fsx\r\n- Maximize Fsi.exe for full enjoyment. (I placed the PropertyGrid Form on the right screen half.)\r\n(Make a .lnk to this if you find it useful, there set Maximize on Fsi.exe)\r\n\r\nTake FsEye if you want to see what's in 'it' in detail.\r\nBut you cannot change it there. ;)",
      "author": "Karsten P.",
      "link": "karstenp.de.vu",
      "date": "2012-06-01T21:03:37.6230000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F# interactive",
        "PropertyGrid"
      ]
    },
    {
      "id": 785,
      "title": "iter & map speed comparison (array vs list vs ResizeArray)",
      "comment": "A simple test to compare how much time it takes to iterate through an array/list/ResizeArray.",
      "author": "theburningmonk",
      "link": "theburningmonk.com",
      "date": "2012-06-03T22:08:03.5400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 786,
      "title": "crc32",
      "comment": "have a project to write some basics from gzip, needed crc32, seems fast enough, fixed one bug!",
      "author": "David Klein",
      "link": "ttps://bitbucket.org/ohteekay",
      "date": "2012-06-06T10:08:42.1470000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "crc32",
        "gzip"
      ]
    },
    {
      "id": 787,
      "title": "Skip that is safe when not enough lines",
      "comment": "A version of Seq.skip which doesn't throw an exception if there are fewer lines in the sequence than you have asked to skip.",
      "author": "Kit Eason",
      "link": "https://twitter.com/kitlovesfsharp",
      "date": "2012-06-07T12:45:07.0670000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences skip"
      ]
    },
    {
      "id": 788,
      "title": "Here's another fine fractal you've gotten me into",
      "comment": "An ASCII Mandelbrot visualisation.  (Suggested by a tweet from Jon Harrop, but any bugs are mine.)",
      "author": "Kit Eason",
      "link": "https://twitter.com/#!/kitlovesfsharp",
      "date": "2012-06-13T12:41:11.8870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Learning F#; Mandelbrot"
      ]
    },
    {
      "id": 789,
      "title": "Generates punched card image",
      "comment": "This snippet generates a punched card image from a text. It punches holes in the places where a letter would be written and you can use it to generate jokes such as this one: http://bit.ly/M2oqOw",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-06-13T13:47:39.5830000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "bitmap",
        "drawing",
        "fun",
        "learning"
      ]
    },
    {
      "id": 790,
      "title": "Reporting events from agents",
      "comment": "This snippet shows different options for reporting events from an F# agent. The options include triggering the event directly, using a thread pool or using a specified synchronization context.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-06-15T22:20:41.3530000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "synchronizationcontext",
        "async",
        "agent",
        "mailboxprocessor",
        "event"
      ]
    },
    {
      "id": 791,
      "title": "Monadic state lifting combinators",
      "comment": "The generic model for stateful computation (S -> S x R) provides a convenient mechanism of threading stateful computation results since the functor λR . S -> S x R is monadic. But what happens if we want to thread state itself? Well, the mapping λS. S -> S x R is not even functorial! But it turns out it can become so with a bit of trickery. This snippet demonstrates a way to lift, project or inject stateful computations into ambient state monads.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-06-16T00:57:27.7030000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "state monad",
        "lifting combinator",
        "monad",
        "split"
      ]
    },
    {
      "id": 792,
      "title": "Mutable in Closure in Workflow",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-18T18:07:59.8600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 793,
      "title": "Heatmap Color Generating Function",
      "comment": "Function to generate color values to reflect the relative intensity of numeric values in a range.\r\n---\r\nFixed edge case of when max=min",
      "author": "Faisal Waris",
      "link": "http://fwaris.wordpress.com/?p=284",
      "date": "2012-06-21T21:16:54.1030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "heatmap; wpf"
      ]
    },
    {
      "id": 794,
      "title": "Airplane passengers unloading simulator",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-06-24T01:09:01.7730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 795,
      "title": "Eliminating type annotations with single case Active Patterns",
      "comment": "When passing objects as arguments to F# functions, it is almost certain that a type annotation will be required. This may generate long and noisy code at times, but thankfully we can use active patterns to mitigate this annoyance.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-06-24T22:11:41.9330000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Active Patterns",
        "Type annotations"
      ]
    },
    {
      "id": 796,
      "title": "Async vs sync benchmark",
      "comment": "Quick benchmark to compare the throughput performance of F# MailboxProcessor using asynchronous workflows and a synchronous agent using a lock and busy loop. The latter is 9x faster on this machine.",
      "author": "Jon Harrop",
      "link": "http://www.ffconsultancy.com",
      "date": "2012-06-26T21:23:48.0370000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "asynchronous workflows",
        "benchmark"
      ]
    },
    {
      "id": 797,
      "title": "AI",
      "comment": "Tiny robot simulate, it's available to run on tryfs.net (but not on iPad).",
      "author": "a_a",
      "link": "codeplex.com/AI",
      "date": "2012-06-28T03:17:30.5500000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "codeplex.com/AI"
      ],
      "source": "",
      "versions": 3,
      "tags": [
        "AI"
      ]
    },
    {
      "id": 798,
      "title": "IEnumerator",
      "comment": "seq to IEnumerator and IEnumerable",
      "author": "Graham Spiers",
      "link": "",
      "date": "2012-06-30T23:51:14.9770000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seq",
        "IEnumerator",
        "IEnumerable"
      ]
    },
    {
      "id": 799,
      "title": "Y(n) Polyvariadic fixpoint ",
      "comment": "Encoding mutually-recursive functions with a  Polyvariadic fixpoint combinator.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-07-01T14:30:23.0170000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "fixpoint",
        "recursion"
      ]
    },
    {
      "id": 800,
      "title": "Game of Life",
      "comment": "Simple implementation of Conway's Game of Life for the TryF# web site. ",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-07-04T00:15:48.0700000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "game",
        "array2d",
        "tutorial",
        "tryfsharp"
      ]
    },
    {
      "id": 801,
      "title": "A Generic Pretty-Printer for Record types",
      "comment": "The following is an implementation of a general-purpose pretty printer for tables. Its generality is achieved by passing an upcast rule to an untyped record type as argument.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-07-05T15:46:46.6600000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Prettyprinter",
        "Record types"
      ]
    },
    {
      "id": 802,
      "title": "Simple single-server queue simulation",
      "comment": "Simulation and performance measurement of a single-server queue with various arrival and processing rates configurations.\r\nMore comments on this can be found at http://www.clear-lines.com/blog/post/Simulating-a-simple-Queue-in-FSharp.aspx",
      "author": "Mathias Brandewinder",
      "link": "http://www.clear-lines.com/blog/",
      "date": "2012-07-09T00:39:58.0530000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "monte carlo",
        "sequences",
        "simulation",
        "queue"
      ]
    },
    {
      "id": 803,
      "title": "A Small DSL for Building Graphs",
      "comment": "A small DSL for graph building by combining paths.  It's just a set of edges under the hood, so no need to worry about duplication causing problems.  This is part of a larger project I'm calling edgy. ",
      "author": "Rick Minerich",
      "link": "RichardMinerich.com",
      "date": "2012-07-10T20:21:52.2770000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "F#",
        "Graphs",
        "DSLs",
        "DSL"
      ]
    },
    {
      "id": 804,
      "title": "A Slightly Larger DSL for Building Weighted Graphs",
      "comment": "A small DSL for graph building by combining weighted paths. It's just a map of edges to weights under the hood, so no need to worry about duplication causing problems. This is part of a larger project I'm calling edgy.",
      "author": "Rick Minerich",
      "link": "https://github.com/Rickasaurus/Edgy",
      "date": "2012-07-11T23:02:07.1970000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "F#",
        "Graphs",
        "Weighted Graphs",
        "DSLs",
        "DSL"
      ]
    },
    {
      "id": 805,
      "title": "PacMan",
      "comment": "Single level retro game playable inside TryFsharp using the cursor keys. ",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-07-14T16:57:19.7500000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Game",
        "Silverlight"
      ]
    },
    {
      "id": 806,
      "title": "Easy string approvals testing",
      "comment": "This simple tool is useful for string based approvals testing.  When tests are run in DEBUG mode, the code opens the p4merge diff tool (change it to point to yours) to clearly show the differences between the expected and actual strings.  The actual, or received string is copied, in escaped form, to the clipboard so that it can be easily pasted into the associated test to approve the changes if appropriate.\r\n\r\nWhen a debugger isn't attached, this tool simply reverts to using a standard Assert so that it work attempt to open a diff viewer when executed on a CI server.",
      "author": "",
      "link": "",
      "date": "2012-07-14T17:55:07.2230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Unit Testing"
      ]
    },
    {
      "id": 807,
      "title": "Easy string approvals testing",
      "comment": "This simple tool is useful for string based approvals testing.  When tests are run in DEBUG mode, the code opens the p4merge diff tool (change it to point to yours) to clearly show the differences between the expected and actual strings.  The actual, or received string is copied, in escaped form, to the clipboard so that it can be easily pasted into the associated test to approve the changes if appropriate.\r\n\r\nWhen a debugger isn't attached, this tool reverts to using a standard Assert so that it won't attempt to open a diff viewer when executed on a CI server.",
      "author": "Russell Politzky",
      "link": "",
      "date": "2012-07-14T18:18:27.3130000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Unit Testing",
        "Approvals Testing"
      ]
    },
    {
      "id": 808,
      "title": "HLists, Peano & Type-level computations",
      "comment": "An experiment on type-level computations.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-07-15T10:11:39.9870000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "HList",
        "Type-level computations"
      ]
    },
    {
      "id": 809,
      "title": "LiveScript to JavaScript Converter",
      "comment": "http://gkz.github.com/LiveScript/",
      "author": "",
      "link": "",
      "date": "2012-07-18T20:31:38.2500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "LiveScript",
        "JavaScript"
      ]
    },
    {
      "id": 810,
      "title": "Asynchronous cancellation of a workflow",
      "comment": "The snippet implements Async.StartCancellable method that can be used to start a given workflow and then cancel it. The cancellation of the workflow is done asynchronously, which means that the caller will wait until the workflow is actually cancelled.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-07-23T10:55:27.6130000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async",
        "workflow",
        "cancellation"
      ]
    },
    {
      "id": 811,
      "title": "A Computation Expression wrapper for StringBuilder",
      "comment": "A bit of syntax eye candy for your string building code.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-07-23T22:04:35.0100000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Computation Expressions",
        "StringBuilder"
      ]
    },
    {
      "id": 812,
      "title": "ListType",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-07-24T23:51:23.5600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 813,
      "title": "List Module",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-07-25T00:04:53.7400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 814,
      "title": "Set",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-07-25T00:31:08.3970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 815,
      "title": "Units of measure for currencies",
      "comment": "N/A",
      "author": "",
      "link": "",
      "date": "2012-07-26T00:02:33.2500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "nop"
      ]
    },
    {
      "id": 816,
      "title": "Game of Life",
      "comment": "Conway's Game of Life example at F#unctional Londoners July 2012 meetup.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-07-26T18:22:22.8400000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Game"
      ]
    },
    {
      "id": 817,
      "title": "Rename JSON properties",
      "comment": "Rename JSON property names by reconstructing JSON object.",
      "author": "Dmitry Lobanov",
      "link": "http://stackoverflow.com/users/100110/dmitry-lobanov",
      "date": "2012-07-27T04:36:32.1730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Newtonsoft.Json"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "json"
      ]
    },
    {
      "id": 818,
      "title": "Earth Similarity Index",
      "comment": "Calculating the Earth Similarity Index of a planet.\r\n\r\nhttp://phl.upr.edu/projects/earth-similarity-index-esi\r\n",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2012-07-28T21:04:14.0200000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Astronomy",
        "partial application",
        "fold"
      ]
    },
    {
      "id": 819,
      "title": "Project Euler 34 - Basic",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-07-29T13:25:28.0530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 820,
      "title": "Euler 28",
      "comment": "Implementation of Project Euler question 28.",
      "author": "Bret Colloff",
      "link": "",
      "date": "2012-07-29T16:31:16.9670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "euler",
        "28"
      ]
    },
    {
      "id": 821,
      "title": "Example expression grammar",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-07-30T22:03:07.7000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 822,
      "title": "Parametric Dependency Injection",
      "comment": "This is a simple IoC implementation that allows registration with optional parametrization.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-08-03T21:26:29.8870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Dependency Injection",
        "IoC"
      ]
    },
    {
      "id": 823,
      "title": "Global Events",
      "comment": "The following is a simplistic implementation of global events, which is the precise dual of the dependency injection implementation found in http://fssnip.net/dg. This is just a proof of concept, unwise to use in real life.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-08-03T22:24:00.2600000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Events",
        "Duality"
      ]
    },
    {
      "id": 824,
      "title": "Option Stuff",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-07T17:36:27.0700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 825,
      "title": "Option Match Stuff",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-07T17:47:17.2770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 826,
      "title": "Test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-07T18:09:02.0470000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 827,
      "title": "Test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-07T18:09:44.1400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 828,
      "title": "Type provider example",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-10T15:03:56.0600000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 829,
      "title": "Checking for perfect squares",
      "comment": "An implementation of John D. Cook's algorithm for fast-finding perfect squares:\r\n\r\nhttp://www.johndcook.com/blog/2008/11/17/fast-way-to-test-whether-a-number-is-a-square/",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-08-10T20:06:42.6900000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math"
      ]
    },
    {
      "id": 830,
      "title": "Raising arbitrary exceptions with failwith-style syntax",
      "comment": "failwith/failwithf are a useful operators, but they only raise exceptions of type SystemException. Here's a simple way to generalize them.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-08-12T15:12:13.2400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Exceptions",
        "failwith"
      ]
    },
    {
      "id": 831,
      "title": "Automatic install of Nuget with a script",
      "comment": "When versioning a solution, I like to just version the packages.config and not the binaries themselves. that means upon checkout, one has to install the referenced Nugets. This is the purpose of this script.\r\n[For some reason you have to press 'enter' between commands..]",
      "author": "Nicolas2",
      "link": "https://gist.github.com/3352821",
      "date": "2012-08-14T21:07:05.4070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "script",
        "nuget",
        "git",
        "deploy"
      ]
    },
    {
      "id": 832,
      "title": "playing with dns + async composition",
      "comment": "just some snippets ive been using to play around with async + DNS, nothing production, updated: ipsOfDomain and domainOfIp now both return string array",
      "author": "david klein",
      "link": "https://twitter.com/davidkl_",
      "date": "2012-08-18T04:44:55.2200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "DNS",
        "Async"
      ]
    },
    {
      "id": 833,
      "title": "Unlambda",
      "comment": "A minimal interpreter for David Madore's  crazy-esoteric programming language.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-08-20T13:45:35.9000000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Interpreter"
      ]
    },
    {
      "id": 834,
      "title": "FSI dependencies <-> VS dependencies",
      "comment": "This script generates a file named __project.fsx, for each proejct which can be #load \"__project.fsx\" in script intending to use the same dependency graph as the code in VS a file named __solmerged.fsx, at the solution root which can be #load \"__solmerged.fsx\" in script intending to use the same dependency graph as the code in VS In both cases, this enforce that :  **a script compiling in VS should run from FSI **",
      "author": "nicolas2",
      "link": "https://gist.github.com/3387537",
      "date": "2012-08-22T07:50:33.4300000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fsi",
        "references",
        "dependencies",
        "dll"
      ]
    },
    {
      "id": 835,
      "title": "Mad",
      "comment": "Update",
      "author": "",
      "link": "",
      "date": "2012-08-22T19:43:36.0530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Test"
      ]
    },
    {
      "id": 836,
      "title": "F# missing features",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-22T19:50:30.0170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 837,
      "title": "Map for ObservableCollection",
      "comment": "The snippet implements 'map' and 'init' functions for the 'ObservableCollection' type. These are similar to well-known functions for sequences, but 'map' works in an incremental fashion. When the source collection changes, the resulting collection is updated.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-08-22T22:03:39.1400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "observablecollection",
        "reactive",
        "linq",
        "sequences"
      ]
    },
    {
      "id": 838,
      "title": "Mad2",
      "comment": "Update",
      "author": "",
      "link": "",
      "date": "2012-08-23T01:00:12.3370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "FSPowerPack.Community"
      ],
      "source": "",
      "versions": 4,
      "tags": [
        "Test"
      ]
    },
    {
      "id": 839,
      "title": "Simple exception analysis",
      "comment": "A simple script to list the exceptions that can be thrown during the method invocation (both caught and uncaught). ",
      "author": "Natallie Baikevich",
      "link": "",
      "date": "2012-08-23T19:21:13.4600000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Mono.Reflection"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "reflection",
        "exceptions"
      ]
    },
    {
      "id": 840,
      "title": "Affine Cipher",
      "comment": "simple affineCipher translated from https://github.com/asweigart/codebreaker/blob/master/affineCipher.py not sure if actually correct. \r\nI updated the below to make it easier to understand because I was bored, made some more changes, now pass in lambda as function to pxn instead of individual functions, as suggested by rwbarton for my haskell version.",
      "author": "david klein",
      "link": "",
      "date": "2012-08-24T07:14:15.6300000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "affine"
      ]
    },
    {
      "id": 841,
      "title": "<script>alert(1);</script>",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-25T05:17:59.8830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 842,
      "title": "<script>javascript:alert(1);</script>",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-25T05:18:17.6500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 843,
      "title": "Target VS2012 and VS2010",
      "comment": "This is a simple script which, recursively walking a folder structure, updates .fsproj files so they may be run in VS2012 or VS2010. This should be run *after* VS2012 has converted a particular solution. Also, I didn't really test it too much, but it worked for me. So there's your disclaimer. ",
      "author": "Paulmichael Blasucci",
      "link": "http://pblasucci.wordpress.com",
      "date": "2012-08-25T17:27:06.4430000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "VS2010",
        "VS2012",
        "upgrade",
        "fsproj",
        "xlinq"
      ]
    },
    {
      "id": 844,
      "title": "fast Fourier transforms (FFT) ",
      "comment": "Naive \"school-book\" implimentation.",
      "author": "Kaspar",
      "link": "",
      "date": "2012-08-27T20:47:00.3770000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Mathematics",
        "Algorithms"
      ]
    },
    {
      "id": 845,
      "title": "BitsAndBytes",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-08-29T14:28:00.8770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 846,
      "title": "Using Theories with FSUnit, XUnit and NUnit",
      "comment": "Here's how to use the [<Theory>] and [<InlineData>] attributes to throw a set of data at a single test.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-08-30T07:54:05.7270000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "xunit",
        "nunit",
        "fsunit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "theories",
        "unit testing",
        "xunit",
        "nunit",
        "fsunit"
      ]
    },
    {
      "id": 847,
      "title": "Wagner Fischer ",
      "comment": ":)",
      "author": "",
      "link": "",
      "date": "2012-09-04T19:20:53.3500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "edit"
      ]
    },
    {
      "id": 848,
      "title": "Shrink your ISerializable boilerplate",
      "comment": "A pair of extension methods for SerializationInfo that make custom ISerializable implementations much more straightforward to write.",
      "author": "Eirik Tsarpalis",
      "link": "http://www.m-brace.net/",
      "date": "2012-09-04T21:59:10.6100000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "ISerializable",
        "SerializationInfo"
      ]
    },
    {
      "id": 849,
      "title": "Partition a list",
      "comment": "The snippet implements 'List.partitionWhile' which behaves as a combination of 'Seq.takeWhile' and 'Seq.skipWhile': It splits the list into a part containing elements from the beginning of a list that match a given predicate and remaining elements.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-09-05T00:51:50.8530000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "list",
        "sequence",
        "seq",
        "partition"
      ]
    },
    {
      "id": 850,
      "title": "DSL for detecting patterns in 2D",
      "comment": "A simple domain specific langauge (DSL) that can be used to specify and recognize patterrns in 2D arrays. A pattern is defined by composing primitive checks, rotating and translating patterns. See also: http://t.co/6Poty4FL",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-09-07T14:18:18.1000000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dsl",
        "stackoverflow",
        "introduction",
        "pattern matching",
        "array2d"
      ]
    },
    {
      "id": 851,
      "title": "BatchedDeque",
      "comment": "A batched Deque",
      "author": "Nicolas2",
      "link": "",
      "date": "2012-09-07T15:57:10.8570000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "deque",
        "queue",
        "stack"
      ]
    },
    {
      "id": 852,
      "title": "Monadic Trampoline",
      "comment": "A monadic trampoline for stack-overflow free programming.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-09-16T10:15:33.2800000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Monad",
        "Trampoline"
      ]
    },
    {
      "id": 853,
      "title": "NUnit assertions with pattern matching",
      "comment": "A simple utility that allows making assertions using potentially complex pattern matches.",
      "author": "Eirik Tsarpalis",
      "link": "www.m-brace.net",
      "date": "2012-09-17T17:42:50.5630000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "nunit"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "NUnit",
        "pattern matching"
      ]
    },
    {
      "id": 854,
      "title": "IDisposable in a Type ",
      "comment": "This sample illustrates how to use an IDisposable inside an object, as well as a simple use of object expression",
      "author": "nicolas2",
      "link": "",
      "date": "2012-09-19T08:14:20.5000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "IDisposable",
        "Type",
        ""
      ]
    },
    {
      "id": 855,
      "title": "Async.Choice",
      "comment": "A simple extension method for  asynchronous non-deterministic computations.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-09-20T19:08:25.8970000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "async",
        "choice",
        "non-determinism"
      ]
    },
    {
      "id": 856,
      "title": "An implementation of Async.Choice",
      "comment": "This is an implementation of the Async.Choice combinator that composes a sequence of workflows into one whose result is that of the first workflow that returns a *valid* result. You can think of it as a nondeterministic version of (Seq.tryPick id). This implementation draws ideas from Tomas Petricek's choice implementation in http://fssnip.net/6D.",
      "author": "Eirik Tsarpalis",
      "link": "http://www.m-brace.net/",
      "date": "2012-09-20T19:09:20.0670000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "async",
        "choice",
        "cancellation"
      ]
    },
    {
      "id": 857,
      "title": "Faster exception handling with Async.Raise",
      "comment": "Code by me and Nick Palladinos.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-09-22T11:44:06.2600000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "exceptions"
      ]
    },
    {
      "id": 858,
      "title": "Slicing for Math.Net vectors and matrices",
      "comment": "This snippet adds the 'GetSlice' operation to Math.Net vector and matrix types. This makes it possible to get sub-vectors and sub-matrices using the convenient syntax (For vectors 'vect.[start .. end]` or 'vect.[start ..]' and for matrices 'mat.[r1 .. r2, c1 .. c2]' and similar).",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-09-23T14:40:26.8870000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "MathNet.Numerics",
        "MathNet.Numerics.FSharp"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "math",
        "mathnet",
        "vector",
        "getslice",
        "matrix"
      ]
    },
    {
      "id": 859,
      "title": "Square root for integral types",
      "comment": "Square root for integral types",
      "author": "ildjarn",
      "link": "",
      "date": "2012-09-24T20:56:57.2730000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "square root",
        "sqrt"
      ]
    },
    {
      "id": 860,
      "title": "CRC-32 implementation ",
      "comment": "An implementation of a CRC-32 algorithm, as described in RFC-1952 \"GZIP file format specification version 4.3\"\r\n",
      "author": "Henrik Ravn",
      "link": "",
      "date": "2012-09-25T11:36:07.1070000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "crc"
      ]
    },
    {
      "id": 861,
      "title": "Code Kata: Writing Markdown parser",
      "comment": "Sample for Coding Kata",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-09-27T17:26:41.4030000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "kata"
      ]
    },
    {
      "id": 862,
      "title": "WinAPI IniFile F# Interface",
      "comment": "work with ini file  with WritePrivateProfileString, GetPrivateProfileString \r\n\r\neasy as pie",
      "author": "nCdy",
      "link": "https://github.com/nCdy",
      "date": "2012-09-28T05:40:31.7830000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "F#",
        "ini",
        "configuration"
      ]
    },
    {
      "id": 863,
      "title": "Twitter OAuth",
      "comment": "Generates the value string for the \"Authorization:\" header given Twitter application/user keys and tokens and the parameters for the request being authorized.",
      "author": "Faisal Waris",
      "link": "",
      "date": "2012-10-01T12:32:59.5000000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "twitter; authorization"
      ]
    },
    {
      "id": 864,
      "title": "Twitter OAuth",
      "comment": "Generates the value string for the \"Authorization:\" header given Twitter application/user keys and tokens and the parameters for the request being authorized.\r\n\r\nSlightly updated to allow additional oauth parameters to be included in the header.\r\n\r\nThis version handles the case when the token is not yet available, i.e. when you want to request a new token/token_secret pair.",
      "author": "Faisal Waris",
      "link": "",
      "date": "2012-10-01T12:41:15.7000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "twitter; authorization"
      ]
    },
    {
      "id": 865,
      "title": "uptime",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-02T15:57:20.5400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 866,
      "title": "Async/init bug",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-03T20:14:43.1630000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 867,
      "title": "Phone number to words",
      "comment": "Creates all possible mobile phone letter combinations from a number.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-10-04T20:57:25.2670000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Puzzle"
      ]
    },
    {
      "id": 868,
      "title": "Hashtable",
      "comment": "Readonly generic Hashtable class implementation example.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-10-04T21:07:20.8230000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Data structures"
      ]
    },
    {
      "id": 869,
      "title": "Bulk copy into table with IDENTITY column",
      "comment": "Want to do a SqlBulkCopy into a table which has an IDENTITY column?  If your DataTable has the same columns as the target (but without the ID), you can map the columns numerically, skipping the first target column.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-10-05T15:58:43.4770000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "SQL Server"
      ]
    },
    {
      "id": 870,
      "title": "Successive fold functions",
      "comment": "fold by applying a list of function to a list of arg, last one behaving as usual",
      "author": "nicolas2",
      "link": "",
      "date": "2012-10-05T16:00:27.4270000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fold",
        "cps"
      ]
    },
    {
      "id": 871,
      "title": "Another successive enumeration",
      "comment": "Applying functions on the n first elements",
      "author": "Nicolas2",
      "link": "",
      "date": "2012-10-06T11:42:40.5400000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seq",
        "iter"
      ]
    },
    {
      "id": 872,
      "title": "A Simple Implementation of Lazy Type",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-06T14:55:50.9030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 873,
      "title": "A Simple Implementation of Lazy Type",
      "comment": "A Simple Implementation of Lazy Type.",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-06T14:58:32.6900000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Lazy"
      ]
    },
    {
      "id": 874,
      "title": "Appending Two Lists Based on A Discriminated Union Type Using Continuation",
      "comment": "Lists are pointers to the head of list. It can be defined by a discriminated union type. Using continuation can do a tail-recursion version of appending two lists.",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-06T15:27:16.5270000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "List",
        "Continuation",
        "Discriminated Union Type"
      ]
    },
    {
      "id": 875,
      "title": "FizzBuzz with Rule Engine",
      "comment": "Inspired by http://dave.fayr.am/posts/2012-10-4-finding-fizzbuzz.html Rules are in a list of lambdas that can be easily modified. A pattern-matching recursive function applies them in the correct order.",
      "author": "Richard Broida",
      "link": "",
      "date": "2012-10-07T06:00:33.7700000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "fizzbuzz",
        "kata",
        "rules",
        "recursion",
        "pattern matching",
        "lambdas"
      ]
    },
    {
      "id": 876,
      "title": "FizzBuzz with Forward Composition",
      "comment": "This version of FizzBuzz uses forward composition instead of recursive pattern matching (see http://fssnip.net/e7). All the rules, including the default case, are in a list of lambdas that can be easily modified. The function executeRules composes the list into a single rule and executes it.",
      "author": "Richard Broida",
      "link": "",
      "date": "2012-10-07T15:02:13.8000000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fizzbuzz",
        "kata",
        "rules",
        "function composition",
        "lambdas"
      ]
    },
    {
      "id": 877,
      "title": "Insertion Sort on List",
      "comment": "A continuation function takes the result when it is computed. Here is an implementation of sorting on List via insertion. ",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-07T20:04:07.6430000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "InsertionSort",
        "Continuation"
      ]
    },
    {
      "id": 878,
      "title": "Merge Sort on List",
      "comment": "Merge Sort falls into 'Divide and Conquer' problem solving technique and it is a stable sorting. The worst case of running time is (nlogn). This implementation below follows the two abstract steps to achieve Merge Sort, i.e., \r\n* Recursively divide input list into two sub-lists.\r\n* Repeatedly merge the sub-lists.\r\n",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-08T16:08:07.1270000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Algorithms",
        "Merge Sort",
        "List"
      ]
    },
    {
      "id": 879,
      "title": "Generic Latin Square generator",
      "comment": "A type which generates a Latin Square - ie. an n x n array where no value is repeated in any one row or column.  Useful in experimental design and some forms of testing.\r\n\r\nThe argument is generic so you can generate a Latin Square of ints, floats, strings, dates, classes etc.\r\n\r\n(Needs some optimisation - this is a first cut!)",
      "author": "Kit Eason",
      "link": "www.kiteason.com/blogengine",
      "date": "2012-10-09T07:03:07.0270000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "testing; math;"
      ]
    },
    {
      "id": 880,
      "title": "Quartz Job Scheduling",
      "comment": "A simple example showing how to use Quartz.NET, an open source job scheduling system, with FSharp.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2012-10-09T10:19:24.6300000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Quartz"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "fsharp",
        "quartz"
      ]
    },
    {
      "id": 881,
      "title": "Time WPF startup",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-10T14:37:55.5500000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 882,
      "title": "Apply Operators to Options",
      "comment": "Simple function to apply operators to option types. Applies the operator to each value and returns a new option containing the result. Treats None as the operator's identity element (i.e., ignores it).",
      "author": "Richard Broida",
      "link": "",
      "date": "2012-10-10T17:39:14.5600000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "operators",
        "generics",
        "options"
      ]
    },
    {
      "id": 883,
      "title": "Option.map2",
      "comment": "Simplification of 'Apply operators to Options' http://fssnip.net/ee using higher order functions. \r\nShould also be part of the Option module.",
      "author": "@rojepp",
      "link": "",
      "date": "2012-10-10T18:21:25.8030000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "operators options"
      ]
    },
    {
      "id": 884,
      "title": "Sending an email",
      "comment": "Here's how to send an email through SMTP.  Works from FSI provided you are an authenticated user for the SMTP server.",
      "author": "Kit Eason",
      "link": "www.kiteason.com/blogengine",
      "date": "2012-10-11T16:17:44.7770000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "email",
        "smtp"
      ]
    },
    {
      "id": 885,
      "title": "QuickSort on List",
      "comment": "Another version of QuickSort implementation.",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-12T10:36:20.3800000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Algorithms",
        "QuickSort",
        "List"
      ]
    },
    {
      "id": 886,
      "title": "Coding Kata: Score a Bowling Game",
      "comment": "Score a Bowling game. The game is represented as a list of integers.\r\nA game of bowling consists of ten frames. In each frame, the bowler will have two chances to knock down as many pins as possible with his bowling ball. If a bowler is able to knock down all ten pins with the first ball, he is awarded a strike. If the bowler is able to knock down all 10 pins with the two balls of a frame, it is known as a spare. Bonus points are awarded for both of these, depending on what is scored in the next 2 balls (for a strike) or 1 ball (for a spare). If the bowler knocks down all 10 pins in the tenth frame, the bowler is allowed to throw 3 balls for that frame. This allows for a potential of 12 strikes in a single game, and a maximum score of 300 points, a perfect game. ",
      "author": "Cesar Mendoza",
      "link": "http://www.kitiara.org",
      "date": "2012-10-12T19:39:19.0570000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Kata",
        "sports"
      ]
    },
    {
      "id": 887,
      "title": "Get the memory address of Array in F#",
      "comment": "It's not convenient to get the memory address of object in F#, and the following code will illustrate how to get the memory of given index item of an array:",
      "author": "ZackZhou",
      "link": "",
      "date": "2012-10-15T02:26:51.3670000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Memroy address; F#"
      ]
    },
    {
      "id": 888,
      "title": "Modify the value at given memory address by F#",
      "comment": "It's not easy for F# programmer to deal with the unsafe code, here I tried to  provide a small code snippet to demonstrate the issue.",
      "author": "ZackZhou",
      "link": "",
      "date": "2012-10-15T02:50:20.3670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Memory Address;F#"
      ]
    },
    {
      "id": 889,
      "title": "Multi construct for class in F# ",
      "comment": "When we defined an F# class in explicit way, it's easy for new F# programmers to make this kind of mistakes when they define mult constructors: people will forget to initliza the class first before use it.",
      "author": "ZackZhou",
      "link": "",
      "date": "2012-10-15T03:09:36.4300000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "constructor;F#"
      ]
    },
    {
      "id": 890,
      "title": "Define a static property for F# class",
      "comment": "it's quite easy to define a modifiable static property in C# , but in F#,a defined static filed is required  first when the class want to define a static property.",
      "author": "ZackZhou",
      "link": "",
      "date": "2012-10-15T03:14:58.7900000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "static property; F#"
      ]
    },
    {
      "id": 891,
      "title": "EnumerateDirectoryFilesInfo",
      "comment": "the function returns entire files sequence for given root directory, including sub-directories.",
      "author": "Michael Gringauz",
      "link": "",
      "date": "2012-10-17T12:24:16.2900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "I/O",
        "Directory",
        "Tree",
        "Traverse"
      ]
    },
    {
      "id": 892,
      "title": "Quotation type erasure",
      "comment": "An implementation of the inverse of Expr.Cast<_>, with erasure happening at reflection level.",
      "author": "Eirik Tsarpalis",
      "link": "http://www.m-brace.net/",
      "date": "2012-10-18T10:11:31.9400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Expr",
        "upcast"
      ]
    },
    {
      "id": 893,
      "title": "Enumerable extraction in query expressions",
      "comment": "Adds \"enumerable extraction\" support to query expressions",
      "author": "kvb",
      "link": "",
      "date": "2012-10-18T17:30:29.0970000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "query",
        "sequence"
      ]
    },
    {
      "id": 894,
      "title": "Sum of Squares Monoid",
      "comment": "This snippet defines a computation builder that sums the squares of float values. It includes Combine, Zero, Yield, Delay, and For operations. ",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-23T22:06:44.4200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "computation builder",
        "seq"
      ]
    },
    {
      "id": 895,
      "title": "Implementation of Immutable Stack",
      "comment": "Immutable stack can be implemented via Discriminated Union Type with methods like Push and Pop. The following snippet is a simple version of it. ",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-23T22:22:01.6500000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Stack",
        "Immutability",
        "Discriminated Union Type"
      ]
    },
    {
      "id": 896,
      "title": "Split A Seq Into Chunks",
      "comment": "This function splits a sequence into lists of length n until there is less than n elements then those are returned.",
      "author": "Taha Hachana",
      "link": "http://fsharp-code.blogspot.com/",
      "date": "2012-10-24T08:07:05.7870000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "seq",
        "list"
      ]
    },
    {
      "id": 897,
      "title": "Formal Concept Analysis",
      "comment": "Formal Concept Analysis (FCA) is a method to determine cohesive groupings of functions and data structures, especially in program comprehension research. For example, consider an object set, O = {1,2,3,4,5,6,7,8,9,10}, and an attribute set, A = {composite,even,odd,prime,square}, we can build a lattice table that holds the relations between O and A.",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-24T12:59:50.9500000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Formal Concept Analysis",
        "Research",
        ""
      ]
    },
    {
      "id": 898,
      "title": "Declarative validation",
      "comment": "Simple combinator library to declarative validation.",
      "author": "Kaspar",
      "link": "",
      "date": "2012-10-24T18:11:17.8430000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "quotations",
        "Combinatorial functions"
      ]
    },
    {
      "id": 899,
      "title": "foo.fsx",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-24T21:35:41.6830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 900,
      "title": "foo.fsx",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-24T21:36:19.8530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 901,
      "title": "My Title",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-26T17:02:00.0400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 902,
      "title": "abc",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-26T17:09:28.3200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 906,
      "title": "Abcdefg",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-26T19:17:53.9870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 907,
      "title": "Abcdefg",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-26T19:18:35.2830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 908,
      "title": "Abcdefg",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-26T19:19:56.0930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 919,
      "title": "Pex4fun - Merging strings",
      "comment": "A random pex4fun puzzle to write a snippet to merge two strings. ",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-10-27T20:04:41.6230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "string",
        "pex4fun",
        "fold",
        "generic functions"
      ]
    },
    {
      "id": 920,
      "title": "Test Nonsense",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-10-29T00:21:17.2000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 921,
      "title": "Porter Stemmer",
      "comment": "An Implementation of the Porter Stemming Algorithm in F# for text analysis.\r\n\r\nPlease see: http://tartarus.org/martin/PorterStemmer/",
      "author": "Faisal Waris",
      "link": "http://fwaris.wordpress.com/2012/10/30/porter-stemmer-in-f/",
      "date": "2012-10-30T19:56:06.6930000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "NLP"
      ]
    },
    {
      "id": 922,
      "title": "Density of sparse matrix product",
      "comment": "A quick exploration of the rather useless question \"how does the density of the product of 2 sparse matrices look like?\"",
      "author": "Mathias Brandewinder",
      "link": "www.clear-lines.com/blog",
      "date": "2012-11-01T02:23:45.1000000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "algebra",
        "simulation"
      ]
    },
    {
      "id": 923,
      "title": "Density of sparse matrix product",
      "comment": "A quick exploration of the rather useless question \"how does the density of the product of 2 sparse matrices look like?\"",
      "author": "Mathias Brandewinder",
      "link": "www.clear-lines.com/blog",
      "date": "2012-11-01T02:26:16.0500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "math",
        "algebra",
        "simulation"
      ]
    },
    {
      "id": 924,
      "title": "Fibonacci snippet implement with Continuation",
      "comment": "Normally, when we implement Fibonacci sequence, we use recursive function, but it will encounter the overflow exception with the big data. Below is the Fibonacci snippet with continuation, and in this way, it won't encounter the overflow exception.",
      "author": "Jeallyn Duan",
      "link": "",
      "date": "2012-11-01T09:13:51.4970000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Fibonacci",
        "Continuation"
      ]
    },
    {
      "id": 925,
      "title": "Reversi Kata",
      "comment": "Quick & dirty solution to Reversi kata: http://codingdojo.org/cgi-bin/wiki.pl?KataReversi",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-11-01T12:08:04.5930000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Reversi",
        "Kata",
        "Board",
        "Game"
      ]
    },
    {
      "id": 926,
      "title": "Reversi Kata ",
      "comment": "Solution to the Reversi Kata finding legal moves on a reversi board. unoptimized",
      "author": "",
      "link": "",
      "date": "2012-11-01T12:23:28.3800000",
      "likes": 3,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Reversi"
      ]
    },
    {
      "id": 927,
      "title": "FsSql usage example",
      "comment": "FsSql is originally here: https://github.com/mausch/FsSql and better sample is there too but I just want to share it.",
      "author": "Ash Harley",
      "link": "",
      "date": "2012-11-01T12:27:06.6800000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sql",
        "sqlite",
        "F#",
        "database"
      ]
    },
    {
      "id": 928,
      "title": "Reversi Kata at ProgFsharp",
      "comment": "The Official Solution.",
      "author": "Nick",
      "link": "",
      "date": "2012-11-01T12:42:31.6570000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "reversi"
      ]
    },
    {
      "id": 929,
      "title": "Undertone: First line of Baa baa black sheep",
      "comment": "Playing with Undertone, using operators for terse tune definitions.",
      "author": "Michael Newton",
      "link": "https://github.com/robertpi/Undertone",
      "date": "2012-11-02T12:18:26.4900000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Undertone",
        "sequences",
        "progfsharp"
      ]
    },
    {
      "id": 930,
      "title": "OData Type Provider to StackOverflow",
      "comment": "References and type definition to open StackOverflow API over OData",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-11-02T13:58:33.9770000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Type Providers",
        "StackOverflow"
      ]
    },
    {
      "id": 931,
      "title": "Primes",
      "comment": "Generates the Prime Number Sequence.",
      "author": "AdamSpeight2008",
      "link": "",
      "date": "2012-11-04T01:42:10.7370000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Mathematics",
        "Sequence",
        "F#"
      ]
    },
    {
      "id": 932,
      "title": "An equilibrium list",
      "comment": "An equilibrium index of this array is any integer P such that 0 ≤ P < N and the sum of elements of lower indices is equal to the sum of elements of higher indices. The following is an implementation of such equilibrium list (given the input is a list).",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-11-05T14:28:21.5400000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "equilibrium index",
        "list"
      ]
    },
    {
      "id": 933,
      "title": "Array Units",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-11-06T07:23:38.2970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 934,
      "title": "ListUnit",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-11-06T07:25:00.8870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 935,
      "title": "Joint Life Annuity",
      "comment": "This Joint Life Annuity calculation relies on the objects and functions defined in Single Life Annuity. \r\nA joint life annuity calculates the present value of an annuity from current age to death of a member and another life (spouse).\r\nThe implementation below uses the AgeVectorBuilder from the Single Life Annuity snippet in two examples: The first defines a simple Joint Life Annuity that assumes no age difference between the two lives. The second assumes an N year age difference. The samples both rely on a male mortality table (PMA92 (C=2003)) and a female mortality table (PFA92 (C=2003)) which are extracts of publicly available mortality tables (http://www.actuaries.org.uk/research-and-resources/documents/pma92-pensioners-males-amounts).",
      "author": "Kevin Roche",
      "link": "@CdeRoiste",
      "date": "2012-11-07T11:17:52.9070000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Actuarial",
        "annuity",
        "computation expression"
      ]
    },
    {
      "id": 936,
      "title": "Contains Phrase",
      "comment": "Returns a value indicating whether the specified phrase occurs within the given text.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-11-09T22:21:58.9330000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "NUnit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Text"
      ]
    },
    {
      "id": 937,
      "title": "Yet another immutable queue implementation",
      "comment": "Yet another immutable queue implementation",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-11-11T03:06:29.3200000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Immutable queues"
      ]
    },
    {
      "id": 938,
      "title": "Testing",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-11-12T00:23:54.1070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 939,
      "title": "All subsets of a set",
      "comment": "A function implemented using sequence expressions that returns all subsets of a specified set. The function is not optimized, but it is very easy to understand.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-11-12T00:37:16.2470000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "AutoMapper",
        "FSPowerPack.Community"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "set",
        "sequences",
        "sequence expressions",
        "subset"
      ]
    },
    {
      "id": 940,
      "title": "All subsets of a set",
      "comment": "A function implemented using sequence expressions that returns all subsets of a specified set. The function is not optimized, but it is very easy to understand.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-11-12T01:04:42.7000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "AutoMapper",
        "FSPowerPack.Community"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "set",
        "sequences",
        "sequence expressions",
        "subset"
      ]
    },
    {
      "id": 941,
      "title": "All subsets of a set",
      "comment": "A function implemented using sequence expressions that returns all subsets of a specified set. The function is not optimized, but it is very easy to understand.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-11-12T01:22:17.5400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 942,
      "title": "All subsets of a set",
      "comment": "A function implemented using sequence expressions that returns all subsets of a specified set. The function is not optimized, but it is very easy to understand.",
      "author": "Tomas Petricek",
      "link": "",
      "date": "2012-11-12T01:23:11.2400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 943,
      "title": "'until' function inspired by Scala",
      "comment": "Create a list of int in range [init, upper).",
      "author": "Gab_km",
      "link": "https://twitter.com/gab_km",
      "date": "2012-11-14T05:58:56.7870000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Collection"
      ]
    },
    {
      "id": 944,
      "title": "Conway sequence",
      "comment": "Generate a Conway \"look and say\" sequence. Each sequence element is generated by reading the previous element from left to right and saying how many repeats of each item there are.  Eg. 1211-> 111221 (ie. \"one one, one two, two ones\").",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-11-15T15:17:07.7370000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Sequences"
      ]
    },
    {
      "id": 945,
      "title": "Sequence of all Subsets of a set",
      "comment": "A function that returns a sequence of subsets generated by the power set of a specified set. The function use bit patterns to generate sets. for example the power set generated by a set with 3 elements set [1;2;3;] has 2^3 sets. each set in the power set is represented by the set bits in each of the integer from 0 to (2^3) -1   ",
      "author": "isaiah perumalla",
      "link": "isaiahperumalla.wordpress.com",
      "date": "2012-11-16T15:24:21.5930000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Sets",
        "Power sets",
        "Sequences",
        "Bit patterns",
        "Algorithms"
      ]
    },
    {
      "id": 946,
      "title": "Break a sequence on a predicate",
      "comment": "Break a sequence into sub-sequences, where the break occurs at points where the specified function returns true when provided with the n'th and the n+1'th elements of the input sequence.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-11-16T16:35:07.0400000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Sequences"
      ]
    },
    {
      "id": 947,
      "title": "Maximum Sublist Problem",
      "comment": "According to Wikipedia, the maximum sub-array problem is a programming task of finding the contiguous sub-array within a one-dimensional array of numbers (containing at least one positive number) which has the largest sum. The following is an attempt to solve this problem by using F# list rather than array. ",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-11-18T00:17:42.5230000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Subarray",
        "Sublist",
        "List"
      ]
    },
    {
      "id": 948,
      "title": "Mocking library",
      "comment": "F# Mocking library with a fluent interface Moq users should find familiar. Generate mocks for interfaces and abstract types. Supports mocking methods, properties and events. Specify arguments as wildcards or values to match. Define results as values, computed values or exceptions.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2012-11-18T22:53:34.4500000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "testing",
        "quotations"
      ]
    },
    {
      "id": 949,
      "title": "The Dominator of Array",
      "comment": "The dominator of array A is the value that occurs in more than half of the elements of A. It is a zero-indexed based array consisting of N integers (A [] with N length). To find the index array of the dominator from a A [], we can use a helpful function from Seq module call 'Seq.groupBy' to mitigate the implementation of a solution. ",
      "author": "Joel Huang",
      "link": "",
      "date": "2012-11-19T11:25:10.5600000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Sequence",
        "Dominator",
        "Seq.groupBy"
      ]
    },
    {
      "id": 950,
      "title": "Factorial",
      "comment": "Factorial versus tail recursion",
      "author": "Laco",
      "link": "",
      "date": "2012-11-19T12:06:57.6870000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "tail recursion",
        "factorial"
      ]
    },
    {
      "id": 951,
      "title": "Fibonacci",
      "comment": "fibonacci by Seq.Unfold",
      "author": "Laco",
      "link": "",
      "date": "2012-11-19T13:16:31.3030000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fibonacci",
        "unfold"
      ]
    },
    {
      "id": 952,
      "title": "Substituting names",
      "comment": "An example that shows how we can represent unique names (using classes) and how to substitute names in any F# type type defined using records, discriminated unions and tuples.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2012-11-20T18:43:44.9030000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "names",
        "reflection"
      ]
    },
    {
      "id": 953,
      "title": "All subsets of a set",
      "comment": "A function implemented using sequence expressions that returns all subsets of a specified set. The function is not optimized, but it is very easy to understand.",
      "author": "test",
      "link": "http://tomasp.net",
      "date": "2012-11-20T19:38:49.7670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 954,
      "title": "test.fsx",
      "comment": "A script exported from Try F#",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-20T22:21:19.4900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 955,
      "title": "Enumerate files without permissions errors",
      "comment": "It's comparatively hard to enumerate files in a directory and subdirectories without getting exceptions for items you don't have permission to read.  Here's a function which just ignores items you can't read and enumerates everything else.  Useful for searching big network shares.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-11-21T15:25:29.3230000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "files",
        "io",
        "searching"
      ]
    },
    {
      "id": 956,
      "title": "one.fsx",
      "comment": "A snippet generated by Try F#",
      "author": "chrismarinos",
      "link": "",
      "date": "2012-11-21T15:54:16.4630000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 957,
      "title": "one.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "chrismarinos",
      "link": "",
      "date": "2012-11-21T16:06:31.0700000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 958,
      "title": "one.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "chrismarinos",
      "link": "",
      "date": "2012-11-21T16:06:46.2870000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 959,
      "title": "one.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "chrismarinos",
      "link": "",
      "date": "2012-11-21T16:22:30.7000000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 960,
      "title": "one.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "chrismarinos",
      "link": "",
      "date": "2012-11-21T16:31:13.4470000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 961,
      "title": "one.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "chrismarinos",
      "link": "",
      "date": "2012-11-21T16:31:15.2900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 962,
      "title": "Detecting fraud with Benford's law",
      "comment": "Many datasets, particularly those which span several orders of magnitude, have a special property.  About 30% of the initial digits of all the data items will be the digit '1'.  This can be used to detect fraud, for instance in expenses claims, as people tend to concoct figures which don't have this property.  These functions implement one possible test for matching Benford's law.  (Credits in the comments.)",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-11-21T21:20:25.0570000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "financial"
      ]
    },
    {
      "id": 963,
      "title": "Implement a suppression list",
      "comment": "Take a sequence and exclude values from it based on another 'suppression list' sequence.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-11-22T14:13:23.1700000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "sequences"
      ]
    },
    {
      "id": 964,
      "title": "Type-inference friendly division and multiplication",
      "comment": "F# necessarily forces you to explicitly cast between int and float for operations such as division.  This is necessary because implicit conversion would make type inference much harder.  However having to cast all the time in your code can be a pain.  These operators reduce the overhead to one or at most two characters of code.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2012-11-22T15:04:11.8270000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "operators"
      ]
    },
    {
      "id": 965,
      "title": "numerics-portable.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "cpoulain",
      "link": "",
      "date": "2012-11-23T21:20:21.7030000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 966,
      "title": "numerics-portable.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "cpoulain",
      "link": "",
      "date": "2012-11-23T21:20:28.9200000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 967,
      "title": "file1.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "nicolas2",
      "link": "",
      "date": "2012-11-26T19:28:38.2870000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 968,
      "title": "file1.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "nicolas2",
      "link": "",
      "date": "2012-11-26T19:29:31.5570000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 969,
      "title": "file2.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "Levert",
      "link": "",
      "date": "2012-11-26T20:27:48.6530000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 970,
      "title": "file2.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "Levert",
      "link": "",
      "date": "2012-11-26T20:28:25.2170000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 971,
      "title": "Combinations n choose k",
      "comment": "given an array n generates all lists with k choices from n",
      "author": "isaiah perumalla",
      "link": "isaiahperumalla.wordpress.com",
      "date": "2012-11-27T10:53:34.1200000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "Algorithms",
        "Combinations"
      ]
    },
    {
      "id": 972,
      "title": "Preempting NullReferenceExceptions",
      "comment": "When interfacing .NET libraries that potentially yield null values, a lot of boilerplate code is required to ensure no NullReferenceExceptions are raised. This is an attempt to avoid such repetition with computation expressions.",
      "author": "Eirik Tsarpalis",
      "link": "",
      "date": "2012-11-28T16:20:22.2430000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "Nullable types",
        "computation expressions"
      ]
    },
    {
      "id": 973,
      "title": "file2.fsx",
      "comment": "A snippet exported from Try F#.",
      "author": "Levert",
      "link": "",
      "date": "2012-11-28T17:41:12.5230000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 974,
      "title": "test.fsx",
      "comment": "only a test",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T20:20:54.1130000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 975,
      "title": "test.fsx",
      "comment": "only a test",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T20:21:02.5200000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 976,
      "title": "test.fsx",
      "comment": "another test",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T20:24:25.0430000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 977,
      "title": "test.fsx",
      "comment": "a test with tags",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T20:37:16.1400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp",
        ""
      ]
    },
    {
      "id": 978,
      "title": "test.fsx",
      "comment": "a test with tags",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T20:42:04.2700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp",
        "arandomtagfortesting"
      ]
    },
    {
      "id": 979,
      "title": "test.fsx",
      "comment": "test multiple tags",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T20:42:26.1600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp",
        "anotherrandomtagfortesting"
      ]
    },
    {
      "id": 980,
      "title": "test.fsx",
      "comment": "abcd",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T21:37:28.2970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 981,
      "title": "test.fsx",
      "comment": "abcd",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T21:37:47.2830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "pwnt#ab!@#",
        "tryfsharp"
      ]
    },
    {
      "id": 982,
      "title": "test.fsx",
      "comment": "abcd",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T21:37:56.9400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "pwnt#ab!@#   asdf",
        "tryfsharp"
      ]
    },
    {
      "id": 983,
      "title": "test.fsx",
      "comment": "abcd",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T21:38:14.1300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "pwnt#ab!@#   asdf;",
        "tryfsharp"
      ]
    },
    {
      "id": 984,
      "title": "test.fsx",
      "comment": "abcd",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T21:38:28.0870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "pwnt#ab!@#   asdf;$%^#(@#$)@#%@*#)%&@!%@!$!@#",
        "tryfsharp"
      ]
    },
    {
      "id": 985,
      "title": "test.fsx",
      "comment": "abcd",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T21:38:59.9470000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "pwnt#ab!@#   asdf;$%^#(@#$)@#%@*#)%&@!%@!$!@#",
        "",
        "tryfsharp"
      ]
    },
    {
      "id": 986,
      "title": "test.fsx",
      "comment": "abcd",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T21:41:52.1630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "pwnt#ab!@#   asdf;$%^#(@#$)@#%@*#)%&@!%@!$!@#",
        "",
        "tryfsharp"
      ]
    },
    {
      "id": 987,
      "title": "test.fsx",
      "comment": "abcd",
      "author": "chriscanary",
      "link": "",
      "date": "2012-11-28T21:41:57.2870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "pwnt#ab!@#   asdf;$%^#(@#$)@#%@*#)%&@!%@!$!@#",
        "",
        "tryfsharp"
      ]
    },
    {
      "id": 988,
      "title": "Checking wrong records",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-11-30T03:21:56.4570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 989,
      "title": "LII",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-06T16:19:54.7830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 990,
      "title": "Rudimentary IL dissembler for use within FSI.",
      "comment": "got distracted and decided I wanted to be able to 'disassemble' a function inside of FSI, much like you can do in many Lisps, this isnt very complete and I think it will only work on the most basic functions, but it was very challenging to get working so I thought I would paste it.",
      "author": "David Klein",
      "link": "https://twitter.com/davidkl_",
      "date": "2012-12-07T03:30:01.0630000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Reflection",
        "Dissembler"
      ]
    },
    {
      "id": 991,
      "title": "A reversible stateful execution workflow",
      "comment": "This is an attempt to define a workflow that contains reversible stateful computations. In the event of an exception being raised, all insofar successful operations will fold back to their original state. The implementation uses the notion of reversible computation primitives, which are composed using a free monad that is interpreted with a trampoline.",
      "author": "Eirik Tsarpalis",
      "link": "http://www.twitter.com/eiriktsarpalis",
      "date": "2012-12-07T16:46:07.1370000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "reversible computation",
        "workflow",
        "stateful execution"
      ]
    },
    {
      "id": 992,
      "title": "QuickLinq Helpers",
      "comment": "Variations on some of the LINQ extension members which do not require a type annotation on the lambda argument when used from F#",
      "author": "Don Syme",
      "link": "http://blogs.msdn.com/b/dsyme/archive/2012/12/07/quicklinq-helpers.aspx",
      "date": "2012-12-07T23:35:39.7830000",
      "likes": 12,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Linq;Queries"
      ]
    },
    {
      "id": 993,
      "title": "Calculate MD5, SHA1, SHA256, SHA384, SHA512 and RIPEMD160 of files",
      "comment": "This is my first experience to write scripts on F# that's why I'll be pleased if somebody will make this snippet more perfectly. Usage: fsi hasher.fsx foo test.dat test.txt bar",
      "author": "greg zakharov",
      "link": "",
      "date": "2012-12-10T08:23:17.0870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "crypto",
        "scripting",
        "hash"
      ]
    },
    {
      "id": 994,
      "title": "Champions League Round of 16 Draw",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-10T22:33:05.6230000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 995,
      "title": "\"Where\" recursive expression tree parser",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-11T14:47:35.5900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 996,
      "title": "juan",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-11T14:51:19.2430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 997,
      "title": "qwe",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-11T15:11:18.6400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 998,
      "title": "Csv + Registry ",
      "comment": "Had a C tool to parse a csv of queries and check registry against query, then spit out the result, was horrible to parse and model the data in C (just too much code) so I have converted it to F#.",
      "author": "David Klein",
      "link": "https://twitter.com/davidkl_",
      "date": "2012-12-12T01:12:42.4500000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "CSV",
        "Registry",
        "Basic Parsing"
      ]
    },
    {
      "id": 999,
      "title": "success!",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-12T15:21:36.5200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1000,
      "title": "baby XRM Provider sample",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-13T11:44:10.9100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1001,
      "title": "Lift.fsx",
      "comment": "Example of Lift Curve",
      "author": "zman",
      "link": "",
      "date": "2012-12-15T07:14:31.8470000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 1002,
      "title": "Lift.fsx",
      "comment": "Example of Lift Curve",
      "author": "zman",
      "link": "",
      "date": "2012-12-15T07:14:40.7370000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 1003,
      "title": "The Facet Pattern",
      "comment": "The Facet Pattern\r\nUsed for Principle of Least Authority (POLA)\r\nInspired by: \"The Lazy Programmer's Guide to Secure Computing\"\r\nhttp://www.youtube.com/watch?v=eL5o4PFuxTY",
      "author": "user3539",
      "link": "http://www.youtube.com/watch?v=eL5o4PFuxTY",
      "date": "2012-12-15T20:10:19.7770000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Facet Pattern",
        "Principle of Least Authority",
        "POLA",
        "Secure Computing"
      ]
    },
    {
      "id": 1004,
      "title": "Generate Powerset using bit pattern",
      "comment": "Generate the powerset of a set using a bit pattern.",
      "author": "Muigai",
      "link": "http://www.codeproject.com/script/Articles/MemberArticles.aspx?amid=4829645",
      "date": "2012-12-17T11:04:57.5570000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Powerset Bitwise and Lists"
      ]
    },
    {
      "id": 1005,
      "title": "file1.fsx",
      "comment": "test",
      "author": "Levert",
      "link": "",
      "date": "2012-12-17T18:32:17.0200000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 1006,
      "title": "streams, memoization, suspension",
      "comment": "translation of http://www.cs.cmu.edu/~rwh/introsml/techniques/memoization.htm , no particular reason, just satisfying a tangent, read the cmu site for comments & insights.",
      "author": "David Klein",
      "link": "https://twitter.com/davidkl_",
      "date": "2012-12-20T22:01:09.2600000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lazy",
        "memo",
        "streams"
      ]
    },
    {
      "id": 1007,
      "title": "Hex string to byte array",
      "comment": "Hex string to byte array via sequences",
      "author": "Gennady Loskutov",
      "link": "",
      "date": "2012-12-21T09:17:05.2200000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "hex",
        "conversion"
      ]
    },
    {
      "id": 1008,
      "title": "Splitting sequences of arbitrary unions",
      "comment": "A small snippet that groups sequences of arbitrary unions by branch type.",
      "author": "Eirik Tsarpalis",
      "link": "http://www.twitter.com/eiriktsarpalis",
      "date": "2012-12-21T18:52:53.6930000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Discriminated Unions",
        "Reflection"
      ]
    },
    {
      "id": 1009,
      "title": "recursive to dynamic programming with ycombinator",
      "comment": "Dynamic programming is equivalent to recursion + some way to remember the results (as far as I undertand)\r\nThe y combinator allows to \"tie\" a previously \"untied\" recursion, which itself allows to compositionally inject additional steps in the recursion.\r\n\r\nThis allows to go from recursion to dynamic programming in a structured way.\r\n\r\nThis exemple is a bit contrived, as there are no overlapping subproblems, which would be the case in more interesting problem (dtw etc..)",
      "author": "Nicolas2",
      "link": "http://www.awarenetwork.org/etc/gamma/?x=4",
      "date": "2012-12-25T12:10:35.7270000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "recursion",
        "dynamic programming",
        "ycombinator"
      ]
    },
    {
      "id": 1010,
      "title": "A parametric fixpoint combinator",
      "comment": "Writing functions that recursively generate lambdas from a given parameter is a useful practice, but things get trickier when you need the output functions themselves to be mutually recursive. This is my attempt at creating a fix-point combinator that transparently handles this requirement. It also gives memoization for free as a side-effect.",
      "author": "Eirik Tsarpalis",
      "link": "http://www.twitter.com/eiriktsarpalis",
      "date": "2012-12-28T20:47:15.6570000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Fixpoint combinator",
        "memoization",
        "denotational semantics"
      ]
    },
    {
      "id": 1011,
      "title": "Staged Interpreter ",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-29T10:08:48.1930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Unquote FSPowerPack.Community"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1012,
      "title": "Staged Interpreter ",
      "comment": "A staged intepreter that embeds a DSL in F#. Translated from MetaOCaml. Details in this paper http://www.cs.rice.edu/~taha/publications/journal/gttse07.pdf",
      "author": "Muigai",
      "link": "http://www.codeproject.com/Members/Muigai-Mwaura",
      "date": "2012-12-29T10:15:38.6730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Unquote FSPowerPack.Community"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Interpreter Metaprogramming"
      ]
    },
    {
      "id": 1013,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2012-12-29T17:46:07.3730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1014,
      "title": "Church numerals",
      "comment": "Church numerals via rank-2 polymorphism",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2012-12-31T17:44:43.1070000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "rank-2 polymorphism",
        "Church numerals"
      ]
    },
    {
      "id": 1015,
      "title": "Solving the expression problem",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-01-03T04:04:48.0070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1016,
      "title": "Extending the standard query builder",
      "comment": "The example shows how to extend F# 3.0 'query' builder with a new custom operation that will work with standard lists, but also with queries that are translated using LINQ expressiont trees (such as databases).",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-01-08T16:11:07.4600000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "query",
        "querybuilder",
        "quotation",
        "run",
        "database",
        "list"
      ]
    },
    {
      "id": 1017,
      "title": "Frequency Sort",
      "comment": "Sort a list by a frequency distribution. Frequency is calculated as per a a provided function. In the test case a list of lists is sorted by the frequency of the length of the lists.",
      "author": "Muigai",
      "link": "http://www.codeproject.com/Members/Muigai-Mwaura",
      "date": "2013-01-09T20:41:05.6300000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sorting",
        "Frequency Sort"
      ]
    },
    {
      "id": 1018,
      "title": "hf",
      "comment": "jahn",
      "author": "",
      "link": "",
      "date": "2013-01-11T11:35:53.0200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "hf"
      ]
    },
    {
      "id": 1019,
      "title": "¿",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-01-11T15:50:39.6470000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1020,
      "title": "Inverse error function (float)",
      "comment": "let erfinv x =\r\n  let mutable p = 0.0\r\n  let mutable w = -log((1.0-x)*(1.0+x)) // corrected sign\r\n  if w < 5.000000 then\r\n    w <- w - 2.500000\r\n    p <- 2.81022636e-08\r\n    p <- 3.43273939e-07 + p*w\r\n    p <- -3.5233877e-06 + p*w\r\n    p <- -4.39150654e-06 + p*w\r\n    p <- 0.00021858087 + p*w\r\n    p <- -0.00125372503 + p*w\r\n    p <- -0.00417768164 + p*w\r\n    p <- 0.246640727 + p*w\r\n    p <- 1.50140941 + p*w \r\n  else\r\n    w <- sqrt w - 3.000000\r\n    p <- -0.000200214257\r\n    p <- 0.000100950558 + p*w\r\n    p <- 0.00134934322 + p*w\r\n    p <- -0.00367342844 + p*w\r\n    p <- 0.00573950773 + p*w\r\n    p <- -0.0076224613 + p*w\r\n    p <- 0.00943887047 + p*w\r\n    p <- 1.00167406 + p*w\r\n    p <- 2.83297682 + p*w\r\n  p*x",
      "author": "Clever people",
      "link": "http://people.maths.ox.ac.uk/gilesm/files/gems_erfinv.pdf",
      "date": "2013-01-13T11:46:34.1330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "math",
        "inverse error",
        "erfinv"
      ]
    },
    {
      "id": 1021,
      "title": "Type Safe Higher-order abstract syntax",
      "comment": "Type Safe Higher-order abstract syntax via GADT encoding",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2013-01-13T15:12:06.0270000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "HOAS",
        "GADT"
      ]
    },
    {
      "id": 1022,
      "title": "Cooperative cancellation in Async workflows",
      "comment": "A simple implementation that protects the nested workflow from external cancellation. The external cancellation token is passed as an argument for cooperative cancellation. Kudos to Gian Ntzik for this one.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-01-14T22:03:15.6530000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Async",
        "cancellation"
      ]
    },
    {
      "id": 1023,
      "title": "Charting",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-01-16T09:59:41.2500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "MSDN.FSharpChart.dll"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1024,
      "title": "An F# implementation of Jesse's Latest Blog Post",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-01-18T00:19:23.9900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1025,
      "title": "Minimal SlimDX DirectX 11 Compute Shader",
      "comment": "This is the minimum F# code required to run and view a compute shader with SlimDX in DirectX 11.",
      "author": "gradbot",
      "link": "gradbot.blogspot.com",
      "date": "2013-01-23T04:42:48.0070000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "SlimDX",
        "DirectX",
        "compute",
        "shader"
      ]
    },
    {
      "id": 1026,
      "title": "SlimDX static noise compute shader",
      "comment": "A compute shader using wang's hash to make a static filled window.  Runs at 2000 frames per second on my machine.",
      "author": "gradbot",
      "link": "http://gradbot.blogspot.com/",
      "date": "2013-01-23T06:06:42.2530000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "SlimDX",
        "DirectX",
        "compute",
        "shader"
      ]
    },
    {
      "id": 1027,
      "title": "Triangle rendering using SlimDX",
      "comment": "Minimal code to render some colored triangles.",
      "author": "gradbot",
      "link": "gradbot.blogspot.com",
      "date": "2013-01-24T02:27:38.1430000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "slimdx",
        "triangle",
        "directx",
        "vertex",
        "pixel",
        "shader"
      ]
    },
    {
      "id": 1028,
      "title": "Thread safe caching with expiry",
      "comment": "A construct that caches the result of a computation/request up to a given expiration interval. Makes use of the atom implementation found in http://fssnip.net/bw",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-01-25T22:16:21.8030000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Atomic",
        "caching"
      ]
    },
    {
      "id": 1029,
      "title": "Fast Fibonacci ",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-01-26T12:31:52.2630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "fscheck",
        "FsCheck.Xunit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1030,
      "title": "JessiTron.fsx",
      "comment": "An F# implementation of Jessica Kerr's blog post on imperative to functional.  http://blog.jessitron.com/2013/01/from-imperative-to-data-flow-to.html",
      "author": "jbuedel",
      "link": "",
      "date": "2013-01-28T16:00:15.7930000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 1031,
      "title": "Banana split",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-01-30T11:55:09.4870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1032,
      "title": "Extra Micro ORM",
      "comment": "Easy database access.",
      "author": "igeta",
      "link": "",
      "date": "2013-01-30T13:46:27.0030000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "database",
        "orm"
      ]
    },
    {
      "id": 1033,
      "title": "What's My SuperBowl Pool Box Worth?",
      "comment": "If I'd entered the same SuperBowl Pool every year, and received the same numbers every year, how much would I have won? ",
      "author": "Wayne Bradney",
      "link": "http://lesscode.net",
      "date": "2013-01-31T02:43:44.8570000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fun"
      ]
    },
    {
      "id": 1034,
      "title": "Yet another (combinatorial) way to compute the factorial",
      "comment": "Compute the factorial of a given number by building the list of permutations of the list of first n numbers [1..n] and taking its length\r\n",
      "author": "Dmitry Soshnikov",
      "link": "",
      "date": "2013-02-01T20:52:14.9030000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "factorial",
        "tutorial"
      ]
    },
    {
      "id": 1035,
      "title": "DivRem Operator",
      "comment": "Defines the operator /% as DivRem for int, int64 and bigint.",
      "author": "Diego Frata",
      "link": "https://github.com/diegofrata",
      "date": "2013-02-01T21:09:36.9300000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Operator",
        "Numeric",
        "Math",
        "Division",
        "Modulus",
        "Remainder"
      ]
    },
    {
      "id": 1036,
      "title": "String Manipulation",
      "comment": "hackthissite.org programming level 12, string manipulation.",
      "author": "David Klein",
      "link": "https://twitter.com/action_dk",
      "date": "2013-02-02T02:55:59.3970000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "String Manipulation"
      ]
    },
    {
      "id": 1037,
      "title": "Generic function",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-02-02T14:29:15.9730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1038,
      "title": "Trace-mode pipeline operators",
      "comment": "This fake module can trace pipeline operators.",
      "author": "Nobuhisa",
      "link": "http://d.hatena.ne.jp/Nobuhisa/",
      "date": "2013-02-03T04:58:07.3600000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "pipeline",
        "debug"
      ]
    },
    {
      "id": 1039,
      "title": "Generate password-like string",
      "comment": "Generate password-like string and save it to clipboard.\r\nOriginal idea is here: http://d.hatena.ne.jp/rubyco/20130202/password (Japanese)\r\n",
      "author": "yukitos",
      "link": "",
      "date": "2013-02-03T07:48:15.8100000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Utility"
      ]
    },
    {
      "id": 1040,
      "title": "Walking object graphs",
      "comment": "Implemetation picked up from http://msdn.microsoft.com/en-us/library/system.runtime.serialization.objectmanager.aspx",
      "author": "Eirik Tsarpalis",
      "link": "http://www.twitter.com/eiriktsarpalis",
      "date": "2013-02-04T23:09:43.0230000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "reflection",
        "object graph"
      ]
    },
    {
      "id": 1041,
      "title": "lii chat module ",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-02-05T15:38:15.1030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1042,
      "title": "Copy a directory of files",
      "comment": "Copies a directory of files. Based on code from http://msdn.microsoft.com/en-us/library/bb762914.aspx",
      "author": "Wallace Kelly",
      "link": "",
      "date": "2013-02-05T22:45:25.5830000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "files",
        "directory"
      ]
    },
    {
      "id": 1043,
      "title": "Delete the matching files in a directory",
      "comment": "Accepts a directory and wildcard pattern to delete files in a folder",
      "author": "Wallace Kelly",
      "link": "",
      "date": "2013-02-05T23:06:06.8330000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "files",
        "directory"
      ]
    },
    {
      "id": 1044,
      "title": "A polyvariadic fixpoint in F#",
      "comment": "Or who needs non-strict semantics when you have references?",
      "author": "Eirik Tsarpalis",
      "link": "http://www.twitter.com/eiriktsarpalis",
      "date": "2013-02-05T23:29:39.3400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Y combinator",
        "polyvariadic fixpoint"
      ]
    },
    {
      "id": 1045,
      "title": "Build a Visual Studio solution",
      "comment": "Builds a Visual Studio solution.",
      "author": "Wallace Kelly",
      "link": "",
      "date": "2013-02-06T00:16:39.7300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Visual Studio",
        "msbuild"
      ]
    },
    {
      "id": 1046,
      "title": "GC Friendly Fixpoint",
      "comment": "Fast and GC friendly fixpoint combinator.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2013-02-06T14:21:29.6230000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Fixpoint"
      ]
    },
    {
      "id": 1047,
      "title": "Declarative argument parsing",
      "comment": "A proof of concept on how one could build an argument parsing scheme simply by declaring a discriminated union.",
      "author": "Eirik Tsarpalis",
      "link": "http://www.twitter.com/eiriktsarpalis",
      "date": "2013-02-07T15:00:55.9030000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Argument parsing"
      ]
    },
    {
      "id": 1048,
      "title": "Pattern Matching",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-02-08T00:04:02.4300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1049,
      "title": "basics",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-02-08T00:11:29.9770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1050,
      "title": "basic pattern matching",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-02-08T00:17:44.5630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1051,
      "title": "Type-safe URL templates for Nancy",
      "comment": "The Nancy web framework parses URLs for you, and passes requests under a given URL route and HTTP method to your program. It relies heavily on C# dynamic objects; these don't translate well in F# code, and it's easy to make mistakes that only show up at run time.\r\n\r\nHere we define one F# record type for each route, with an attribute that defines the URL, with placeholders for each field in the record. These types implement one generic interface for each HTTP method they support: for GET, PUT and POST, these generic interfaces also specify the types of the HTTP request and response bodies.",
      "author": "Tim Robinson",
      "link": "",
      "date": "2013-02-09T23:14:00.4670000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Nancy",
        "Nancy.Hosting.Self",
        "Tavis.UriTemplates"
      ],
      "source": "",
      "versions": 4,
      "tags": [
        "web",
        "nancy"
      ]
    },
    {
      "id": 1052,
      "title": "Reversi Kata solution",
      "comment": "Reversi Kata solution from February 2013 London F# Meetup Coding Kata.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-02-12T22:44:30.8800000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Reversi",
        "Kata",
        "Board",
        "Game"
      ]
    },
    {
      "id": 1053,
      "title": "worldbank-done.fsx",
      "comment": "Comparing university enrollment rate in Czech Republic and OECD countries (works in tryfsharp.org!)",
      "author": "tomasp",
      "link": "",
      "date": "2013-02-15T06:51:38.6600000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "worldbank",
        "type provider",
        "charting",
        "tryfsharp"
      ]
    },
    {
      "id": 1054,
      "title": "CSS EDSL in F#",
      "comment": "F# to CSS compiler (CSS EDSL in F#) <+> inspired by Clay and FAKE - https://github.com/Cynede/Failess",
      "author": "Heather",
      "link": "https://github.com/Cynede/Failess",
      "date": "2013-02-15T07:27:02.2430000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Failess 0.0.2-alpha"
      ],
      "source": "",
      "versions": 4,
      "tags": [
        "F#",
        "CSS",
        "DSL"
      ]
    },
    {
      "id": 1055,
      "title": "Eval Quotations",
      "comment": "Evaluates a useful subset of F# quotations at run-time (without the F# PowerPack API).",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-02-16T09:25:38.9630000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "NUnit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "quotations",
        "compilation",
        "run time"
      ]
    },
    {
      "id": 1056,
      "title": "Calculate PI using Monte Carlo",
      "comment": "Estimate the value of PI using a Monte Carlo simulation.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-02-20T14:36:59.5500000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Fmat"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "monte carlo",
        "simulation",
        "math",
        "pi"
      ]
    },
    {
      "id": 1057,
      "title": "Agent that can upgrade its functionality on the fly.",
      "comment": "Agent that can upgrade its functionality on the fly.\r\n(F# MailboxProcessor containing function in the loop...)\r\n",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2013-02-21T01:33:25.6930000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "MailboxProcessor",
        "agent"
      ]
    },
    {
      "id": 1058,
      "title": "Count noise-lines in C# code",
      "comment": "This is the code I used to generate this pie chart:\r\n\r\nhttp://pic.twitter.com/PgPEFByg56\r\n\r\nEnough said?",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2013-02-22T08:23:49.2000000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "MSDN.FSharpChart.dll"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "C#",
        "regex"
      ]
    },
    {
      "id": 1059,
      "title": "cell-simulation.fsx",
      "comment": "F# Simulation lab\nPart III Systems Biology\nCambridge University",
      "author": "Samin",
      "link": "",
      "date": "2013-02-22T16:54:03.3070000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "simulation javascript html5",
        "tryfsharp"
      ]
    },
    {
      "id": 1060,
      "title": "cell-simulation.fsx",
      "comment": "F# Simulation lab\nPart III Systems Biology\nCambridge University",
      "author": "Samin",
      "link": "",
      "date": "2013-02-22T16:54:13.7630000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "simulation javascript html5",
        "tryfsharp"
      ]
    },
    {
      "id": 1061,
      "title": "A template for projection comparison",
      "comment": "An abstract class that implements all the boilerplate required for custom comparison semantics.",
      "author": "Eirik Tsarpalis",
      "link": "http://www.twitter.com/eiriktsarpalis",
      "date": "2013-02-25T13:20:25.6670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "comparison",
        "object oriented"
      ]
    },
    {
      "id": 1062,
      "title": "LazyAsync",
      "comment": "Allows to expose an F# async value in a C#-friendly API with the semantics of Lazy<> (compute on demand and guarantee only one computation)",
      "author": "Gustavo Guerra",
      "link": "http://blog.codebeside.org",
      "date": "2013-02-25T13:49:39.7200000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "Async",
        "Lazy"
      ]
    },
    {
      "id": 1063,
      "title": "Parsing a trace file via a small cmd utility",
      "comment": "Given an input stream of \"int|int\" pairs (one such pair per line), output only those lines for which the right integer has at least k distinct integers on the left side, on the entire input stream. The number k is given as a command line argument.",
      "author": "Aggelos Biboudis",
      "link": "http://www.di.uoa.gr/~biboudis/",
      "date": "2013-02-26T03:19:59.8830000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "Sequences",
        "Pipelining",
        "Input and Output"
      ]
    },
    {
      "id": 1064,
      "title": "Project Euler Problem 14",
      "comment": "Project Euler Problem 14",
      "author": "Jon Canning",
      "link": "",
      "date": "2013-03-01T12:30:03.9400000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Euler"
      ]
    },
    {
      "id": 1065,
      "title": "An active pattern combinator for list inputs",
      "comment": "A few active pattern combinators useful when pattern matching on lists is necessary.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-03-07T12:40:33.6470000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "active patterns",
        "list"
      ]
    },
    {
      "id": 1066,
      "title": "simple and",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-03-10T17:19:20.2870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1067,
      "title": "Emulating higher level typing using inline functions and member constraints",
      "comment": "This pattern shows that by using a few static member constraints, one can create an assortment of data processing functions that emulate higher level typing than is possible in F#.",
      "author": "Greg Ros",
      "link": "",
      "date": "2013-03-10T20:54:12.3730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "typeclass",
        "inline",
        "member constraints",
        "data structures",
        "polymorphism"
      ]
    },
    {
      "id": 1068,
      "title": "Defining union cases that have the cons ( :: ) pattern",
      "comment": "Here I give an example of a data structure known as a skew binary list and also an example of how to use the cons pattern, normally reserved for FSharp lists, in your own union cases. \r\n\r\nIt is not possible to do the same with the nil union case, []. Nor is it possible to use any other symbols (as far as I know). This kind of sucks.",
      "author": "Greg Ros",
      "link": "",
      "date": "2013-03-10T21:00:02.5230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Discriminated unions",
        "operators",
        "cons",
        "linked list",
        "data structures",
        "skew binary list",
        "cons"
      ]
    },
    {
      "id": 1069,
      "title": "DSL for constructing HTML",
      "comment": "Just another DSL for creating HTML in F#. This DSL attempts to have nice syntax using curly brackets (F# computation expression blocks) for nesting. It does not use other keywords like `yield` (to keep the syntax as non-intrusive as possible), but that means the implementation relies on mutation. I think there could be nicer implementation using automatic quoting in F# 3.0. ",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-03-11T16:58:43.3070000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "html",
        "dsl"
      ]
    },
    {
      "id": 1070,
      "title": "tcpStream abstraction",
      "comment": "Basic (but experimental) TCP stream wrappers to help make TCP more abstracted and cleaner. Giving the user just the impression of a 'stream' that one connects to and sends and receives. \r\n\r\nThis helps promote composition. The first abstraction is 'stream', really just wrapping .NET stream functions so that read returns the read n bytes and write returns the stream, all functions take NetworkStream as the first parameters, followed by other parameters. \r\n\r\nCurrently we don't care about timeouts, exceptions, or other nasty's.",
      "author": "David Klein",
      "link": "https://twitter.com/action_dk",
      "date": "2013-03-12T04:06:11.3900000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "streams",
        "networking",
        "tcp"
      ]
    },
    {
      "id": 1071,
      "title": "Dynamic (?) operator with null handling",
      "comment": "An implementation of the ? operator that handles null",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-03-14T13:20:48.2970000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dynamic operator"
      ]
    },
    {
      "id": 1072,
      "title": "Defining Mathematical Operators in F#",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-03-15T17:07:18.7700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1073,
      "title": "Making QR-code image having  contact information (VCard) with Google Chart API",
      "comment": "Making QR-code image having  contact information (VCard) with Google Chart API.\r\nIf you scan this image with mobile phone, you can directly add new person to your contacts.\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://www.iki.fi/thorium/",
      "date": "2013-03-17T12:31:53.9230000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "QR",
        "VCard"
      ]
    },
    {
      "id": 1074,
      "title": "Generic Collections, Type Classes and friends",
      "comment": "A crazy experiment for \"Scalable\" collections. Inspired by the paper \"Fighting Bit Rot with Types\"",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2013-03-17T12:46:39.9770000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Type Classes",
        "Collections",
        "Scala"
      ]
    },
    {
      "id": 1075,
      "title": "Bloom filter implementation in F#",
      "comment": "http://codekata.pragprog.com/2007/01/kata_five_bloom.html",
      "author": "Suzanna",
      "link": "",
      "date": "2013-03-18T21:07:45.1330000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Bloom",
        "FSharp",
        "F#"
      ]
    },
    {
      "id": 1076,
      "title": "The \"dir\" function of Python",
      "comment": "This snippet likes the \"dir\" function of Python. ( http://docs.python.org/2/library/functions.html#dir )\r\nThe \"dir\" function is useful on FSI. You can take a look at members of the object quickly.",
      "author": "Nobuhisa",
      "link": "http://d.hatena.ne.jp/Nobuhisa/",
      "date": "2013-03-19T05:49:07.5270000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Python",
        "printf"
      ]
    },
    {
      "id": 1077,
      "title": "Kata Six: Anagrams - solution in F#",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-03-20T02:23:01.2730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1078,
      "title": "Kata Six: Anagrams - solution in F#",
      "comment": "Solution to Kata Six: Anagrams from http://codekata.pragprog.com/2007/01/kata_six_anagra.html in F#",
      "author": "Suzanna",
      "link": "",
      "date": "2013-03-20T02:29:10.8570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F#",
        "anagrams",
        "FSharp",
        "Kata"
      ]
    },
    {
      "id": 1079,
      "title": "C Struct to F#",
      "comment": "Quick function to take a wireshark 'C Structure' and turn it into a F# byte array",
      "author": "David Klein",
      "link": "https://twitter.com/action_dk",
      "date": "2013-03-22T03:32:03.0500000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Networking"
      ]
    },
    {
      "id": 1080,
      "title": "hexdump (somewhat fast)",
      "comment": "Simple functions to display a hex dump of a byte array using sequence expressions, with ASCII. Rewrote naive version that used string concat, based on optimizations in http://fssnip.net/ht, and cleaned up ASCII formatting. ",
      "author": "Matthew H. Traylor",
      "link": "http://www.sarissagamestudio.com",
      "date": "2013-03-22T22:40:13.9300000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "hex dump",
        "hex",
        "sequences",
        "conversion"
      ]
    },
    {
      "id": 1081,
      "title": "Async function that retries work",
      "comment": "A simple asynchronous workflow that retries running a given async workflow (until \"resultOk\" function returns true or until a specified number of retries is performed). The function uses tail-recursion in async workflows.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/blog",
      "date": "2013-03-22T23:12:20.5430000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "tail-recursion",
        "retry"
      ]
    },
    {
      "id": 1082,
      "title": "Function overloading",
      "comment": "I came up with a gimmick.\r\nIt looks like function overloading.",
      "author": "Nobuhisa",
      "link": "http://d.hatena.ne.jp/Nobuhisa/",
      "date": "2013-03-23T06:44:51.4730000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "functions"
      ]
    },
    {
      "id": 1083,
      "title": "Even more Fast hex dump",
      "comment": "A simple function that nicely formats arrays of bytes. Useful in FSI or logging. \r\nbyte array -> string seq\r\nInspired by http://fssnip.net/hq, but optimized to become O(n).",
      "author": "Vasily Kirichenko",
      "link": "",
      "date": "2013-03-23T08:54:13.4100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "hex dump",
        "hex",
        "sequences",
        "conversion"
      ]
    },
    {
      "id": 1084,
      "title": "euler problem 2",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-03-23T17:23:40.1200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1085,
      "title": "Extending async with await on tasks",
      "comment": "The snippet shows how to extend the built-in F# async computation builder with the ability to await standard .NET tasks using the let! keyword. ",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/blog",
      "date": "2013-03-24T19:18:43.7570000",
      "likes": 13,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "await",
        "task"
      ]
    },
    {
      "id": 1086,
      "title": "Parser combinators simple example",
      "comment": "This snippet is an example of how to implement parser combinators in a simple way.",
      "author": "Santi Albo",
      "link": "http://santialbo.com/post/parser-combinators",
      "date": "2013-03-25T18:17:21.5300000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "parser combinators"
      ]
    },
    {
      "id": 1087,
      "title": "Async.AwaitTask with timeouts",
      "comment": "Asynchronously await task completion with timeout support.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-03-25T22:16:43.8970000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "AwaitTask",
        "timeout"
      ]
    },
    {
      "id": 1088,
      "title": "Async.CancelAfter",
      "comment": "Asynchronously perform a computation until it completes or timeout is reached.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-03-25T22:33:38.5370000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "timeout"
      ]
    },
    {
      "id": 1089,
      "title": "Linear Regression Gradient Descent",
      "comment": "Liner Regression with no reglarization",
      "author": "",
      "link": "",
      "date": "2013-03-26T21:26:18.2700000",
      "likes": 4,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "MathNet.Numerics",
        "MathNet.Numerics.FSharp"
      ],
      "source": "",
      "versions": 3,
      "tags": [
        "linear regression",
        "math"
      ]
    },
    {
      "id": 1090,
      "title": "Simple Math.NET snippet",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-03-26T21:56:59.1800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "MathNet.Numerics",
        "MathNet.Numerics.FSharp"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1091,
      "title": "Workflows and parser combinators",
      "comment": "Example on the use of Workflows in parser combinators.",
      "author": "Santi Albo",
      "link": "http://santialbo.com",
      "date": "2013-03-27T20:11:30.0230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Workflows",
        "Parser combinators"
      ]
    },
    {
      "id": 1092,
      "title": "AdaBooster in FSharp",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-03-29T23:20:43.9630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1093,
      "title": "AdaBoost in F#",
      "comment": "I have provided a class that implements adaptive boosting (AdaBoost) which is a very elegant technique to create a strong classifier from a set of weak classifiers.\r\n\r\nThe strong classifier is the sign of the weighted average of the best N weak classifiers where N is a user specified parameter.\r\n\r\nThe training process consists of N selection rounds.  During each round, the training samples are given a weight distribution.  The classifier selected is the one that has the least error which is equal to the weighted average of incorrectly classified samples.  Training samples that have been incorrectly classified are given a larger weight for the next round.  This increases the likelihood of drafting a weak classifier that can help with as yet misclassified samples. ",
      "author": "Suzanna",
      "link": "http://suzannako.blogspot.com/2013/03/adabooster-in-fsharp.html",
      "date": "2013-03-30T06:25:19.3730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "AdaBoost"
      ]
    },
    {
      "id": 1094,
      "title": "Largest palindrome made from the product of two n-digit numbers",
      "comment": "A generalised version of the solution to the fourth Project Euler problem - Largest palindrome product, using sequences.\r\n\r\nThe key to understanding this code is how \"Seq.map (fun x -> (Seq.map (fun y -> x * y) baseSeq)) baseSeq\" generates a sequence of sequences that contains the products of all possible combinations of two n-digit numbers.\r\n\r\n\"Seq.map (fun x -> (Seq.map (fun y -> x * y) {1..3})) {1..3}\" will generate:\r\n  seq [seq [1; 2; 3]; seq [2; 4; 6]; seq [3; 6; 9]]",
      "author": "Bjørn Bæverfjord",
      "link": "",
      "date": "2013-03-31T19:08:07.5100000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Puzzles",
        "seq",
        "pipeline",
        "Project Euler"
      ]
    },
    {
      "id": 1095,
      "title": "Bin Packing",
      "comment": "Implementation of 'best fit' heuristic for the bin packing problem.\r\n\r\nSee this blog post for details http://fwaris.wordpress.com/2013/04/01/best-fit-bin-packing/",
      "author": "",
      "link": "",
      "date": "2013-04-01T13:08:40.4500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "F#",
        "Scheduling",
        "Optimization",
        "Bin Packing"
      ]
    },
    {
      "id": 1096,
      "title": "Bin Packing",
      "comment": "Implementation of the 'best fit' heuristic algorithm for bin packing problems. Incudes an implementation of 'binary tree with duplicates'.\r\n\r\nSee this blog post for details: http://fwaris.wordpress.com/2013/04/01/best-fit-bin-packing/\r\n\r\nUpdate: Bug fixes and added 'worst fit' heuristic implementation",
      "author": "Faisal Waris",
      "link": "http://fwaris.wordpress.com/2013/04/01/best-fit-bin-packing/",
      "date": "2013-04-01T13:16:25.8400000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Scheduling",
        "Optimization",
        "Bin Packing",
        "Binary Tree"
      ]
    },
    {
      "id": 1097,
      "title": "hof.fsx",
      "comment": "Higher order function",
      "author": "Rafael",
      "link": "",
      "date": "2013-04-03T18:59:27.5170000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 2,
      "tags": [
        "HOF",
        "tryfsharp"
      ]
    },
    {
      "id": 1098,
      "title": "Generic agent post operator",
      "comment": "Generic operator that introduces a convenient syntax for \"posting\" messages into any agent that has Post member. Specifically, it's useful for the standard MailboxProcessor and the AutoCancelAgent (from FSharpx library). ",
      "author": "Vasily Kirichenko",
      "link": "",
      "date": "2013-04-08T11:22:30.9300000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharpx.Core"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Agents"
      ]
    },
    {
      "id": 1099,
      "title": "Command Pattern - Simple",
      "comment": "A simple implementation of a very basic command pattern that is being submitted to an Android app called GoF Design Patterns by Poash - highly recommended btw. This is imperative/oop in style, hope it helps someone. \r\n\r\nIt is my first submission and I'm an F Sharp newbie!",
      "author": "Richard Griffiths - SoulFireMage",
      "link": "http://richardgriffiths.azurewebsites.net",
      "date": "2013-04-11T22:33:20.5830000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "design pattern",
        "command pattern",
        "imperative",
        "oop"
      ]
    },
    {
      "id": 1100,
      "title": "Gantt Chart Visualization",
      "comment": "Shows how to generate a Gantt chart to visualize a schedule. \r\n\r\nNote: Requires BinPacking.fs found here: http://fssnip.net/hG",
      "author": "Faisal Waris",
      "link": "http://fwaris.wordpress.com/2013/04/12/visualizing-a-schedule/",
      "date": "2013-04-12T16:16:00.3670000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Visualization"
      ]
    },
    {
      "id": 1101,
      "title": "Create WPF window on its own thread",
      "comment": "Create a new thread, launch a WPF window on it, wait for the window to initialize and then return a reference to it, and it SynchronizationContext.  You can then update the window via async workflows which start with ' do! Async.SwitchToContext context '",
      "author": "",
      "link": "",
      "date": "2013-04-14T16:42:58.0970000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "WPF"
      ]
    },
    {
      "id": 1102,
      "title": "Finalizable function object",
      "comment": "The snippet shows how to create an F# function value that will call a custom finalizer function when garbage collected. This is done by creating a type that inherits from FSharpFunc.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/",
      "date": "2013-04-15T19:49:26.1730000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "function",
        "gc",
        "finalizer"
      ]
    },
    {
      "id": 1103,
      "title": "Merge Sort of int lists",
      "comment": "A basic recursive implementation of merge sort on lists of ints.",
      "author": "Bret Colloff",
      "link": "",
      "date": "2013-04-15T20:52:58.8870000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "merge sort"
      ]
    },
    {
      "id": 1104,
      "title": "Generic Peano arithmetic",
      "comment": "An attempt at defining Peano arithmetic for all numeric types",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-04-18T14:24:00.6730000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "peano",
        "static generics"
      ]
    },
    {
      "id": 1105,
      "title": "Project Euler #4",
      "comment": "My take at Project Euler #4",
      "author": "ildjarn",
      "link": "",
      "date": "2013-04-19T21:44:43.6070000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "euler",
        "palindrome"
      ]
    },
    {
      "id": 1106,
      "title": "Project Euler Project #4 Attempt #1",
      "comment": "Added another version",
      "author": "",
      "link": "",
      "date": "2013-04-20T17:34:21.4230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Project Euler"
      ]
    },
    {
      "id": 1107,
      "title": "Project Euler Problem 4",
      "comment": "New Version 2",
      "author": "",
      "link": "",
      "date": "2013-04-20T18:00:52.6000000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Project Euler"
      ]
    },
    {
      "id": 1108,
      "title": "A return combinator for F#",
      "comment": "A combinator that enables real imperative code in F#. Use with caution!",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-04-25T13:14:09.2030000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "return",
        "imperative"
      ]
    },
    {
      "id": 1109,
      "title": "Guess what",
      "comment": "So I disposed :(",
      "author": "Heather",
      "link": "",
      "date": "2013-04-29T08:03:54.1230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "syntax"
      ]
    },
    {
      "id": 1110,
      "title": "local wireless passwords",
      "comment": "dump out saved windows wireless passwords in plaintext. they're stored in xml file, to successfully dump them you must be logged in as the same user who created them (at least in the below code ;)",
      "author": "David Klein",
      "link": "https://twitter.com/action_dk",
      "date": "2013-04-29T08:52:24.3330000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "pinvoke",
        "security"
      ]
    },
    {
      "id": 1111,
      "title": "Production",
      "comment": "http://msdn.microsoft.com/en-us/library/vstudio/dd483467(v=vs.100).aspx",
      "author": "Prue",
      "link": "",
      "date": "2013-04-29T10:20:29.5970000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F# 3.0"
      ]
    },
    {
      "id": 1112,
      "title": "Loop Unrolling",
      "comment": "C++ style metaprogramming in F#",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2013-04-29T19:41:54.2630000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Metaprogramming"
      ]
    },
    {
      "id": 1113,
      "title": "sumOfSquares",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-29T23:39:52.5130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1114,
      "title": "Matching",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T01:55:12.4070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1115,
      "title": "Matching",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T02:01:43.6100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1116,
      "title": "Matching",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T02:04:07.0870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1117,
      "title": "Active",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T02:10:16.5100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1118,
      "title": "Active",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T02:13:15.5100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1119,
      "title": "Simple",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T02:26:46.3000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1120,
      "title": "Fib",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T02:38:33.8570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1121,
      "title": "add5",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T02:41:18.6030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1122,
      "title": "HigherOrder",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T02:51:06.0300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1123,
      "title": "Fold can do anything",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T03:08:49.4170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1124,
      "title": "recursive",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T03:20:03.4230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1125,
      "title": "record",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T03:21:18.5130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1126,
      "title": "option",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-04-30T03:26:37.5400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1127,
      "title": "Parsing formulas",
      "comment": "Parsing simple formulas using active patterns",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/",
      "date": "2013-04-30T16:16:49.3730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "active pattern",
        "formula"
      ]
    },
    {
      "id": 1128,
      "title": "Options",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-05-01T15:25:24.1970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1129,
      "title": "World Bank",
      "comment": "TBD",
      "author": "",
      "link": "",
      "date": "2013-05-01T15:37:55.8370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Worldbank"
      ]
    },
    {
      "id": 1130,
      "title": "Anagrams",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-05-01T17:38:22.8200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1131,
      "title": "Iterate B-Tree",
      "comment": "Iterate simple b-tree",
      "author": "devshorts",
      "link": "",
      "date": "2013-05-03T14:04:00.5400000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "b-tree",
        "tree"
      ]
    },
    {
      "id": 1132,
      "title": "Binary search ",
      "comment": "Simple binary search of an array.  Tests the array at the middle and divides the search space by half each time it looks for the target item. Returns the target item and how many iterations it took to get there",
      "author": "devshorts",
      "link": "",
      "date": "2013-05-03T14:31:04.4230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "binary search",
        "trees",
        "algorithms"
      ]
    },
    {
      "id": 1133,
      "title": "Remove block comments from a list of tokens",
      "comment": "Cleaning up source code for a Forth like language before the compiling stage",
      "author": "Bjørn Bæverfjord",
      "link": "",
      "date": "2013-05-04T11:28:54.7130000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Forth",
        "Block comments"
      ]
    },
    {
      "id": 1134,
      "title": "A Happy Ending",
      "comment": "Generates Text art in the style of Philippe Decrauzat's D.T.A.B.T.W.H.A.H.E. 2010 currently exhibited at the MoMA NYC",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-05-04T12:38:15.7300000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Art"
      ]
    },
    {
      "id": 1135,
      "title": "Option Type Support on ServiceStack",
      "comment": "A simple module for registering option types with ServiceStack serializer.",
      "author": "Diego Frata",
      "link": "https://gist.github.com/diegofrata",
      "date": "2013-05-04T13:44:23.0700000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "ServiceStack.Text"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "servicestack serializer option"
      ]
    },
    {
      "id": 1136,
      "title": "Find largest mass in 2D array",
      "comment": "This is a modification of the flood fill algorithm to find the largest contiguous block of items in a 2D array.   Also includes a simple flood fill finder given a canvas and the target point",
      "author": "devshorts",
      "link": "http://onoffswitch.net/largest-mass-problem/",
      "date": "2013-05-04T17:30:49.6470000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "flood fill",
        "algorithms"
      ]
    },
    {
      "id": 1137,
      "title": "String palindrome",
      "comment": "Tests if a string is a palindrome (whitespace independent)",
      "author": "devshorts",
      "link": "www.onoffswitch.net",
      "date": "2013-05-04T21:25:01.7530000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "palindrome",
        "strings"
      ]
    },
    {
      "id": 1138,
      "title": "String palindrome (short)",
      "comment": "Dear #fssnip newbies, please do not write F# code as if you are still in C#. Direct ports are meaningless. Among other things, please learn what structural equality is. ",
      "author": "@kot_2010",
      "link": "",
      "date": "2013-05-05T06:04:11.6730000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "strings"
      ]
    },
    {
      "id": 1139,
      "title": "Wrapping Tasks.Task to async<unit>",
      "comment": "This code wraps System.Threading.Tasks.Task (that has no return value), properly, so that cancellations and exceptions are preserved, and exceptions keep their stack-traces. It is to be used when the Task only denotes a single computation or value, as it only picks the first exception from the list of exceptions.",
      "author": "haf",
      "link": "",
      "date": "2013-05-05T20:39:55.6600000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async task tpl"
      ]
    },
    {
      "id": 1140,
      "title": "Type inference test",
      "comment": "Trying to understand why some type inference used to work in OCaml and not anymore in F#",
      "author": "Lasher`",
      "link": "",
      "date": "2013-05-05T20:58:02.7330000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "type inference",
        "OCaml"
      ]
    },
    {
      "id": 1141,
      "title": "Reducers",
      "comment": "A simple yet powerful library for parallel collection processing. Inspired by Clojure's Reducers.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2013-05-06T15:47:29.5230000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Parallel",
        "Collections"
      ]
    },
    {
      "id": 1142,
      "title": "Count leading zeros",
      "comment": "Several ways of counting leading zeros in a binary number.  Update: clzDeBruijn now captures the look-up table in the closure so that the table is only evaluated once and everything is contained in the main function.",
      "author": "Bjørn Bæverfjord",
      "link": "",
      "date": "2013-05-08T18:12:00.2900000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Count leading zeros",
        "Find first set",
        "Bit twiddling hacks",
        "CLZ"
      ]
    },
    {
      "id": 1143,
      "title": "WPF xaml + code behind in F#",
      "comment": "tidy up",
      "author": "",
      "link": "",
      "date": "2013-05-11T16:03:49.2800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "tidy"
      ]
    },
    {
      "id": 1144,
      "title": "backup files",
      "comment": "backup files , construct directory structure and then copy them one by one, ignore some sub directory in ignore list",
      "author": "rigid wang",
      "link": "",
      "date": "2013-05-16T08:23:28.5030000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "input and output"
      ]
    },
    {
      "id": 1145,
      "title": "Draw from sequences",
      "comment": "Peeks from a few seq randomly according to specified frequencies. not tested",
      "author": "nicolas2",
      "link": "",
      "date": "2013-05-16T11:32:22.1030000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seq"
      ]
    },
    {
      "id": 1146,
      "title": "Minimal Twitter search function",
      "comment": "A simple Twitter search function, leveraging the JSON type provider.",
      "author": "Lincoln Atkinson",
      "link": "http://byteonmyside.wordpress.com",
      "date": "2013-05-18T01:19:06.6400000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharp.Data"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "twitter",
        "type provider",
        "json"
      ]
    },
    {
      "id": 1147,
      "title": "Simple Crypto",
      "comment": "Simple symmetric key cryptogrphy. Ok for low security usages.",
      "author": "Faisal Waris",
      "link": "http://wp.me/p1buGO-7i",
      "date": "2013-05-22T20:41:27.2800000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Crypto"
      ]
    },
    {
      "id": 1148,
      "title": "Query Google.com",
      "comment": "Query google.com  (in english) without using any API key with the default WebClient class\r\nWe are also instrumenting google ability to search between certain time period \r\n\r\nexample: querygooglen 500  3000  \"F#\" 30\r\nHere you fetch for 500 urls (we are grabbing  100 urls by query on google)\r\nwait between each query to google.com for 3 seconds\r\nyou are seeking for the keyword \"F#\"\r\nyou only want results who are at least newer than 30 days ago\r\n-Nicolas\r\nhttp://hackeratwork.com/",
      "author": "Nicolas Dirand",
      "link": "http://hackeratwork.com/",
      "date": "2013-05-25T16:28:03.4970000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "google",
        "search engine",
        "web",
        "SEO"
      ]
    },
    {
      "id": 1149,
      "title": "Why automatic upcasting would not work",
      "comment": "N/A",
      "author": "",
      "link": "",
      "date": "2013-05-29T13:28:31.0500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "na"
      ]
    },
    {
      "id": 1150,
      "title": "A simple retry combinator",
      "comment": "A simple retry combinator with customizable retry policies.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-05-31T10:12:17.0030000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "retry"
      ]
    },
    {
      "id": 1151,
      "title": "Generate WAVE file",
      "comment": "Generates a WAVE sound file",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-06-02T09:12:39.1400000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Audio",
        "Sound"
      ]
    },
    {
      "id": 1152,
      "title": "Twitter API (Old School)",
      "comment": "Old School Way to Query Twitter API(Works in VS 2010, without a Type Provider).  Ported from partially working C# snippets on another blog.  Fully tested and working.  Define your own string parmeters for OAuthToken\r\nOAuthConsumerKey\r\nOAuthTokenSecret\r\nOAuthConsumerSecret\r\nScreenName\r\nto get this sample to work.",
      "author": "Darren Smith",
      "link": "",
      "date": "2013-06-03T19:46:45.8330000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Twitter API",
        "OAuth"
      ]
    },
    {
      "id": 1153,
      "title": "Unmanaged memory search",
      "comment": "Useful for pinvoke stuff where your native API requires that you have a unmanaged buffer containing the data you want to work on. Edit: Changed native calls, removed Marshal.Copy (there is a async corner case but I won't delve into it here) and replaced with pinning.",
      "author": "David Klein",
      "link": "https://twitter.com/action_dk",
      "date": "2013-06-04T03:52:28.5470000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Interop",
        "Operators",
        "Native"
      ]
    },
    {
      "id": 1154,
      "title": "Date of Easter",
      "comment": "For a given integer year the snippet calculates the date of Easter.  This is valid in the Gregorian calendar for years 1583 onwards.  It is based on a method devised in 1876 which first appeared in Butcher's Ecclesiastical Calendar.",
      "author": "Ben Clare",
      "link": "",
      "date": "2013-06-11T12:09:39.8330000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Astronomy"
      ]
    },
    {
      "id": 1155,
      "title": "LAB3",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-06-17T17:49:16.1100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1156,
      "title": ".NET 1.1 collections in F#",
      "comment": "Even with the latest tools, we're sometimes exposed to .NET archeaology: parts of the framework designed before .NET 2. Examples of this are the dictionary classes from System.Collections, which are a little strongly typed, but not quite -- you see them if you call HttpUtility.ParseQueryString, or if you use pretty much anything in System.Configuration. Here's some code to make these classes a little safer in F#.",
      "author": "Tim Robinson",
      "link": "https://twitter.com/1tgr",
      "date": "2013-06-19T13:51:53.5030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "generics",
        "inline",
        "retro"
      ]
    },
    {
      "id": 1157,
      "title": "Loading to Try F#",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-06-28T13:21:42.6500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1158,
      "title": "Parse locale files",
      "comment": "This uses fparsec to parse locale files of hte form\r\n\r\nId = text {arg:type}\r\n     = newline\r\n     = newlne\r\n\r\nFor use with localization.",
      "author": "devshorts",
      "link": "www.onoffswitch.net",
      "date": "2013-07-01T18:17:18.0730000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "locale",
        "parsing",
        "fparsec"
      ]
    },
    {
      "id": 1159,
      "title": "F# Knapsack",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-07-02T12:07:50.2130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1160,
      "title": "scratch",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-07-04T07:49:11.4570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1161,
      "title": "Simple AST parser",
      "comment": "Parsers a minimal expression tree allowing for functions of the form \"func(arg1,arg2,...)->{body}\"",
      "author": "devshorts",
      "link": "www.onoffswitch.net",
      "date": "2013-07-04T17:49:32.2230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 5,
      "tags": [
        "fparsec",
        "parsing",
        "ast",
        "expressions"
      ]
    },
    {
      "id": 1162,
      "title": "String.split",
      "comment": "String split function that skips quoted strings, useful as a simple CSV parser",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-07-06T15:57:42.1930000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "String",
        "CSV"
      ]
    },
    {
      "id": 1163,
      "title": "log parsing.",
      "comment": "basically an extension of http://msdn.microsoft.com/en-us/magazine/gg983490.aspx I can't remember why I wrote it now, it should be more generic than MSDN's version.",
      "author": "David Klein",
      "link": "https://twitter.com/action_dk",
      "date": "2013-07-12T06:59:36.1000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "log",
        "map reduce",
        "user input"
      ]
    },
    {
      "id": 1164,
      "title": "Option.concat",
      "comment": "Everyone else has a concat, so why not Option.",
      "author": "Simon Cousins",
      "link": "http://www.simontylercousins.net/",
      "date": "2013-07-12T07:12:46.8470000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharpx"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Option"
      ]
    },
    {
      "id": 1165,
      "title": "Do a WriteAllLines but without the final line-end",
      "comment": "Just occasionally, it's useful to be able to do the equivalent of System.IO.File.WriteAllLines, but without the line-ending on the final line.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2013-07-18T13:17:37.3430000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "IO files"
      ]
    },
    {
      "id": 1166,
      "title": "Seattle F# Meetup 7/17/2013 Example Code - Imperative",
      "comment": "Imperative-style examples used during my talk for the Seattle F# Meetup on 7/17/2013.  See corresponding functional-style examples at http://fssnip.net/iP",
      "author": "Lincoln Atkinson",
      "link": "",
      "date": "2013-07-18T17:59:08.4170000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "talk",
        "imperative",
        "meetup",
        "examples"
      ]
    },
    {
      "id": 1167,
      "title": "Seattle F# Meetup 7/17/2013 Example Code - Functional",
      "comment": "Functional-style examples used during my talk for the Seattle F# Meetup on 7/17/2013\r\nSee corresponding imperative-style examples at http://fssnip.net/iO",
      "author": "Lincoln Atkinson",
      "link": "",
      "date": "2013-07-18T18:03:25.3100000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "talk",
        "functional",
        "meetup",
        "examples"
      ]
    },
    {
      "id": 1168,
      "title": "F# quine",
      "comment": "A cool F# quine",
      "author": "Rijnard van Tonder",
      "link": "",
      "date": "2013-07-22T18:09:00.4400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "quine"
      ]
    },
    {
      "id": 1169,
      "title": "Extract script blocks from html page",
      "comment": "This module extracts all the <script src=\"blah.js\"></script> blocks out of an html page's header. This can be useful if you are writing tools to merge all the js for future minifaction, or for otherwise manipulating the files.",
      "author": "devshorts",
      "link": "www.onoffswitch.net",
      "date": "2013-07-23T15:22:06.7900000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "HtmlAgilityPack"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "html",
        "parsing"
      ]
    },
    {
      "id": 1170,
      "title": "Extract script blocks from html page (FP)",
      "comment": "A bit more functional version of this: http://fssnip.net/iR",
      "author": "@kot_2010",
      "link": "",
      "date": "2013-07-23T17:54:05.9630000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharpx.Core",
        "HtmlAgilityPack"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "html",
        "parsing"
      ]
    },
    {
      "id": 1171,
      "title": "Get url opened by Google Chrome's main window",
      "comment": "This is a small example of invoking Win32 API.\r\nIt gets the url which is opened by Google chrome's main window.\r\n",
      "author": "nagat01",
      "link": "",
      "date": "2013-07-24T02:34:26.7900000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Win32",
        "Web"
      ]
    },
    {
      "id": 1172,
      "title": "File parsing, based on multiple lines, using recursive pattern matching with many :: (cons) operator",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-07-26T17:03:58.0900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1173,
      "title": "Log file parsing",
      "comment": "File parsing, based on multiple lines, using recursive pattern matching with many :: (cons) operator",
      "author": "Tuomas Hietanen",
      "link": "https://gist.github.com/Thorium",
      "date": "2013-07-26T17:08:26.8170000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "log",
        "parsing",
        "Text processing"
      ]
    },
    {
      "id": 1174,
      "title": "One-liner generic timing function",
      "comment": "Generic higher-order function to measure timing of a given function",
      "author": "Lincoln Atkinson",
      "link": "",
      "date": "2013-07-26T22:53:53.9330000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "one-liner",
        "timing"
      ]
    },
    {
      "id": 1175,
      "title": "Semicoroutines",
      "comment": "The simplest F# semicoroutines via seq. comprehensions\r\nhttp://en.wikipedia.org/wiki/Coroutine\r\n\r\nReplaced a custom function with the pipeline operator.",
      "author": "Lakret",
      "link": "",
      "date": "2013-07-30T16:40:29.1930000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "semicoroutines",
        "coroutines"
      ]
    },
    {
      "id": 1176,
      "title": "fsgd",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-07-30T19:42:04.5270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1177,
      "title": "dddddddssgsdg",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-07-30T19:43:31.6270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1178,
      "title": "dslfkjsdlfkj",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-07-30T19:44:16.1730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1179,
      "title": "sdfsdf",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-07-30T19:58:04.6930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1180,
      "title": "Disconnect from the internet",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-08-02T10:39:44.3030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1181,
      "title": "Pattern matching over generic types",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-08-02T21:17:42.9770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1182,
      "title": "Placeholder syntax for binary operators",
      "comment": "Placeholder syntax like scala or clojure. \r\nIt can be used when the situation point-free style can't be applied.\r\nIt only works for binary operators.\r\nBut it's quite simple and can be used somewhat.",
      "author": "nagat01",
      "link": "https://bitbucket.org/nagat01",
      "date": "2013-08-03T18:39:45.2670000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "scala",
        "clojure",
        "lambda"
      ]
    },
    {
      "id": 1183,
      "title": "Session Types in F#",
      "comment": "An implementation of session types in F#. Inspired from the paper \"Haskell Session Types with (Almost) No Class\"",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2013-08-04T19:44:15.7070000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Session Types"
      ]
    },
    {
      "id": 1184,
      "title": "Observable.computed",
      "comment": "Knockout (http://knockoutjs.com) provides observable primitives similar to IObservable in Rx. Knockout also has ko.computed, which abstracts away individual subscriptions: you write a function that references the current values of observables, and it takes care of the rest. Here is ko.computed in F#.",
      "author": "Tim Robinson",
      "link": "",
      "date": "2013-08-05T20:04:10.6930000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "IObservable Rx"
      ]
    },
    {
      "id": 1185,
      "title": "Specify module top level's thread by using STAThreadAttribute",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-08-06T00:31:28.6670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1186,
      "title": "Delimited continuations",
      "comment": "Delimited continuations encoded as a parameterized continuation monad.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2013-08-09T13:42:39.5970000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Continuations",
        "Monads"
      ]
    },
    {
      "id": 1187,
      "title": "Course 1: World bank",
      "comment": "F# introduction course - Exploring World Bank data in Try F#",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-08-09T14:56:28.4730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "worldbank",
        "type provider",
        "Try F#"
      ]
    },
    {
      "id": 1188,
      "title": "Course 2: Freebase, queries, linear regression",
      "comment": "F# introduction course - Getting data about cyclones from Freebase and plotting the dependency of damages in USD on the wind speed (with linear regression). To be used in Try F#.\r\n",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-08-09T16:38:31.4930000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "freebase",
        "type provider",
        "Try F#"
      ]
    },
    {
      "id": 1189,
      "title": "Course 3: Exploring Titanic dataset",
      "comment": "F# introduction course - Getting data about Titanic passengers using CSV type provider and analyzing them using standard sequence-processing functions known from LINQ. To be used in Try F#.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-08-09T18:48:18.2830000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Try F#",
        "collections",
        "sequences",
        "CSV",
        "higher-order functions"
      ]
    },
    {
      "id": 1190,
      "title": "Programming101",
      "comment": "A F# crash course taught to Year 6 students (11 year olds). ",
      "author": "Samin Ishtiaq",
      "link": "http://www.tryfsharp.org/create/samin/StMattYr6.fsx",
      "date": "2013-08-10T11:09:47.4630000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "programming101"
      ]
    },
    {
      "id": 1191,
      "title": "Toml parser ",
      "comment": "Parser for Tom's Obvious, Minimal Language (https://github.com/mojombo/toml).",
      "author": "nagat01",
      "link": "https://bitbucket.org/nagat01",
      "date": "2013-08-11T00:11:59.4900000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "FParsec",
        "Parser",
        "language"
      ]
    },
    {
      "id": 1192,
      "title": "Course 4: Decision trees and Titanic",
      "comment": "F# introduction course - Get and read the Titanic data set using CSV type provider, define the type of \"feature\" and use it to classify the data and then implement a simple decision tree that can be used for writing more complex classifiers. To be used in Try F#.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-08-11T08:51:10.1430000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Try F#",
        "titanic",
        "csv",
        "decision tree",
        "discriminated union"
      ]
    },
    {
      "id": 1193,
      "title": "Toml parser (untyped)",
      "comment": "Untyped version of toml parser. The lines of code was reduced 173 to 45.\r\nIt's based on some implementations in other languages (https://github.com/mojombo/toml#implementations).\r\nI was surprised that even a parser written in Objctive-c was simpler than mine (http://fssnip.net/jd).\r\nThen I read some others code and found that removing types which describes toml values simplifies the implementation.\r\nThe code may seem little crazy, but I'm fine :)",
      "author": "nagat01",
      "link": "https://bitbucket.org/nagat01",
      "date": "2013-08-12T10:04:57.4630000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "FParsec",
        "Parser",
        "language"
      ]
    },
    {
      "id": 1194,
      "title": "Bron–Kerbosch maximal cliques algorithm",
      "comment": "Bron–Kerbosch algorithm is an algorithm for finding maximal cliques in an undirected graph\r\nhttp://en.wikipedia.org/wiki/Bron%E2%80%93Kerbosch_algorithm",
      "author": "Lakret",
      "link": "",
      "date": "2013-08-12T21:44:48.3230000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "graphs",
        "cliques",
        "algorithms"
      ]
    },
    {
      "id": 1195,
      "title": "Calculate the root-mean-square (RMS) of  a dataset",
      "comment": "Calculate the root-mean-square of a dataset.  Eg. given the voltages over time of an alternating current, calculate the RMS voltage.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2013-08-14T15:08:50.5730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Learning F#"
      ]
    },
    {
      "id": 1196,
      "title": "Either in F#",
      "comment": "Had to throw together a Haskell-style Either type in F# since Choice is a pain in the ass.",
      "author": "Bryan Edds",
      "link": "",
      "date": "2013-08-15T22:30:58.4000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "f#",
        "either"
      ]
    },
    {
      "id": 1197,
      "title": "AsyncBuilder extension for maniplating other containers by using keyword",
      "comment": "AsyncBuilder extension for maniplating some other containers directory in asynchronous workflow.\r\nBind methods in the extension enables you to retrieve inner values of 'a IObservable and 'a IEvent by using let! or do! keyword without Async.AwaitEvent or AsyncAwaitObservable.\r\nFor method in the extension omits let! binding.\r\nYield method in the extension enables you to yield value in for expression in asynchronous workflow.",
      "author": "nagat01",
      "link": "https://bitbucket.org/nagat01",
      "date": "2013-08-16T14:16:56.6300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharpx.Core",
        "FSharpx.Observable"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "event",
        "observable",
        "computation_expression"
      ]
    },
    {
      "id": 1198,
      "title": "Structural XML reader",
      "comment": "A simple library that reads XML documents into user-defined F# types. The user defines a set of discriminated unions that model the elements of the file and a library automatically creates these types from a XML file.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-08-16T16:58:06.4930000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "xml",
        "rss",
        "type"
      ]
    },
    {
      "id": 1199,
      "title": "Effects and Handlers",
      "comment": "Algebraic effects and handlers is a new  modular approach for handling effectful computations in functional languages. Inspired from the paper \"Handlers in action\"",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2013-08-18T19:51:33.1030000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Effects",
        "Handlers",
        "delimited continuations"
      ]
    },
    {
      "id": 1200,
      "title": "Combinator for tail-recursive functions",
      "comment": "The snippet defines a combinator 'tailrec' that can be used to express tail-recursive functions. If you use 'tailrec' and do not mark your function as recursive, then the function will be a tail-recursive one.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-08-19T13:42:55.7470000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "tail recursion",
        "recursion",
        "combinators"
      ]
    },
    {
      "id": 1201,
      "title": "Display digit ",
      "comment": "A function to display digit from ML coding Dojo by Mathais",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-08-19T23:07:42.7900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "machine learning"
      ]
    },
    {
      "id": 1202,
      "title": "DBSCAN",
      "comment": "Density-based spatial clustering of applications with noise (DBSCAN) is a data clustering algorithm. For more information see http://en.wikipedia.org/wiki/DBSCAN. The implementation is based on the pseudocode in the article and the following C# code http://www.c-sharpcorner.com/uploadfile/b942f9/implementing-the-dbscan-algorithm-using-C-Sharp/\r\nThe implementation is not very functional but does the job.\r\n\r\nAdded pwd by ignorance, the password is \"fssnip\" (without quotes)",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com",
      "date": "2013-08-21T08:05:10.6670000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "DBSCAN",
        "cluster",
        "math",
        "spatial",
        "Statistics"
      ]
    },
    {
      "id": 1203,
      "title": "Great circle distance",
      "comment": "Compute the great circle distance of 2 points",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com",
      "date": "2013-08-21T08:54:00.1030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "spatial"
      ]
    },
    {
      "id": 1204,
      "title": "Great Circle Distance (II)",
      "comment": "Calculate the great circle distance between two points.\r\n\r\n(Not done to one-up Samuel Bosch's version, but coincidentally prompted by his previous DBSCAN post.)",
      "author": "Kit Eason",
      "link": "https://twitter.com/kitlovesfsharp",
      "date": "2013-08-21T20:13:33.7670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "fsunit",
        "nunit"
      ],
      "source": "",
      "versions": 0,
      "tags": []
    },
    {
      "id": 1205,
      "title": "Great Circle Distance (II)",
      "comment": "Calculate the great-circle distance between two points on a sphere.\r\n\r\n(Not done to one-up Samual Bosch's version, but coincidentally inspired by his previous DBSCAN post.)",
      "author": "Kit Eason",
      "link": "https://twitter.com/kitlovesfsharp",
      "date": "2013-08-21T20:17:28.9570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "fsunit",
        "nunit"
      ],
      "source": "",
      "versions": 0,
      "tags": []
    },
    {
      "id": 1206,
      "title": "Test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-08-22T17:33:18.8030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1207,
      "title": "Great Circle Distance (II)",
      "comment": "Calculate the great-circle distance between two points on a sphere.\r\n\r\n(Not done to one-up Samual Bosch's version, but coincidentally inspired by his previous DBSCAN post.)",
      "author": "Kit Eason",
      "link": "https://twitter.com/kitlovesfsharp",
      "date": "2013-08-22T17:56:38.8730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "nunit",
        "fsunit"
      ],
      "source": "",
      "versions": 0,
      "tags": []
    },
    {
      "id": 1208,
      "title": "F# unidirectional iterator",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-08-23T03:03:40.7100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1209,
      "title": "Cumulative bivariate normal distribution",
      "comment": "Cumulative bivariate normal distribution in F#. I implemented this using both the code given in Haug's complete guide to option pricing formulae book (which in turn credits his version to Graeme West who in term adapted code from Alan Genz) and using the code available on Alan Genz' website.\r\n\r\nThis code requires the availability of another function called cnd which implements the (univariate) cumulative normal distribution. I haven't included my code there, since that's readily available in .NET from various sources (e.g. Math.NET, alglib, ...)",
      "author": "Bram Jochems",
      "link": "",
      "date": "2013-08-24T03:25:37.1570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Scientific computing"
      ]
    },
    {
      "id": 1210,
      "title": "assignvaluetovariable.fsx",
      "comment": "Assign value to variable in functional programing language F #.",
      "author": "dhruvil007",
      "link": "",
      "date": "2013-08-24T15:41:17.1030000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 1211,
      "title": "Display message.fsx",
      "comment": "Display message in f sharp.",
      "author": "dhruvil007",
      "link": "",
      "date": "2013-08-24T15:47:42.1730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 1212,
      "title": "Evaluating random arithemtic expressions",
      "comment": "Generate a random expression and evaluate it",
      "author": "devshorts",
      "link": "http://onoffswitch.net/implementing-game-arithmetic/",
      "date": "2013-08-24T18:04:29.4800000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "fsunit",
        "nunit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "expression tree",
        "arithmetic"
      ]
    },
    {
      "id": 1213,
      "title": "FsUnit and NUnit",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-08-24T22:54:02.0130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "NUnit",
        "FsUnit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1214,
      "title": "Great Circle Distance (II)",
      "comment": "Calculate the great-circle distance between two points on a sphere.\r\n\r\n(Not done to one-up Samual Bosch's version, but coincidentally inspired by his previous DBSCAN post.)",
      "author": "Kit Eason",
      "link": "https://twitter.com/kitlovesfsharp",
      "date": "2013-08-24T23:02:59.3830000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "nunit",
        "fsunit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "circle distance",
        "sphere",
        "nunit",
        "fsunit"
      ]
    },
    {
      "id": 1215,
      "title": "Byte to bit list",
      "comment": "Converts a byte list to a bit list. Takes a list of bytes and transforms it all into a flattened array of bits. For example, \r\n\r\n> bytesToBits [|byte(0x0F);byte(0xF0)|] 16 ;;\r\nval it : byte [] =\r\n  [|0uy; 0uy; 0uy; 0uy; 1uy; 1uy; 1uy; 1uy; 1uy; 1uy; 1uy; 1uy; 0uy; 0uy; 0uy;\r\n    0uy|]",
      "author": "devshorts",
      "link": "www.onoffswitch.net",
      "date": "2013-08-24T23:58:07.9200000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "low level",
        "byte"
      ]
    },
    {
      "id": 1216,
      "title": "Cartesian product in sequence expression",
      "comment": "Sequence expression which deals with cartesian product of sequences with for ... do expression.\r\nIt replaces nested for .. do expression to single one.",
      "author": "nagat01",
      "link": "https://bitbucket.org/nagat01",
      "date": "2013-08-25T10:40:27.0770000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "sequence",
        "computation expression"
      ]
    },
    {
      "id": 1217,
      "title": "A minimalist XML Parser",
      "comment": "A minimalist XML Parser",
      "author": "Fabio Galuppo",
      "link": "http://fabiogaluppo.wordpress.com",
      "date": "2013-08-26T13:25:38.0170000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "XML",
        "Parsing"
      ]
    },
    {
      "id": 1218,
      "title": "mapi with 64bit integers",
      "comment": "A version of mapi for very long sequences that uses long integers instead of regular integers.\r\n\r\nI didn't use a mutable variable because of this http://stackoverflow.com/questions/1480582/the-mutable-variable-i-is-used-in-an-invalid-way",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com",
      "date": "2013-08-27T10:00:37.9400000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Sequences",
        "seq",
        "mapi",
        "yield",
        "int64"
      ]
    },
    {
      "id": 1219,
      "title": "Unzip from multiple zip files in one pass",
      "comment": "If you have a directory containing multiple zip files, unzip them all in one pass.\r\n\r\n(Requires .NET 4.5)",
      "author": "Kit Eason",
      "link": "https://twitter.com/kitlovesfsharp",
      "date": "2013-08-27T15:17:56.2100000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "compression",
        "zip"
      ]
    },
    {
      "id": 1220,
      "title": "BST and DF Traversal",
      "comment": "Binary Search Tree and Depth-First Traversal (PreOrder, InOrder, PostOrder)",
      "author": "Fabio Galuppo",
      "link": "http://fabiogaluppo.wordpress.com",
      "date": "2013-08-27T18:26:38.9870000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "trees",
        "Algorithms"
      ]
    },
    {
      "id": 1221,
      "title": "Count set bits in a bigint and a BitArray",
      "comment": "Count the number of bits in a bigint (System.Numerics.BigInteger) and a BitArray.\r\nNote that version 4 is the fastest.",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com",
      "date": "2013-08-27T19:21:08.4530000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "bigint",
        "bits",
        "bit manipulation",
        "BitArray"
      ]
    },
    {
      "id": 1222,
      "title": "Refactoring discriminated unions",
      "comment": "A simple example that shows how to refactor discriminated unions to extract common members",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-08-28T00:53:36.1870000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "discriminated union"
      ]
    },
    {
      "id": 1223,
      "title": "Session types",
      "comment": "This snippet is a direct adaptation of Nick Palladinos' Session Types found in http://fssnip.net/j5. The implementation eschews the need for explicit declaration of duality objects by encoding all relevant information in the session signature itself.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-08-29T07:55:42.9270000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "session types",
        "reversible computation"
      ]
    },
    {
      "id": 1224,
      "title": "Convert integers to positive values",
      "comment": "Convert negative and positive integers to a positive value by using an overlap and interleave scheme (more info: http://en.wikipedia.org/wiki/Golomb_coding).",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com",
      "date": "2013-09-02T11:09:34.7430000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math"
      ]
    },
    {
      "id": 1225,
      "title": "Indexed Monads and Applications in F#",
      "comment": "Continuing from Nick Palladinos' session types, this snippet is an implementation of indexed monads in F#, as well as a collection of examples that demonstrate its utility: session types, type-safe serialization and reversible workflows.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-09-02T14:43:25.9030000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "indexed monad",
        "session types",
        "serialization",
        "reversible computation"
      ]
    },
    {
      "id": 1226,
      "title": "List-consing String Builder",
      "comment": "See http://stackoverflow.com/questions/18595597/is-using-a-stringbuilder-a-right-thing-to-do-in-f",
      "author": "Ramon Snir",
      "link": "",
      "date": "2013-09-03T19:26:35.2900000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "string",
        "stringbuilder",
        "list"
      ]
    },
    {
      "id": 1227,
      "title": "Shuffle letters",
      "comment": "Added recursive version",
      "author": "",
      "link": "",
      "date": "2013-09-03T21:50:29.7300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "shuffle"
      ]
    },
    {
      "id": 1228,
      "title": "Quick Positive Infinity",
      "comment": "A simple trick for defining positive infinity semantics.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-09-04T15:47:58.4200000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "positive infinity"
      ]
    },
    {
      "id": 1229,
      "title": "Implement interface by expression",
      "comment": "What feature would I like to see in F#? One thing is the ability to implement an interface in a class by delegating the implementation to an expression. This snippet demonstrates the idea using a simple example of vectors.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-09-05T20:20:08.4130000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "interface"
      ]
    },
    {
      "id": 1230,
      "title": "Missile Command playable in tsunami.io",
      "comment": "Click on the tsunami.io button below to launch the online tsunami.io IDE with this snippet. Then select all the code (CTRL+A) and hit the Run button to start the game window, then just dock the window to the right of the code..\r\nClick in the game window to launch missiles and save your cities. ",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-09-05T22:10:26.7930000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Game"
      ]
    },
    {
      "id": 1231,
      "title": "Missile Command script (WPF)",
      "comment": "WPF version of Missile Command. Run as a script in Visual Studio or create a new application project, reference the assemblies listed at the top of the script and paste the code over Program.fs and hit F5.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-09-09T17:55:06.8730000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Game"
      ]
    },
    {
      "id": 1232,
      "title": "ASCII Art",
      "comment": "Blow up words to ASCII art with this 5x5 font",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-09-09T18:25:18.9100000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "ASCII"
      ]
    },
    {
      "id": 1233,
      "title": "Flips the bits (eg. 01000001 becomes 10000010)",
      "comment": "better title",
      "author": "",
      "link": "",
      "date": "2013-09-13T08:23:22.3570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "FsCheck",
        "Unquote"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "algorithms"
      ]
    },
    {
      "id": 1234,
      "title": "Reverse the bits of an unsigned integer (UInt32)",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-09-13T09:04:08.4530000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1235,
      "title": "Option coalescing operator",
      "comment": "Option coalescing operator",
      "author": "",
      "link": "",
      "date": "2013-09-13T15:15:45.8930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Options"
      ]
    },
    {
      "id": 1236,
      "title": "Excel Column to Number",
      "comment": "Converts an excel column identifier like \"AR\" to a zero-index number",
      "author": "David Grenier",
      "link": "",
      "date": "2013-09-17T14:09:15.1270000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "excel"
      ]
    },
    {
      "id": 1237,
      "title": "Time trigger",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-09-18T06:16:28.5070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1238,
      "title": "Test",
      "comment": "test",
      "author": "mndrake",
      "link": "",
      "date": "2013-09-20T02:30:58.0070000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Excel-DNA"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "test"
      ]
    },
    {
      "id": 1239,
      "title": "Is this a monad?",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-09-23T09:34:27.5870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1240,
      "title": "Generating a tree from a generic type",
      "comment": "I needed a function to generate a tree from a c# class that had some odd semantics, but when I refactored it, I realised almost everyone must have something similar knocking around their codebase, so here's mine.",
      "author": "Sean Newham",
      "link": "",
      "date": "2013-09-23T09:38:31.8370000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "recursion",
        "sequences",
        "yield"
      ]
    },
    {
      "id": 1241,
      "title": "Reraise everywhere!",
      "comment": "Implements a technique found in http://stackoverflow.com/a/2085377. Useful for rethrowing exceptions in the context of computation expressions, not otherwise possible, as well as a few other applications.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2013-09-24T15:29:02.8570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "reraise",
        "reflection",
        "computation expressions"
      ]
    },
    {
      "id": 1242,
      "title": "Split array into chunks",
      "comment": "Splits array into chunks, returning seq of seqs. Works with F# 3.x",
      "author": "Lakret",
      "link": "chunks",
      "date": "2013-09-26T02:02:50.1200000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Collections"
      ]
    },
    {
      "id": 1243,
      "title": "Amazon S3 API",
      "comment": "Partial wrapper for Amazon S3 for both the Web and SOAP APIs. Generates signatures for both APIs (which was the tricky part). Uses WSDL Type Provider for SOAP. Uses SOAP for bucket list and delete operations and WebAPI to upload/download object contents (streamed / async)",
      "author": "Faisal Waris",
      "link": "",
      "date": "2013-09-26T17:23:19.9730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Amazon",
        "S3",
        "cloud"
      ]
    },
    {
      "id": 1244,
      "title": "F# Strategy Pattern",
      "comment": "Implementing the strategy pattern by putting all the strategies as a static member function for a class that can't be instantiated like the singleton",
      "author": "Evanescent Devil",
      "link": "",
      "date": "2013-09-28T00:02:51.7570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns",
        "Strategy Pattern"
      ]
    },
    {
      "id": 1245,
      "title": "F# Decorator Pattern",
      "comment": "Decorator Pattern",
      "author": "Evanescent Devil",
      "link": "",
      "date": "2013-09-28T00:59:29.9000000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns",
        "Decorator Pattern"
      ]
    },
    {
      "id": 1246,
      "title": " F# Factory Pattern",
      "comment": "Factory Pattern",
      "author": "Evanescent Devil",
      "link": "",
      "date": "2013-09-28T01:34:51.4730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns",
        "Factory Pattern"
      ]
    },
    {
      "id": 1247,
      "title": "F# Observer Pattern",
      "comment": "Observer Pattern",
      "author": "Evanescent Devil",
      "link": "",
      "date": "2013-09-28T03:17:18.2430000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Design Patterns",
        "Observer Pattern"
      ]
    },
    {
      "id": 1248,
      "title": "F# Strategy Pattern",
      "comment": "Playing with the OO Strategy Pattern and the F# type system",
      "author": "David Grenier",
      "link": "",
      "date": "2013-09-28T17:31:43.9170000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Strategy Pattern",
        "Object Expression",
        "Function Type",
        "Mutation",
        "Design Pattern"
      ]
    },
    {
      "id": 1249,
      "title": "Creating named parameters",
      "comment": "The snippet shows how to define the \"=>\" operator in F# so that it can be used for creating named parameters for dynamic API. ",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2013-09-29T18:02:44.0830000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "R provider"
      ]
    },
    {
      "id": 1250,
      "title": "Purge binary files",
      "comment": "Purges files in bin and obj folders, useful to reduce size when copying project folders. Be careful, this script will delete files!",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-09-30T06:57:48.4570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Files"
      ]
    },
    {
      "id": 1251,
      "title": "intersperse last",
      "comment": "Fold a string with one delimiter except for the last with a different delim.  So basically if you have a list [\"1\";\"2\";\"3\"] and you want it to be [\"1\";\",\";\"2\";\"and\";\"3]",
      "author": "devshorts",
      "link": "",
      "date": "2013-10-01T01:24:26.5630000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "list",
        "string"
      ]
    },
    {
      "id": 1252,
      "title": "Data Driven Unit Tests Example",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-10-01T13:10:47.2430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Xunit",
        "Xunit.Extensions"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1253,
      "title": "moduleLori.fsx",
      "comment": "Lori's module",
      "author": "llq",
      "link": "",
      "date": "2013-10-02T11:46:00.1670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 1254,
      "title": "Geo usage",
      "comment": "bissi verfeinert",
      "author": "",
      "link": "",
      "date": "2013-10-02T12:46:55.7830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Geo"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "geo"
      ]
    },
    {
      "id": 1255,
      "title": "function keyword for pattern matching",
      "comment": "Strangely enough, really useful documentation of F#'s \"function\" keyword used for pattern matching is difficult to find within Microsoft's official documentation. A Google search turns up some helpful illustrations and discussions of the keyword. Here's a simple example that some might find useful.",
      "author": "musicologyman",
      "link": "",
      "date": "2013-10-02T12:55:54.3100000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "pattern matching"
      ]
    },
    {
      "id": 1256,
      "title": "file1.fsx",
      "comment": "Test",
      "author": "egerland",
      "link": "",
      "date": "2013-10-05T11:34:27.9500000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "tryfsharp"
      ]
    },
    {
      "id": 1257,
      "title": "qModule.fsx",
      "comment": "Lori's calling module",
      "author": "llq",
      "link": "",
      "date": "2013-10-05T21:03:52.1430000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "qModule UNCC",
        "tryfsharp"
      ]
    },
    {
      "id": 1258,
      "title": "qModule.fsx",
      "comment": "Testing",
      "author": "llq",
      "link": "",
      "date": "2013-10-05T21:16:46.2970000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "qModule UNCC",
        "tryfsharp"
      ]
    },
    {
      "id": 1259,
      "title": "Quick & Dirty Dynamic XLinq",
      "comment": "Uses dynamic operator to quickly create XML",
      "author": "David Grenier",
      "link": "",
      "date": "2013-10-06T20:08:40.4270000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "xml",
        "linq",
        "dynamic"
      ]
    },
    {
      "id": 1260,
      "title": "Generate a X509 Certificate for testing purposes",
      "comment": "Small script to generate a X509 certificate for testing purposes. In my case, for generating signed PDF documents.\r\n\r\nThis will write the certificate and it's key out into a Pkcs 12 store. It relies on the BouncyCastle library (version 1.7 worked fine).",
      "author": "mavnn",
      "link": "https://twitter.com/mavnn",
      "date": "2013-10-08T14:14:01.6970000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "BouncyCastle"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "X509",
        "Crypto"
      ]
    },
    {
      "id": 1261,
      "title": "Option.either",
      "comment": "I think the following function is useful allowing you to do an Option.map + defaultArg in one go (plus defaultArg argument order is a little annoying).\r\n\r\nMight need a better name.",
      "author": "David Grenier",
      "link": "",
      "date": "2013-10-09T14:22:00.3330000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "option"
      ]
    },
    {
      "id": 1262,
      "title": "xBehave QuickStart sample",
      "comment": "xBehave QuickStart sample direct conversion to F# from C#: https://github.com/xbehave/xbehave.net/wiki/Quickstart",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-10-09T21:14:15.0530000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "xBehave",
        "xUnit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "xBehave",
        "BDD"
      ]
    },
    {
      "id": 1263,
      "title": "xBehave QuickStart sample with pipes",
      "comment": "xBehave QuickStart sample conversion to F# from C# with some helper functions: https://github.com/xbehave/xbehave.net/wiki/Quickstart",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-10-09T21:41:02.9500000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "xBehave",
        "xUnit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "xBehave",
        "BDD"
      ]
    },
    {
      "id": 1264,
      "title": "xBehave Quickstart sample with custom operator",
      "comment": "xBehave Quickstart sample conversion in F# using a custom operator: https://github.com/xbehave/xbehave.net/wiki/Quickstart\r\nhttps://github.com/xbehave/xbehave.net/wiki/Scenarios-with-examples",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-10-09T21:58:02.0630000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "xBehave",
        "xUnit"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "xBehave",
        "BDD"
      ]
    },
    {
      "id": 1265,
      "title": "equationParseExample.fsx",
      "comment": "Here's a very short, very simple, example for Algebraic Manipulation of the equation x + y = z",
      "author": "Virgil",
      "link": "",
      "date": "2013-10-10T05:58:09.6300000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "#algebra #algebraicmanipulation #algebraic",
        "tryfsharp"
      ]
    },
    {
      "id": 1266,
      "title": "xBehave Quickstart with computation builders",
      "comment": "Another version of the xBahve quick start example, this time using custom F# computation builder to make the code nicer. We define a builder for step and custom functions for Given/And/When/Then.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net/blog",
      "date": "2013-10-10T16:12:42.5630000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "xBehave",
        "xUnit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "xunit",
        "testing",
        "bdd",
        "xbehave"
      ]
    },
    {
      "id": 1267,
      "title": "HtmlAgilityPack.FSharp",
      "comment": "An F# wrapper for HtmlAgilityPack",
      "author": "Gustavo Guerra",
      "link": "http://blog.codebeside.org",
      "date": "2013-10-14T21:36:18.5470000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "HtmlAgilityPack-PCL"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "HtmlAgilityPack html"
      ]
    },
    {
      "id": 1268,
      "title": "In-list / contains expression",
      "comment": "Filter by list of properties when provider supports filter expressions but doesn't support Contains.\r\nEquivalent C# : https://gist.github.com/mausch/6893533",
      "author": "Mauricio Scheffer",
      "link": "http://bugsquash.blogspot.com",
      "date": "2013-10-16T04:59:12.4770000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "quotations"
      ]
    },
    {
      "id": 1269,
      "title": "Lambda",
      "comment": "With love to Ilker...",
      "author": "sforkmann",
      "link": "",
      "date": "2013-10-19T19:56:09.0170000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lambda calculus"
      ]
    },
    {
      "id": 1270,
      "title": "Release Notes parser",
      "comment": "See: https://github.com/fsharp/FAKE/issues/171\r\n\r\nThis is a parser for RELEASE_NOTES.md files for F# projects. Handles both simple and more complex file formats described in the link above.",
      "author": "Alpha Diallo",
      "link": "See: https://github.com/fsharp/FAKE/issues/171",
      "date": "2013-10-20T01:15:55.1970000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "FAKE",
        "F# Community Code Sprint"
      ]
    },
    {
      "id": 1271,
      "title": "Understanding the world with F#",
      "comment": "N/A",
      "author": "",
      "link": "",
      "date": "2013-10-21T07:53:24.6530000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "deedle"
      ]
    },
    {
      "id": 1272,
      "title": "Log file parser for log4Net files",
      "comment": "Log file parser for log4Net files",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2013-10-26T23:02:45.3530000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "log",
        "parsing"
      ]
    },
    {
      "id": 1273,
      "title": "haugen - part 1",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-10-28T07:04:08.9030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1274,
      "title": "langley - part 1",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-10-28T07:10:18.8800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1275,
      "title": "Convert list of sequences to sequence of lists",
      "comment": "Function to combine the values of a list of sequences into a sequence of lists where each list contains the nth element of the different sequences. It works like zip but for an arbitrary number of sequences and it returns lists instead of tuples. As with zip when one sequence is exhausted any remaining elements in the other sequences are ignored.",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com/",
      "date": "2013-10-30T11:07:11.6070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seq",
        "list",
        "sequences",
        "sequence"
      ]
    },
    {
      "id": 1276,
      "title": "MonoTouch.Dialog",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-10-30T18:25:35.9030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1277,
      "title": "MonoTouch.Dialog Clean",
      "comment": "Cleaned up syntax",
      "author": "",
      "link": "",
      "date": "2013-10-30T19:58:47.4630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "N/A"
      ]
    },
    {
      "id": 1278,
      "title": "Bank OCR",
      "comment": "User Story 1 from the Bank OCR Kata: http://codingdojo.org/cgi-bin/wiki.pl?KataBankOCR ",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-10-31T12:04:04.3730000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Kata"
      ]
    },
    {
      "id": 1279,
      "title": "KataBankOCR",
      "comment": "See: http://codingdojo.org/cgi-bin/wiki.pl?KataBankOCR\r\nProg. F# 2013 - London",
      "author": "Zach Bray",
      "link": "",
      "date": "2013-10-31T12:09:13.4130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "OCR",
        "Kata",
        "Parsing"
      ]
    },
    {
      "id": 1280,
      "title": "Official SkillsMatter 2013 F# Tutorials Programming with the Stars Code Snippet  ",
      "comment": "SkillsMatter 2013 F# Tutorials Programming with the Stars Code Snippet ",
      "author": "Rickasaurus",
      "link": "http://richardminerich.com",
      "date": "2013-10-31T12:41:04.2630000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "kata"
      ]
    },
    {
      "id": 1281,
      "title": "KataBankOCR User Story 1",
      "comment": "User Story 1 at http://codingdojo.org/cgi-bin/wiki.pl?KataBankOCR\r\n1. Define a function which retrieves text of a single digit with specified index in text of a number.\r\n2. Make a sequence of texts of each digit of account number.\r\n3. Find indices of text of 0 to 9 digit which satisfies structural equality to them.",
      "author": "nagat01",
      "link": "https://bitbucket.org/nagat01",
      "date": "2013-10-31T14:38:06.9500000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Kata",
        "structural equality"
      ]
    },
    {
      "id": 1282,
      "title": "Undertone Baa Baa black sheep",
      "comment": "From progfsharp tutorials",
      "author": "mavnn",
      "link": "https://twitter.com/mavnn",
      "date": "2013-10-31T16:52:25.1370000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Undertone",
        "progfsharp"
      ]
    },
    {
      "id": 1283,
      "title": "Control Flow via Index Exceptions",
      "comment": "Simple, but slow. Don't do this at home :)",
      "author": "mavnn",
      "link": "https://twitter.com/mavnn",
      "date": "2013-11-01T11:12:47.2730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "progfsharp"
      ]
    },
    {
      "id": 1284,
      "title": "Actors with control actor",
      "comment": "Actors with control actor. No mutable state.",
      "author": "Tuomas Hietanen",
      "link": "https://gist.github.com/Thorium",
      "date": "2013-11-02T00:04:22.9200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Actors",
        "agent",
        "MailboxProcessor"
      ]
    },
    {
      "id": 1285,
      "title": "Huffman coding est Cool",
      "comment": "Huffman coding in F#. frenchCode courtesy of M.Odersky.\r\n",
      "author": "nicolas",
      "link": "",
      "date": "2013-11-02T17:16:56.3130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "huffman",
        "entropy"
      ]
    },
    {
      "id": 1286,
      "title": "Bank OCR  Parser",
      "comment": "bank OCR code parse from London's ProgF# 2013",
      "author": "Daniel Kovi",
      "link": "",
      "date": "2013-11-04T12:57:44.4830000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "progF#",
        "OCR"
      ]
    },
    {
      "id": 1287,
      "title": "Why printing None prints <null>",
      "comment": "When printing None via printfn (or any of the other print functions for that matter), the result is <null>. This example shows why.",
      "author": "Dave Fancher",
      "link": "http://davefancher.com/",
      "date": "2013-11-04T19:07:28.4100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "option",
        "CompilationRepresentationAttribute"
      ]
    },
    {
      "id": 1288,
      "title": "Are Files Present In A Directory?",
      "comment": "A quick and dirty function to check to see if there are files present in a directory.  Note this will return false if there are only subdirs in a directory.",
      "author": "Onorio Catenacci",
      "link": "http://onor.io",
      "date": "2013-11-05T20:31:43.6670000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Files",
        "IO",
        "Utility"
      ]
    },
    {
      "id": 1289,
      "title": "Quick and Dirty Testing Data",
      "comment": "Selection of helper functions for generating test data.",
      "author": "mavnn",
      "link": "https://twitter.com/mavnn",
      "date": "2013-11-08T15:42:11.3800000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Hacking"
      ]
    },
    {
      "id": 1290,
      "title": "Fun with FizzBuzz",
      "comment": "Lazily generate fizzbuzz results and provide a test function. Parameterize the inputs and predicates.",
      "author": "Ryan Riley",
      "link": "",
      "date": "2013-11-08T16:37:54.4430000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 10,
      "tags": [
        "fizzbuzz"
      ]
    },
    {
      "id": 1291,
      "title": "Minimum Spanning Tree",
      "comment": "An implementation of a minimum spanning tree calculation algorithm based on Kruskal's algorithm",
      "author": "Faisal Waris",
      "link": "",
      "date": "2013-11-11T01:01:01.8700000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "graph",
        "graph theory",
        "minimum spanning tree",
        "mst",
        "Kruskal"
      ]
    },
    {
      "id": 1292,
      "title": "BitArray to Sequence",
      "comment": "Convert a BitArray to a sequence.",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com/",
      "date": "2013-11-14T13:24:47.6900000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "seq",
        "BitArray",
        "sequences"
      ]
    },
    {
      "id": 1293,
      "title": "Repository",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-11-15T14:18:53.1470000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1294,
      "title": "Sample for train/test sets in Deedle Frames",
      "comment": "Supervised learning algorithms need a training set and a test set.  This snippet show two ways to generate train/test sets.  \r\n\r\nFirst is by count, where it will take a random number of rows from the Frame and generate two new frame of the specified size.  This is useful if you have a very large dataset, but you only want to explore your learning algorithm on a small subset.\r\n\r\nSecond is by ratio,   this will break the frame into two parts based on the ratio given.  For example you might want to train on 25% of your data, then test on the other 75%.  ",
      "author": "tonyabell",
      "link": "http://www.tonyabell.com/",
      "date": "2013-11-16T19:12:06.7770000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Deedle"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Deedle"
      ]
    },
    {
      "id": 1295,
      "title": "ManyProc",
      "comment": "Demonstration of the manyproc sample from Erlang using F# MailboxProcessor.",
      "author": "Ryan Riley",
      "link": "",
      "date": "2013-11-18T10:01:45.4800000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Agent",
        "MailboxProcessor"
      ]
    },
    {
      "id": 1296,
      "title": "Tiny Logging Module",
      "comment": "High performance asynchronous Logging module with time-based rollover and size-based file retention in under a 100 lines of F#\r\nBug fix: Fixed log file name date time from \"yyyyMMddhhmm\" to yyyyMMddHHmm\" (24 hour clock)",
      "author": "Faisal Waris",
      "link": "",
      "date": "2013-11-18T21:19:45.7400000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "log",
        "logging",
        "utility",
        "utilities"
      ]
    },
    {
      "id": 1297,
      "title": "Convert a Float to a Mixed Number",
      "comment": "Function to Convert a float to a mixed number.\r\nMy thanks to John Kennedy of Santa Monica College for his \"Algorithm to Convert a Decimal to a Fraction\" \r\n(see link).  ",
      "author": "visProcessEngg",
      "link": "http://www.docstoc.com/docs/88518669/Algorithm-To-Convert-A-Decimal-To-A-Fraction",
      "date": "2013-11-24T23:10:37.9130000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "mixed number",
        "fraction",
        ""
      ]
    },
    {
      "id": 1298,
      "title": "Retail with units of measure",
      "comment": "Sample retail domain model, using F# types (records and discriminated unions) with JSON sample data using F# Data type provider.",
      "author": "Tomas Petricek & Phil Trelford",
      "link": "http://tomasp.net",
      "date": "2013-12-03T10:35:07.6200000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "retail",
        "json",
        "type providers"
      ]
    },
    {
      "id": 1299,
      "title": "Fuzzy calculus",
      "comment": "Simple implementation of interval and fuzzy calculus. ",
      "author": "Dmitry Sevastianov",
      "link": "http://fuzzyfsharp.wordpress.com/",
      "date": "2013-12-09T22:05:27.6730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "fuzzy",
        "interval"
      ]
    },
    {
      "id": 1300,
      "title": "The Ramer-Douglas-Peucker path reduction algorithm",
      "comment": "A simple implementation of the Douglas-Peucker path reduction algorithm.  Use for simplifying curves, for instance in plotting coastlines.\r\n\r\nLoosely based on this implementation: http://karthaus.nl/rdp/",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2013-12-10T08:20:13.2630000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "nunit",
        "fsunit"
      ],
      "source": "",
      "versions": 3,
      "tags": [
        "curves"
      ]
    },
    {
      "id": 1301,
      "title": "BigData Analysis using Deedle and FSharp.Charting",
      "comment": "Tomas has released their F# data analysis library called Deedle, I just got around to playing with it. It looks really cool! ",
      "author": "Joel Huang",
      "link": "",
      "date": "2013-12-12T13:28:45.9030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Big data",
        "data science",
        "Deedle",
        "Fsharp.Charting"
      ]
    },
    {
      "id": 1302,
      "title": "factorial.fsx",
      "comment": "Factorial recursive function using match with pattern.",
      "author": "gg00xiv",
      "link": "",
      "date": "2013-12-12T17:43:10.4330000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "factorial",
        "pattern",
        "match",
        "with",
        "rec",
        "let",
        "tryfsharp"
      ]
    },
    {
      "id": 1303,
      "title": "factorial.fsx",
      "comment": "Factorial recursive function using match ... with pattern.",
      "author": "gg00xiv",
      "link": "",
      "date": "2013-12-12T17:46:01.9600000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "factorial",
        "pattern",
        "match",
        "with",
        "rec",
        "let",
        "tryfsharp"
      ]
    },
    {
      "id": 1304,
      "title": "Use node.js packages from F#",
      "comment": "For example executable, install NPM and  stylus  package.",
      "author": "Sergey Kaspar",
      "link": "",
      "date": "2013-12-13T11:33:30.4370000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "web",
        "nodejs"
      ]
    },
    {
      "id": 1305,
      "title": "Simple F# Expression to Java compiler",
      "comment": "Compiles simple F# quoted expressions (literals, values, operators, ifs and for loops) to Java code.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-12-15T23:20:48.3830000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Java",
        "Compiler"
      ]
    },
    {
      "id": 1306,
      "title": "Diff two strings",
      "comment": "Identify differences between two generally aligned strings.",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2013-12-18T11:51:40.9830000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Difference",
        "strings"
      ]
    },
    {
      "id": 1307,
      "title": "Synchronized System.Console.WriteLine using MailboxProcessor",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2013-12-19T20:35:12.5770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1308,
      "title": "Synchronized System.Console.WriteLine using MailboxProcessor",
      "comment": "Useful if you are writing to the console from multiple threads and want to avoid goofed up text",
      "author": "Darren Smith",
      "link": "",
      "date": "2013-12-19T20:38:21.9330000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "System.Console.WriteLine"
      ]
    },
    {
      "id": 1309,
      "title": "Small Basic Interpreter",
      "comment": "Small Basic abstract syntax tree, interpreter and embedded DSL. Supports Small Basic's keywords and arithmetic, logical and comparison operators.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-12-20T22:46:30.5170000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Basic",
        "DSL",
        "Interpreter",
        "ast"
      ]
    },
    {
      "id": 1310,
      "title": "Dictionary safe for concurrent reads",
      "comment": "A fixed-size hash table of Maps. Adding and removing key-value pairs replaces one Map in the spine of the hash table. Threads can read from this collection concurrently while a single thread is writing into it.\r\n\r\nI created this as a response to the recent thread by Ayende Rahien about the performance of purely functional dictionaries. According to my measurements this collection is 3x slower to build and 2x slower to search than a thread-unsafe .NET Dictionary but it provides the thread safety he requires. However, the built-in .NET ConcurrentDictionary is slightly faster than this and provides stronger thread-safety guarantees.\r\n",
      "author": "Jon Harrop",
      "link": "",
      "date": "2013-12-22T02:09:43.8200000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "collection",
        "hash table"
      ]
    },
    {
      "id": 1311,
      "title": "hexdump",
      "comment": "Print a byte buffer in the same way unix tool hexdump would.",
      "author": "Robert Pickering",
      "link": "http://strangelights.com/blog",
      "date": "2013-12-23T13:53:32.5400000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "binary"
      ]
    },
    {
      "id": 1312,
      "title": "hexdump",
      "comment": "A more f#ish version of Robert's version http://fssnip.net/l9 ",
      "author": "thinkbeforecoding",
      "link": "",
      "date": "2013-12-23T15:16:15.0830000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "binary"
      ]
    },
    {
      "id": 1313,
      "title": "Hexdump (2)",
      "comment": "A different, sketchy attempt at hexdump.\r\n",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2013-12-23T15:18:51.0400000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "hexdump"
      ]
    },
    {
      "id": 1314,
      "title": "Query groupBy multiple columns (SqlDataConnection type provider)",
      "comment": "Querying a players table grouped by first, then by the last name and counting the number of occurrence",
      "author": "-H-M-",
      "link": "",
      "date": "2013-12-25T16:16:58.7400000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "query",
        "groupBy",
        "SqlDataConnection",
        "AnonymousObject"
      ]
    },
    {
      "id": 1315,
      "title": "Dynamic opearator",
      "comment": "Get/put field/property and invoke method (one and multi arguments) via \"?\" operator.",
      "author": "Zhukoff Dima",
      "link": "",
      "date": "2013-12-26T21:48:32.2900000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dynamic",
        "reflection"
      ]
    },
    {
      "id": 1316,
      "title": "Small Basic Parser",
      "comment": "Small Basic abstract syntax tree, parser and interpreter. Supports Small Basic's keywords and arithmetic, logical and comparison operators.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-12-27T08:06:15.1330000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 6,
      "tags": [
        "Basic",
        "Interpreter",
        "fparsec",
        "parsing",
        "ast"
      ]
    },
    {
      "id": 1317,
      "title": "Simple C# Parser",
      "comment": "Simple prototype C# AST and parser using the FParsec parser combinator library. Parses a subset of C# 1.1 constructs.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2013-12-31T12:56:12.5800000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 8,
      "tags": [
        "C#",
        "fparsec",
        "parsing",
        "ast"
      ]
    },
    {
      "id": 1318,
      "title": "Pluggable Exception Contexts",
      "comment": ".Net exceptions carry with them lots of useful metadata that are not directly user modifiable. In certain  applications, such as distributed or symbolic execution it might be reasonable to need to modify such metadata. The following pattern is a proposal on effectively decoupling an exception from its contextual metadata, as well as a way of defining exception hierarchies while avoiding all the ISerializable boilerplate.",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2014-01-03T11:59:23.5400000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "exception",
        "stacktraces"
      ]
    },
    {
      "id": 1319,
      "title": "Heterogeneous Parallel Async",
      "comment": "Perform parallel Async returning heterogeneous types.\r\n\r\n(The solution presented here is based on a gist sent to me by [Anton Tayanovskyy](http://t0yv0.blogspot.com/ \"Anton Tayanovskyy\"), Twitter: [@t0yv0](https://twitter.com/t0yv0).)",
      "author": "Jack Fox",
      "link": "jackfoxy.com",
      "date": "2014-01-08T22:58:10.1270000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Async"
      ]
    },
    {
      "id": 1320,
      "title": "Porting of AsyncOneManyLock to F#",
      "comment": "If you have read the awesome book by Jeffrey Richter CLR via C# 4 ed. you have discovered that there are more optimal ways for thread synchronization than the one provided by the BCL. One of them is the use of new asynchronous capabilities in order to create an asynchronous synchronization primitive. In the book it is presented an AsyncOneManyLock which is used for thread synchornization for code with a high demand for responsiveness and scalability.\r\n\r\nIf you are an F# developer you know that the F# Asynchornous Workflow  and the Task Parallel Library are different, so I decided to port this useful piece of code to F# and show you how to use it with an example.",
      "author": "Antonio Parata",
      "link": "http://antonioparata.blogspot.it/2014/01/porting-of-asynconemanylock-to-f.html",
      "date": "2014-01-08T23:49:23.8700000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Async",
        "TPL",
        "synchronization"
      ]
    },
    {
      "id": 1321,
      "title": "Verify Azure-ACS issued OAuth Simple Web Token",
      "comment": "Verifies the OAuth SWT (simple web token) issued by Azure ACS\r\nThe SWT may be obtained by many methods; one way is:\r\n - \"How to: Request a Token from ACS via the OAuth WRAP Protocol\"\r\n    (http://msdn.microsoft.com/en-us/library/windowsazure/hh674475.aspx)\r\n(Note I used the userid/password method to obtain the token on behalf of a 'service identity' set up in ACS)\r\nThe token is normally verifed by a 'relying party' such as an ASP.Net website hosting a Web API\r\nGeneral ACS documentation is here: http://msdn.microsoft.com/en-us/library/gg429788.aspx\r\n",
      "author": "Faisal Waris",
      "link": "",
      "date": "2014-01-09T12:13:26.1900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "oauth",
        "azure",
        "acs",
        "authentication",
        "authorization"
      ]
    },
    {
      "id": 1322,
      "title": "Exploring Population Data",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-01-15T09:24:10.0200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1323,
      "title": "Exploring Population Data",
      "comment": "Learn Key Principle of F# in just a few minutes with the following Sample of \"World Bank Type Provider - Exploring Population Data\"",
      "author": "Muhammad Mugees Asif",
      "link": "http://www.tryfsharp.org",
      "date": "2014-01-15T09:32:07.4130000",
      "likes": 368,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F#"
      ]
    },
    {
      "id": 1324,
      "title": "String.notNullOrEmpty extension to strings",
      "comment": "String.notNullOrEmpty extension to strings",
      "author": "Tuomas Hietanen",
      "link": "https://github.com/thorium/CatVsDog/",
      "date": "2014-01-18T09:57:44.3030000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "string"
      ]
    },
    {
      "id": 1325,
      "title": "Set timeout or cancel ",
      "comment": "Using task based async, won't block the thread.\r\n",
      "author": "Tuomas Hietanen",
      "link": "https://github.com/thorium/CatVsDog/",
      "date": "2014-01-18T10:22:08.9800000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "task",
        "scheduling",
        "timeout"
      ]
    },
    {
      "id": 1326,
      "title": "Thread local & portable dependency injection",
      "comment": "This is a pattern I knocked together to address the issue of global mutable state in the F# compiler.",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2014-01-21T17:42:55.5700000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "dependency injection",
        "thread safety",
        "global state"
      ]
    },
    {
      "id": 1327,
      "title": "Layout binary tree",
      "comment": "Solution to the layout binary tree problem from 99 OCaml problems",
      "author": "Darren Platt, Tomas Petricek",
      "link": "http://ocaml.org/learn/tutorials/99problems.html",
      "date": "2014-01-22T17:08:33.8670000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "binary tree",
        "tree",
        "layout"
      ]
    },
    {
      "id": 1328,
      "title": "Write graph as DGML file",
      "comment": "Write graph as dgml file",
      "author": "loony",
      "link": "",
      "date": "2014-01-23T16:51:31.4200000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "dgml graph"
      ]
    },
    {
      "id": 1329,
      "title": "从 IE 中读取 Cookie 信息",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-01-24T14:11:02.7730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "SHDocVw"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1330,
      "title": "Fun with infinite sums - Haacked!",
      "comment": "F# version of the code samples from an article \"Fun with infinite sums\" by Phil Haack. Using infinite sequences to separate the concerns and F# charting for simpler visualization.",
      "author": "Tomas Petricek",
      "link": "http://haacked.com/archive/2014/01/26/fun-with-infinite-sums/",
      "date": "2014-01-28T04:40:18.8730000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharp.Charting"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "series",
        "charting",
        "sums"
      ]
    },
    {
      "id": 1331,
      "title": "Different Actors implementation",
      "comment": "Discussion here http://stackoverflow.com/a/21434034/801189",
      "author": "V.B.",
      "link": "",
      "date": "2014-01-30T02:13:20.2370000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Actors"
      ]
    },
    {
      "id": 1332,
      "title": "Array tail match",
      "comment": "Match the first elements of an array an returns tail.",
      "author": "thinkbeforecoding",
      "link": "http://thinkbeforecoding.com",
      "date": "2014-01-30T09:12:06.7230000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F#",
        "Active Patterns",
        "Array"
      ]
    },
    {
      "id": 1333,
      "title": "brute_force_tail_array",
      "comment": "brute force pattern building for an array tail",
      "author": "timvw",
      "link": "",
      "date": "2014-01-30T09:45:56.4670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "?"
      ]
    },
    {
      "id": 1334,
      "title": "Active pattern for partial array matching",
      "comment": "Active pattern for partial array matching.. because I can ;)",
      "author": "",
      "link": "",
      "date": "2014-01-30T10:10:57.9130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "F#",
        "Active Pattern",
        "Parametrized"
      ]
    },
    {
      "id": 1335,
      "title": "Ini file type provider",
      "comment": "Parse INI file (hi old school :) ) via type providers. \r\n\r\nWARNING:\r\nadd to project ProvidedTypes-0.2.fs & ProvidedTypes-0.2.fsi from http://fsharp3sample.codeplex.com/SourceControl/latest#SampleProviders/Shared/ProvidedTypes-0.2.fs\r\n",
      "author": "Zhukoff Dima",
      "link": "",
      "date": "2014-01-31T13:00:43.5030000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "ini",
        "Type Provider"
      ]
    },
    {
      "id": 1336,
      "title": "High-Order Functions for Excel using NetOffice",
      "comment": "Similar to the snippet by Kit Eason, but using Net Office. Also handles large spreadsheets, but with some compromises, e.g. using Array2D rather than Seq and not supporting filter. To use, paste code into VS, open Excel (as the code works on the default workbook loaded) and then use FSI. ",
      "author": "Phil Brooks",
      "link": "http://fsharpactuary.blogspot.co.uk/",
      "date": "2014-02-02T17:24:39.4130000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "NetOffice.Excel.Net45"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Excel"
      ]
    },
    {
      "id": 1337,
      "title": "numl Machine Learning",
      "comment": "This is the getting started sample for the numl machine learning library available at http://numl.net/ written in F#.",
      "author": "Taha Hachana",
      "link": "fsharp-code.blogspot.com",
      "date": "2014-02-03T08:58:19.7330000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "numl"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "numl",
        "machine",
        "learning"
      ]
    },
    {
      "id": 1338,
      "title": "Azimuthal equidistant projection",
      "comment": "Simple and a more optimized implementation of the azimuthal equidistant projection. Input is expected in degrees.",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com/",
      "date": "2014-02-04T15:52:26.8030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "spatial"
      ]
    },
    {
      "id": 1339,
      "title": "Monad Bind 1 of 3",
      "comment": "After watching this clip (http://www.youtube.com/watch?v=ZhuHCtR3xq8) on Youtube featuring Brian Beckman I wanted to try to sketch Brian's main argument that Monads' main purpose is function composition.\r\nI will post my sketch to http://rodhern.wordpress.com/2014/02/ .\r\nThese snippets are the companion examples to the blog post.",
      "author": "Robert Nielsen",
      "link": "http://rodhern.wordpress.com/",
      "date": "2014-02-06T20:24:49.1400000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Monad",
        "Bind",
        "Example",
        "Learning F#"
      ]
    },
    {
      "id": 1340,
      "title": "Monad Bind 2 of 3",
      "comment": "After watching this clip (http://www.youtube.com/watch?v=ZhuHCtR3xq8) on Youtube featuring Brian Beckman I wanted to try to sketch Brian's main argument that Monads' main purpose is function composition.\r\nI will post my sketch to http://rodhern.wordpress.com/2014/02/ .\r\nThese snippets are the companion examples to the blog post.",
      "author": "Robert Nielsen",
      "link": "http://rodhern.wordpress.com/",
      "date": "2014-02-06T22:25:03.3000000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Monad",
        "Bind",
        "Example",
        "Learning F#"
      ]
    },
    {
      "id": 1341,
      "title": "Azimuthal equidistant projection with measures",
      "comment": "Simple version of the azimuthal equidistant projection (see also http://fssnip.net/lA) but with measures. This avoids mixing of degrees and radians and longitudes/x and latitudes/y",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com/",
      "date": "2014-02-07T13:04:15.2570000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "math",
        "spatial"
      ]
    },
    {
      "id": 1342,
      "title": "Active pattern example",
      "comment": "Example active pattern for tweet.",
      "author": "Robert Nielsen",
      "link": "http://rodhern.wordpress.com/",
      "date": "2014-02-07T19:02:21.2200000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Active pattern",
        "Twitter",
        "Example"
      ]
    },
    {
      "id": 1343,
      "title": "matrix-inv.fsx",
      "comment": "calcula la matriz inversa",
      "author": "ivpadim",
      "link": "",
      "date": "2014-02-12T03:58:36.6000000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "matrix",
        "tryfsharp"
      ]
    },
    {
      "id": 1344,
      "title": "Simple KMeans clustering in 2D",
      "comment": "I needed a crude k-means (http://en.wikipedia.org/wiki/K-means_clustering) clustering method for a one off test of something, and decided to try to do in F# for learning purposes",
      "author": "@BrockSamsonUK",
      "link": "",
      "date": "2014-02-13T13:06:12.9070000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Mathematics"
      ]
    },
    {
      "id": 1345,
      "title": "Monad Bind 4 of 3",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-02-15T23:47:23.0230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1346,
      "title": "Monad Bind 3 of 3",
      "comment": "After watching this clip (http://www.youtube.com/watch?v=ZhuHCtR3xq8) on Youtube featuring Brian Beckman I wanted to try to sketch Brian's main argument that Monads' main purpose is function composition.\r\nI will post my sketch to http://rodhern.wordpress.com/2014/02/ .\r\nThese snippets are the companion examples to the blog post.",
      "author": "Robert Nielsen",
      "link": "http://rodhern.wordpress.com/",
      "date": "2014-02-16T08:15:24.2900000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Monad",
        "Bind",
        "Example",
        "Learning F#"
      ]
    },
    {
      "id": 1347,
      "title": "Initialization of 2D array that may fail",
      "comment": "A function to initialize 2D array that supports failures - if the initializer fails to produce value for any of the array locations, the construction is stopped and the function returns 'None'",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-02-20T21:41:03.0730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "array",
        "2d",
        "initialize",
        "option"
      ]
    },
    {
      "id": 1348,
      "title": "Compute MD5 hash of a string",
      "comment": "Compute MD5 hash of a string",
      "author": "Kit Eason",
      "link": "http://twitter.com/kitlovesfsharp",
      "date": "2014-02-21T14:59:07.0600000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Cryptography"
      ]
    },
    {
      "id": 1349,
      "title": "functional fizz buzz",
      "comment": "Recently witnessed a C# programmer struggle with the fizz buzz interview question.  But it is straightforward in F# using pattern matching on the two-factor decision table. ",
      "author": "Alan Wostenberg",
      "link": "www.alteryx.com",
      "date": "2014-02-26T18:26:25.8500000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Puzzles"
      ]
    },
    {
      "id": 1350,
      "title": "Generate simple linear equation systems",
      "comment": "Generates simple systems of linear equations, suitable for being solved by someone who's just started learning about them.  Change the ranges to make them suitable for solving without a calculator.",
      "author": "Anonymous",
      "link": "",
      "date": "2014-02-26T19:28:24.1670000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "education",
        "learning",
        "mathematics"
      ]
    },
    {
      "id": 1351,
      "title": "Await wait handle with cancellation",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-02-27T16:47:31.1630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1352,
      "title": "Await wait handle with cancellation",
      "comment": "Await  a wait handle with a cancellation token and optional timeout.  Returns a flag indicating whether the handle was signalled, the timeout period elapsed, or the wait was cancelled.",
      "author": "Michael Parker",
      "link": "",
      "date": "2014-02-27T16:50:49.9670000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "cancellation"
      ]
    },
    {
      "id": 1353,
      "title": "This is test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-03-04T13:49:48.2900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1354,
      "title": "Rabbits and Recurrence Relations",
      "comment": "One solution to Rosalind rabbits problem.",
      "author": "Michel Caradec",
      "link": "http://rosalind.info/problems/fib/",
      "date": "2014-03-04T21:21:00.5070000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "rosalind",
        "recursion"
      ]
    },
    {
      "id": 1355,
      "title": "Generating side-by-side COM manifests for .Net assemblies",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-03-05T16:48:39.2700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1356,
      "title": "Type Provider for Directory",
      "comment": "Type provider for acceess more datafile via class property.",
      "author": "Zhukoff Dima",
      "link": "",
      "date": "2014-03-09T00:55:34.3100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "TypeProvider",
        "Directory",
        "Data"
      ]
    },
    {
      "id": 1357,
      "title": "PDF Text Extract",
      "comment": "Extracts text content from PDF file using PDFsharp.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-03-10T08:27:52.8800000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "PDFsharp"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "PDF"
      ]
    },
    {
      "id": 1358,
      "title": "Pigeon/Akka immutable actor",
      "comment": "This is a Pigeon/Akka actor based on pure (if you remove printf) function instead of inheriting from a class..",
      "author": "thinkbeforecoding",
      "link": "http://thinkbeforecoding.com",
      "date": "2014-03-12T11:18:29.1330000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Pigeao",
        "Akka"
      ]
    },
    {
      "id": 1359,
      "title": "asyncChoose Computational Expression",
      "comment": "A simple computational expression to deal with asynchronous calls that return a choice type to signal failure.\r\n\r\nUseful for calling remote services that may fail - you can call the remote service with functions of type \"request -> Async<Choice<'success, 'fail>>\" and then chain the results together.",
      "author": "mavnn",
      "link": "https://twitter.com/mavnn",
      "date": "2014-03-12T13:05:46.4800000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "computation builder",
        "async",
        "choice"
      ]
    },
    {
      "id": 1360,
      "title": "Better Pigeon/Akka actors",
      "comment": "This time with recursive function through computation expression around continuations...",
      "author": "thinkbeforecoding",
      "link": "http://thinkbeforecoding.com",
      "date": "2014-03-12T18:05:43.2200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Akka",
        "Pigeon",
        "Actors"
      ]
    },
    {
      "id": 1361,
      "title": "Verify host name properly maps to IP addr.",
      "comment": "If you have a dynamic IP adddress for your computer on the internet and need your host name to resolve to that address you may use a service like DynDNS.org. This program will check to see if the host name resolves to the same IP address currently assigned to your computer. Works behind a router with NAT.",
      "author": "John Tarbox",
      "link": "JonnyBoats.wordpress.com",
      "date": "2014-03-14T07:09:49.6300000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "DNS"
      ]
    },
    {
      "id": 1362,
      "title": "Function returning counter function",
      "comment": "A simple function that creates a counter function (with localized mutable state).",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-03-16T03:11:19.6800000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "mutation",
        "reference cell"
      ]
    },
    {
      "id": 1363,
      "title": "Dictionary with comparer as type parameter",
      "comment": "Tired of confusing dictionary instances with different comparers (I am)? Stick it in the type, à la ocaml-core maps.",
      "author": "Mauricio Scheffer",
      "link": "http://bugsquash.blogspot.com",
      "date": "2014-03-17T04:17:41.9370000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "types",
        "Dictionary"
      ]
    },
    {
      "id": 1364,
      "title": "Computing factorial using combinators",
      "comment": "This snippet shows how to transform simple recursive factorial function to combinator form step-by-step.",
      "author": "Dmitri Soshnikov",
      "link": "http://blog.soshnikov.com",
      "date": "2014-03-17T07:08:59.2100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "factorial",
        "combinators",
        "learning"
      ]
    },
    {
      "id": 1365,
      "title": "do! ... |> Option.map ignore",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-03-18T12:32:57.0330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1366,
      "title": "Gray-Code",
      "comment": "http://FunctionalSoftware.net\r\nfrom http://FunctionalSoftware.net/starten-mit-f/",
      "author": "",
      "link": "",
      "date": "2014-03-18T14:26:57.0870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "binary code",
        "gray code"
      ]
    },
    {
      "id": 1367,
      "title": "Gray-Code",
      "comment": "\"a binary numeral system where two successive values differ in only one bit\"  http://en.wikipedia.org/wiki/Gray_code\r\n\r\nhttp://FunctionalSoftware.net/starten-mit-f/",
      "author": "FunctionalSoftware.net",
      "link": "http://FunctionalSoftware.net",
      "date": "2014-03-18T20:16:56.3070000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Gray-Code",
        "code",
        "binary",
        "pattern"
      ]
    },
    {
      "id": 1368,
      "title": "Calculate skewness",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-03-22T20:20:05.2730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "MathNet.Numerics"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1369,
      "title": "Deedle: performance improvements",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-03-24T03:30:35.5400000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Deedle"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1370,
      "title": "Random-key-generator and Base-58-encoding",
      "comment": "Generate random hex-string and calculate base58encode. I made these for some initial BTC-testing, but didn't test too much... seems to work, but would need some unit-tests... :-)\r\n\r\nFeel free to update or add new versions.\r\n",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2014-03-25T00:14:31.3900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Base58Check",
        "btc"
      ]
    },
    {
      "id": 1371,
      "title": "Create frame from dictionaries",
      "comment": "A simple example that creates a frame from a list of dictionaries. Each dictionary is treated as a row that maps column keys to values. The trick is to use Deedle value expansion.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-03-26T14:32:04.2270000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Deedle"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "deedle",
        "frame"
      ]
    },
    {
      "id": 1372,
      "title": "Alternative Actor Implementation for Android",
      "comment": "Actor implementation (much simplified) intended for use on mobile devices. Seems to provide better memory usage behavior than native F# Mailbox Processors (MPB) (on Android). Though is not as 'smooth' as native F# MBP. Smoothness here refers to how processing is balanced between consumers and producers (most relevant to single core machines).",
      "author": "Faisal Waris",
      "link": "http://fwaris.wordpress.com/2014/03/26/f-xamarin-experience-report/",
      "date": "2014-03-26T18:14:46.9200000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Actor",
        "MailboxProcessor",
        "Android"
      ]
    },
    {
      "id": 1373,
      "title": "Alternative ways to do some suggestions on F# user voice  site.",
      "comment": "I read all the suggestions on http://fslang.uservoice.com/ . They are great suggestions! I found some of then are realized well by using current language features. Then I introduce them.",
      "author": "nagat01",
      "link": "https://sites.google.com/site/fpaintnagato/home/top_english",
      "date": "2014-03-27T04:55:05.8400000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "language"
      ]
    },
    {
      "id": 1374,
      "title": "Alternate version of Private DU constructor",
      "comment": "A different way of expressing private DU constructors.",
      "author": "iceypoi",
      "link": "",
      "date": "2014-03-27T08:46:53.5230000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "language"
      ]
    },
    {
      "id": 1375,
      "title": "Array2d col filter",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-03-27T16:08:48.2430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1376,
      "title": "Point - Free Factorial",
      "comment": "Creating a point free factorial",
      "author": "",
      "link": "",
      "date": "2014-03-28T05:23:46.8270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "study"
      ]
    },
    {
      "id": 1377,
      "title": "Memoizing Y combinator",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-04-02T13:21:58.8630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1378,
      "title": "Memoization modules",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-04-03T18:58:46.5730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1379,
      "title": "Memoization modules",
      "comment": "Helper modules for different kinds of memoize functions.",
      "author": "Daniel Fabian (@iceypoi)",
      "link": "http://typedandnerdy.wordpress.com/2014/04/03/memoize/",
      "date": "2014-04-03T19:13:35.9170000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F#",
        "memoization"
      ]
    },
    {
      "id": 1380,
      "title": "GetStockInfo",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-04-06T09:24:03.4400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "FSharp.Data"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1381,
      "title": "GetStockInfo",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-04-06T09:50:58.8970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1382,
      "title": "Nokia USD",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-04-06T10:02:29.0330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1383,
      "title": "Different styles of pattern matching",
      "comment": "For tutorial, the same functionality, different styles of pattern matching.\r\n",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2014-04-06T19:27:22.0600000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "pattern matching"
      ]
    },
    {
      "id": 1384,
      "title": "Simple example how to use option type",
      "comment": "For tutorial, example how to use option type.",
      "author": "Tuomas Hietanen",
      "link": "http://thorium.github.io/FSharpAzure/Readme.html",
      "date": "2014-04-06T19:32:02.6400000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "option"
      ]
    },
    {
      "id": 1385,
      "title": "Small quiz-game",
      "comment": "Small quiz-game with World Bank TypeProvider (from FSharp.Data Nuget-package):\r\n\r\nWhich country has the capital city of (random capital)?\r\n(Three options)\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://thorium.github.io/FSharpAzure/2-AzureOwinWww/AzureOwinWwwFin.html",
      "date": "2014-04-06T19:49:43.6230000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharp.Data"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "world bank",
        "game"
      ]
    },
    {
      "id": 1386,
      "title": "Backup files async",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-04-07T10:14:15.8700000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1387,
      "title": "dasd",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-04-07T18:53:28.1530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1388,
      "title": "Poor man's distributed actors",
      "comment": "Knocked together a bare-minimum TCP wrapper for MailboxProcessor. Not intended for production.",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2014-04-07T19:33:48.8770000",
      "likes": 7,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FsPickler"
      ],
      "source": "",
      "versions": 5,
      "tags": [
        "actors"
      ]
    },
    {
      "id": 1389,
      "title": "An attempt at encoding GADTs",
      "comment": "Demonstrates a possible encoding for GADTs in F#. It is type safe, uses no reflection and pattern matches can be declared outside of the GADT definition itself.",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2014-04-08T23:36:31.4100000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "GADTs"
      ]
    },
    {
      "id": 1390,
      "title": "An attempt at encoding GADTs",
      "comment": "Demonstrates a possible encoding for GADTs in F#. It is type safe, uses no reflection and pattern matches can be declared outside of the definition itself. See also http://lambda-the-ultimate.org/node/1134",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2014-04-09T00:54:28.1670000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "GADTs"
      ]
    },
    {
      "id": 1391,
      "title": "Array Shuffle",
      "comment": "Shuffling array using Seq.fold",
      "author": "Karlkim Suwanmongkol",
      "link": "http://karlk.im",
      "date": "2014-04-10T20:36:49.7800000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "array",
        "shuffle",
        "random",
        "fold"
      ]
    },
    {
      "id": 1392,
      "title": "need_help",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-04-11T07:33:22.6000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1393,
      "title": "Print a list in a spiral",
      "comment": "Prints a list in a spiral",
      "author": "devshorts",
      "link": "http://www.onoffswitch.net",
      "date": "2014-04-11T20:15:38.8400000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "fsunit",
        "nunit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "list"
      ]
    },
    {
      "id": 1394,
      "title": "Palindrom",
      "comment": "Check string of palindroms",
      "author": "Zhukoff Dima",
      "link": "",
      "date": "2014-04-12T22:51:04.7200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Recursion"
      ]
    },
    {
      "id": 1395,
      "title": "Generic number literal",
      "comment": "A generic numeral G. It allows writing functions for arbitrary numeric type. The transformation is an efficient one, because it is implemented explicitly for every type.\r\n\r\nIt combines the type classes technique of FsControl (https://github.com/gmpl/FsControl and http://nut-cracker.azurewebsites.net/typeclasses-for-fsharp) with numeric literals. But FsControl is removed to completely avoid unnecessary function calls.",
      "author": "Daniel Fabian (@iceypoi)",
      "link": "typedandnerdy.blogspot.com",
      "date": "2014-04-14T18:55:55.7570000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "MathNet.Numerics.FSharp",
        "MathNet.Numerics"
      ],
      "source": "",
      "versions": 3,
      "tags": [
        "math",
        "numerics",
        "generics",
        "type classes"
      ]
    },
    {
      "id": 1396,
      "title": "Game of 2048",
      "comment": "Simple implementation of the popular game \"2048\". Can you add up the tiles and reach 2048?\r\nThe game can be played in fsi or you can add the GUI which is so far missing.",
      "author": "Tore Green",
      "link": "https://twitter.com/toredk",
      "date": "2014-04-17T19:01:54.9500000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "game"
      ]
    },
    {
      "id": 1397,
      "title": "Infer Xml Schemas from Sample Documents",
      "comment": "XmlSchemas are used to validate XML documents. Following demonstrates how to infer a schema from sample documents.  They are also used to visualize the structure of a class of documents.",
      "author": "Jonathan Leaver",
      "link": "http://msdn.microsoft.com/en-us/library/xz2797k1(v=vs.110).aspx",
      "date": "2014-04-21T17:46:48.7870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "infer",
        "xml",
        "schema"
      ]
    },
    {
      "id": 1398,
      "title": "Simple SqlProvider example",
      "comment": "Simple SQLProvider example",
      "author": "",
      "link": "",
      "date": "2014-04-23T19:41:13.1170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1399,
      "title": " Simple Fss Dynamic DataReader example",
      "comment": "This is using a think wrapper around Npgsql to provide dynamic column lookups (Thanks Tomas!) and demonstrating a classic pattern for Data readers.",
      "author": "",
      "link": "",
      "date": "2014-04-23T19:55:28.7370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Fss",
        "Npgsql"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "Fss",
        "Npgsql",
        "DataReader"
      ]
    },
    {
      "id": 1400,
      "title": "Missionaries and Cannibals Problem and its state space tree",
      "comment": "Generating a state space tree to the Missionaries and Cannibals Problem (http://en.wikipedia.org/wiki/Missionaries_and_cannibals_problem). \r\nThen, this tree is iterated with depth-first approach, printing all the visitations. The solutions to problem have a depth equals 9.",
      "author": "Fabio Galuppo",
      "link": "http://fabiogaluppo.wordpress.com/",
      "date": "2014-04-24T01:59:24.8930000",
      "likes": 11,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Puzzle",
        "Puzzles",
        "AI"
      ]
    },
    {
      "id": 1401,
      "title": "Raise an ArgumentException",
      "comment": "Convenience function to easily throw an argument exception with a helpful string description. Looks simple, but was hard to figure out.",
      "author": "Wallace Kelly",
      "link": "raiseargex",
      "date": "2014-04-25T19:03:40.8870000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Exceptions"
      ]
    },
    {
      "id": 1402,
      "title": "Quick and Dirty access to Marvel Comics API",
      "comment": "Just something I whipped up to check out the Marvel Comics API using JSON Type Provider",
      "author": "David Grenier",
      "link": "",
      "date": "2014-04-25T23:42:14.1170000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharp.Data"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "TypeProvider",
        "JSON",
        "Marvel"
      ]
    },
    {
      "id": 1403,
      "title": "FSharp.Date examples",
      "comment": "A few short usage examples for the FSharp.Date Type Provider (available on Nuget).",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-04-26T17:44:41.5870000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharp.Date"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Dates"
      ]
    },
    {
      "id": 1404,
      "title": "Bigint range sequence",
      "comment": "An F# bigint range is slow (see SOQ: http://stackoverflow.com/q/20534191).  This an IENum built specifically for bigint that has reasonable speed.  ~4 seconds instead of nearly 20 on my old mac mini",
      "author": "Tony Lee",
      "link": "",
      "date": "2014-04-26T22:26:40.2770000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "bigint sequence"
      ]
    },
    {
      "id": 1405,
      "title": "Text file line filter (script)",
      "comment": "A script suitable for FSI that copies a (UTF-8) text file throwing away uninteresting lines in the process.",
      "author": "Robert Nielsen",
      "link": "",
      "date": "2014-04-29T18:06:00.3270000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Text file",
        "Filter",
        "Script",
        "Learning F#"
      ]
    },
    {
      "id": 1406,
      "title": "ugly snippet",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-05-01T17:00:16.1330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1407,
      "title": "Ugly Snippet",
      "comment": "fixed my stupidity1",
      "author": "",
      "link": "",
      "date": "2014-05-01T17:01:44.9770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "ugly"
      ]
    },
    {
      "id": 1408,
      "title": "groupAdjacent",
      "comment": "A variation of another snippet \"Seq.groupWhen\". This one groups adjacent elements based on a predicate that accepts two arguments - the previous and current elements\r\n",
      "author": "Faisal Waris",
      "link": "",
      "date": "2014-05-01T18:27:16.2600000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Seq",
        "Sequence"
      ]
    },
    {
      "id": 1409,
      "title": "Lazy values and indentation",
      "comment": "Different ways to write lazy values - using the lazy keyword or the Lazy.Create function. Pick the one you like the most!",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-05-02T12:19:42.8800000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lazy"
      ]
    },
    {
      "id": 1410,
      "title": "Replying with exceptions in MailboxProcessor",
      "comment": "Just a quick and dirty hack",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2014-05-02T14:38:53.0200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "MailboxProcessor"
      ]
    },
    {
      "id": 1411,
      "title": "CORS response with Suave",
      "comment": "A little website that lets you make CORS requests to it",
      "author": "mavnn",
      "link": "https://twitter.com/mavnn",
      "date": "2014-05-02T16:52:52.8130000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Suave"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "suave",
        "cors"
      ]
    },
    {
      "id": 1412,
      "title": "Linear Regression",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-05-03T21:16:01.2770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "MathNet.Numerics",
        "MathNet.Numerics.LinearAlgebra"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1413,
      "title": "SmallestDivNumber.fsx",
      "comment": "Smallest divisible number between 1 to any number.",
      "author": "FoXyCon",
      "link": "",
      "date": "2014-05-04T19:38:21.8500000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "smallest divisible number",
        "tryfsharp"
      ]
    },
    {
      "id": 1414,
      "title": "Hangman",
      "comment": "Word guessing game using ASCII art.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-05-10T23:26:46.1330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "game"
      ]
    },
    {
      "id": 1415,
      "title": "sprintf vs String.Format",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-05-11T09:35:30.4830000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "FSharpx.Core"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1416,
      "title": "sprintf vs String.Format",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-05-11T09:35:31.4230000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "FSharpx.Core"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1417,
      "title": "Logging speed",
      "comment": "Using Type Provider generated functions for type safe logging.",
      "author": "mavnn",
      "link": "https://twitter.com/mavnn",
      "date": "2014-05-12T09:39:42.0900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Type Providers"
      ]
    },
    {
      "id": 1418,
      "title": "PrimeGenerator",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-05-12T17:39:54.6800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1419,
      "title": "prob 25 doubt",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-05-13T07:36:18.5330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1420,
      "title": "Even Fibonacci Series",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-05-13T15:54:21.6270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1421,
      "title": "while insetad of if",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-05-13T16:53:10.5430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1422,
      "title": "memoize ",
      "comment": "Memoize from _real world functional programming_ by Petricek and Skeet chapter 10 tutorial",
      "author": "Alan Wostenberg",
      "link": "",
      "date": "2014-05-14T01:18:27.5200000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Optimizations"
      ]
    },
    {
      "id": 1423,
      "title": "FizzBuzz in F# by Embedding a Domain-Specific Language",
      "comment": "This is a translation to F# of the Haskell code in the article \r\n\"FizzBuzz in Haskell by Embedding a Domain-Specific Language\" by Maciej Pir\u0013óg\r\nThe original article is located here: http://themonadreader.files.wordpress.com/2014/04/issue23.pdf\r\nThe idea is to help people familiar with F# but not with Haskell to follow the article.\r\n",
      "author": "Cesar Mendoza",
      "link": "http://github.com/paks",
      "date": "2014-05-22T13:48:32.7300000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Kata",
        "functional",
        "functions",
        "Haskell"
      ]
    },
    {
      "id": 1424,
      "title": "Jenkins Hash Function",
      "comment": "One of Jenkin's hash functions",
      "author": "RViscarra",
      "link": "",
      "date": "2014-05-30T00:45:25.1830000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "hash",
        "jenkins"
      ]
    },
    {
      "id": 1425,
      "title": "toBase26",
      "comment": "Function that converts a base 10 number into a base 26 (digits from the English alphabet) one.\r\nA=1, B=2, ..., Z=0",
      "author": "Lars Wilhelmsen",
      "link": "http://github.com/larsw",
      "date": "2014-05-30T19:08:54.4670000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "radix",
        "base26",
        "conversion"
      ]
    },
    {
      "id": 1426,
      "title": "fromBase26",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-06-01T19:32:20.9000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1427,
      "title": "Using Expressions to Clone F# Values",
      "comment": "How to generate functions for copying F# record-array-union trees with Expr.\r\n\r\n",
      "author": "Rick Minerich",
      "link": "http://stackoverflow.com/questions/24001730/using-untyped-f-quotations-to-copy-an-array-without-knowing-the-type",
      "date": "2014-06-02T22:49:39.3670000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Expr",
        "Quotations"
      ]
    },
    {
      "id": 1428,
      "title": "Negamax Tic-Tac-Toe",
      "comment": "Plays the perfect game of Tic-Tac-Toe using the Negamax algorithm.",
      "author": "Richard Dalton",
      "link": "http://www.devjoy.com/2014/06/learning-to-think-functionally-recursion/",
      "date": "2014-06-03T22:48:31.2270000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Tic-Tac-Toe",
        "AI",
        "Recursion"
      ]
    },
    {
      "id": 1429,
      "title": "Is 1.0 identity element of multiplication?",
      "comment": "A simple script that checks whether 1.0 is really the identity element of multiplication for 32bit floating-point numbers.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-06-05T23:37:16.8600000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "floating point"
      ]
    },
    {
      "id": 1430,
      "title": "test rome2rio autocomplete f# call",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-06-07T18:03:23.6230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Http.fs"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1431,
      "title": "Create a histogram of a sequence using map",
      "comment": "Creates a map containing each item and its frequency as a key/value pair. Then sort by value in reverse order before printing each item.",
      "author": "Bjørn Bæverfjord",
      "link": "",
      "date": "2014-06-08T13:18:37.2830000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Histogram",
        "Map",
        "Seq",
        "Fold",
        "Composition",
        ">>"
      ]
    },
    {
      "id": 1432,
      "title": "ZipProvider",
      "comment": "Zip file type provider",
      "author": "Zhukoff Dima",
      "link": "",
      "date": "2014-06-13T07:03:53.5800000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "TypeProvider",
        "Data",
        "Zip"
      ]
    },
    {
      "id": 1433,
      "title": "tryGetDefault dictionary extension",
      "comment": "Try get a value from a dictionary and return a default value when not found. I provided two version. Pick the one you like the most.",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com/",
      "date": "2014-06-18T09:49:09.6470000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Dictionary"
      ]
    },
    {
      "id": 1434,
      "title": "Splitting a sequence based on separator condition",
      "comment": "Whilst working on a google API wrapper, I came across the need to separate a sequence into sub-sequences based on a separator condition. This also led to a requirement for versions of takeWhile and skipWhile which also include the element which first breaks the condition predicate.",
      "author": "Chris Ballard",
      "link": "",
      "date": "2014-06-18T11:12:17.4630000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequence",
        "separator",
        "subsequence"
      ]
    },
    {
      "id": 1435,
      "title": "single-case DU with shadowed constructor",
      "comment": "single-case DU with shadowed constructor for passing non-primitives around that are already validated.",
      "author": "ImaginaryDevelopment.blogspot.com",
      "link": "http://imaginarydevelopment.blogspot.com",
      "date": "2014-06-18T19:27:46.4530000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Discriminated Union"
      ]
    },
    {
      "id": 1436,
      "title": "Decoder for Google API polylines",
      "comment": "Full source code for my blog entry on this subject - http://chrsb.co/BNqAbM",
      "author": "Chris Ballard",
      "link": "http://chrsb.co/BNqAbM",
      "date": "2014-06-19T18:12:34.5230000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "google",
        "api",
        "polyline",
        "decode",
        "sequence",
        "bit shifting"
      ]
    },
    {
      "id": 1437,
      "title": "Convert booleans to bits and back",
      "comment": "Convert an array of booleans to an array of bytes with 8 booleans packed in one byte. The reverse operation from a byte array to a boolean array is also provided. ",
      "author": "Samuel Bosch",
      "link": "http://samuelbosch.com",
      "date": "2014-06-20T13:46:18.1100000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "bits boolean byte array"
      ]
    },
    {
      "id": 1438,
      "title": "arrays",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-06-20T14:32:53.7630000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1439,
      "title": "Convert booleans to bits using fold",
      "comment": "@Samuel - saw your post and thought one part was similar to bit shifting I was playing with yesterday, so rewrote the FromBooleans function using a fold instead of ref cells. Probably not as readable as your version though :)",
      "author": "Chris Ballard",
      "link": "",
      "date": "2014-06-20T16:33:18.0100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "bit shifting",
        "fold"
      ]
    },
    {
      "id": 1440,
      "title": "Safely unbox to an option",
      "comment": "An extra primitive that can be used to safely unbox to Some<T>. \r\n\r\nUseful for use with options where only a single type match is needed and a function is only applied if successful.",
      "author": "7sharp9",
      "link": "http://7sharpnine.com",
      "date": "2014-06-26T09:22:40.3830000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "unbox",
        "cast",
        "primitive",
        "option"
      ]
    },
    {
      "id": 1441,
      "title": "Html dsl starters",
      "comment": "following http://vimeo.com/groups/97577/videos/97315970  to make my own html DSL",
      "author": "Brandon Dimperio (@MaslowJax)",
      "link": "http://imaginarydevelopment.blogspot.com",
      "date": "2014-06-27T03:52:40.4970000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "html"
      ]
    },
    {
      "id": 1442,
      "title": "HttpUtils",
      "comment": "Forgotten file for F# Works |> Paris!!!",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-06-27T13:11:48.0900000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "http"
      ]
    },
    {
      "id": 1443,
      "title": "splitscreentest",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-06-27T16:00:25.8570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1444,
      "title": "GLTools",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-06-27T16:02:57.2770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1445,
      "title": "premultiplyFlip",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-06-27T16:19:18.6700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1446,
      "title": "Options",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-07-01T18:28:29.4100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1447,
      "title": "Easy use of IDisposable",
      "comment": "A fun little trick.",
      "author": "BR",
      "link": "",
      "date": "2014-07-01T20:57:21.3730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "IDisposable",
        "use",
        "using",
        "RAII",
        "trick"
      ]
    },
    {
      "id": 1448,
      "title": "MagicMethodParenthesis",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-07-02T15:35:19.0700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1449,
      "title": "MagicMethodParenthesis2",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-07-02T17:03:08.9930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1450,
      "title": "Generating numerical ranges",
      "comment": "Different ways of generating numerical ranges in F#. It turns out that the built-in syntax generates fairly slow code, so the snippet shows two alternative ways that are faster. Any compiler optimizations making the built-in one faster would be nice :-)",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-07-05T23:42:30.9870000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "range",
        "sequences"
      ]
    },
    {
      "id": 1451,
      "title": "IsActive logic",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-07-10T17:18:08.8570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1452,
      "title": "CostStudy.fsx",
      "comment": "Simple Cost Study",
      "author": "NicolasDobler",
      "link": "",
      "date": "2014-07-11T09:34:04.5100000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "t4pl",
        "tryfsharp"
      ]
    },
    {
      "id": 1453,
      "title": "Split a list using a separator",
      "comment": "Split a list into chunks using the specified separator. This takes a list and returns a list of lists (chunks) that represent individual groups, separated by the given separator 'v'\r\n",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-07-13T21:28:21.1700000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "list"
      ]
    },
    {
      "id": 1454,
      "title": "Async.AddCancellation",
      "comment": "Allows to abandon a wait for an async without cooperative cancellation support by wrapping it in an pseudo-cancellable async. Wrapped async will continue to run. Original C# code by Stephen Toub from pfxteam blog.",
      "author": "",
      "link": "",
      "date": "2014-07-15T01:49:16.6000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Async",
        "async"
      ]
    },
    {
      "id": 1455,
      "title": "Cellular automata",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-07-16T09:25:29.0970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1456,
      "title": "Binomial probabilities",
      "comment": "Simple function for commute binomial probabilities. For quick summary about binomial distribution:\r\n1.) There are a fixed number of trials (n).\r\n2.) Each trial has two possible outcomes: success of failure\r\n3.) The probability of success (p) is the same for each trial.\r\n4.) The trials are independent, meaning the outcome of one trial doesn't influence that of any other.\r\n\r\n",
      "author": "Martin Bodocky",
      "link": "",
      "date": "2014-07-22T16:03:27.2500000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Statistics",
        "Binomal",
        "Distributions"
      ]
    },
    {
      "id": 1457,
      "title": "Reading binary values from a file",
      "comment": "Small F# snippet on how to read 32-bit integers from a file at specific indexes.",
      "author": "Samuel Bosch",
      "link": "http://www.samuelbosch.com/2014/07/benchmarking-reading-binary-values-from.html",
      "date": "2014-07-22T19:58:33.8670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "binary"
      ]
    },
    {
      "id": 1458,
      "title": "99 Bottles of Beer on the Wall",
      "comment": "263 bytes (unix line endings ;))",
      "author": "Simon Dickson",
      "link": "http://simonhdickson.github.io",
      "date": "2014-07-25T12:46:33.9730000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "f#",
        "code golf",
        "beer"
      ]
    },
    {
      "id": 1459,
      "title": "List Multipartition",
      "comment": "Needed to partition a list into multiple groups, but couldn't find an existing way to do it. Have not put this as an extension method as needed it in an .fsx file which is loaded, but couldn't get extension method to work from that.",
      "author": "@BrockSamsonUK",
      "link": "",
      "date": "2014-07-25T13:50:47.0670000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "List",
        "Partition"
      ]
    },
    {
      "id": 1460,
      "title": "Using the Regex type provider",
      "comment": "There are some nuances to using the regular expression type provider that are easy to miss. This snippet addresses them.",
      "author": "musicologyman",
      "link": "",
      "date": "2014-07-26T17:19:20.4200000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharpx.TypeProviders.Regex"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "type provider",
        "type providers",
        "regular expression",
        "regular expressions",
        "Regex"
      ]
    },
    {
      "id": 1461,
      "title": "Generate an inline editor for ascx",
      "comment": "Somewhat implementation coupled, but the ideas are pretty neat. works in linqpad, not sure what's up with this editor",
      "author": "Brandon Dimperio (@MaslowJax)",
      "link": "http://imaginarydevelopment.blogspot.com",
      "date": "2014-07-30T13:43:23.7330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "webforms",
        "javascript"
      ]
    },
    {
      "id": 1462,
      "title": "Use CodeDom to generate escaped string",
      "comment": "",
      "author": "musicologyman",
      "link": "",
      "date": "2014-07-30T14:08:52.5500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "code generation",
        "string manipulation"
      ]
    },
    {
      "id": 1463,
      "title": "Nice Test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-07-31T08:56:18.3800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1464,
      "title": "Observable Agent",
      "comment": "Extension to Control.Observable module to create an Observable linked to a MailboxProcessor.  Messages posted to the mailbox are published to subscribers. Requires a cancelation token which when cancelled sends OnComplete to subscribers. Only the Post method is exposed from the internally created MailboxProcessor.",
      "author": "Faisal Waris",
      "link": "",
      "date": "2014-08-03T13:04:47.5600000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Observable",
        "MailboxProcessor"
      ]
    },
    {
      "id": 1465,
      "title": "TAP runner",
      "comment": "Test Anything Protocol runner for NUnit lets you run unit tests within an F# interactive session.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-08-06T21:14:41.9000000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "NUnit"
      ],
      "source": "",
      "versions": 5,
      "tags": [
        "unit testing"
      ]
    },
    {
      "id": 1466,
      "title": "SimpleClosure",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-08-07T15:27:14.2700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1467,
      "title": "Get entity names from Freebase type provider",
      "comment": "This sample uses the internals of the Freebase type provider to get the names of all the entities that Freebase knows about. The snippet returns the type names, so some of the type provider internals are exposed, but it still returns nice list of entities.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-08-11T11:37:24.4070000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "freebase",
        "type providers"
      ]
    },
    {
      "id": 1468,
      "title": "Active patterns",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-08-12T16:16:36.1430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1469,
      "title": "divide me.fsx",
      "comment": "This script finds all possible divisors of a number",
      "author": "Knerd",
      "link": "",
      "date": "2014-08-14T16:32:30.6730000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "division",
        "tryfsharp"
      ]
    },
    {
      "id": 1470,
      "title": "Duck Typed Dereferencing!",
      "comment": "Make the (!) operator even more useful by duck typing it. Simple and effective!\r\n",
      "author": "Sami Perttu",
      "link": "",
      "date": "2014-08-15T12:54:55.0600000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "operators",
        "options",
        "lazy values",
        "reference cells"
      ]
    },
    {
      "id": 1471,
      "title": "Async channel and parallel async groups",
      "comment": "Extension for Async module:  channel for transmitting data between subsystems, launching parallel groups of asyncs sequentially.",
      "author": "dvitel",
      "link": "",
      "date": "2014-08-15T19:01:30.5870000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "parallelism"
      ]
    },
    {
      "id": 1472,
      "title": "A quick NodaTime.Instant generator for FsCheck",
      "comment": "A quick NodaTime.Instant generator for FsCheck",
      "author": "mavnn",
      "link": "http://twitter.com/mavnn",
      "date": "2014-08-25T09:09:47.8700000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "NodaTime",
        "FsCheck"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "fscheck",
        "nodatime"
      ]
    },
    {
      "id": 1473,
      "title": "Backtracking search for Constraint Satisfaction Problems",
      "comment": "Backtracking search for Constraint Satisfaction Problems (CSP)",
      "author": "Fabio Galuppo",
      "link": "http://fabiogaluppo.wordpress.com/",
      "date": "2014-08-26T16:41:55.4530000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "AI",
        "Search",
        "CSP"
      ]
    },
    {
      "id": 1474,
      "title": "Turtle with FParsec",
      "comment": "FParsec parser and Windows Forms viewer for minimal Turtle DSL.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-08-27T11:06:34.1730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Turtle",
        "FParsec"
      ]
    },
    {
      "id": 1475,
      "title": "Turtle procedures",
      "comment": "Minimal Logo implementation using FParsec with support for procedures.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-08-27T14:34:10.7430000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "Turtle",
        "DSL",
        "FParsec"
      ]
    },
    {
      "id": 1476,
      "title": "Hall Paradox",
      "comment": "Demonstration Hall Paradox Game1 xxx - 1 strategy; Game2 xxx - 2 strategy (change choice).",
      "author": "Zhukoff Dima",
      "link": "",
      "date": "2014-08-29T12:50:23.0570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Mathematic"
      ]
    },
    {
      "id": 1477,
      "title": "Async demo",
      "comment": "Async demo...",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-08-30T08:10:46.2430000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async"
      ]
    },
    {
      "id": 1478,
      "title": "Agent demo",
      "comment": "Agent demo",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-08-30T11:37:18.6630000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async"
      ]
    },
    {
      "id": 1479,
      "title": "Using Azure Table Storage",
      "comment": "Using Azure Table Storage with WindowsAzure.Storage\r\n",
      "author": "Tuomas Hietanen",
      "link": "http://thorium.github.io/FSharpAzure/ReadmeEng.html",
      "date": "2014-08-31T09:02:21.5930000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "WindowsAzure.Storage"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Azure"
      ]
    },
    {
      "id": 1480,
      "title": "Just because",
      "comment": "It's probably not possible, but I'm going to see how far I can get...",
      "author": "mavnn",
      "link": "twitter.com/mavnn",
      "date": "2014-09-01T13:29:49.0030000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "lens",
        "aether",
        "metaprogramming"
      ]
    },
    {
      "id": 1481,
      "title": "Sum a report ",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-04T11:00:06.8730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1482,
      "title": "A Simple Parser",
      "comment": "This is a basic parser that I wrote which takes heavily from the examples in Dom Syme's Expert F# book and http://fsharpforfunandprofit.com/posts/pattern-matching-command-line/",
      "author": "Joe C",
      "link": "www.fssnip.com",
      "date": "2014-09-12T21:59:25.7570000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Parse",
        "Parsing",
        "Lexing"
      ]
    },
    {
      "id": 1483,
      "title": "HttpUtils",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-16T12:58:31.8870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1484,
      "title": "Convenient utilities for Option types.",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-17T16:36:02.5970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1485,
      "title": "Limit degree of parallelism using an agent",
      "comment": "The snippet implements a simple agent that limits the number of parallelism. When created, the agent takes the maximum number of tasks it can run in parallel. When it receives a \"Start\" message, it will then either run the task, or store it in a queue until earlier task ha completed.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-09-18T13:13:49.4200000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "agent",
        "async",
        "parallelism"
      ]
    },
    {
      "id": 1486,
      "title": "FoldBy Combinator",
      "comment": "Suggestion for a core library function.",
      "author": "Eirik Tsarpalis",
      "link": "http://twitter.com/eiriktsarpalis",
      "date": "2014-09-18T16:10:53.3470000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "collections",
        "core",
        "combinators"
      ]
    },
    {
      "id": 1487,
      "title": "Sanitize path",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-18T20:55:03.1170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1488,
      "title": "Retry loop, no tricks",
      "comment": "Less-nonsense 8-line retry function that will retry a function a specified up to `maxRetries` times while it throws.\r\n\r\nAfter the retries, any remaining exception is allowed to propagate.\r\n\r\nAccepts  a before function to allow you to wait/report when a retry is taking place",
      "author": "Ruben Bartelink",
      "link": "http://twitter.com/rbartelink",
      "date": "2014-09-24T15:46:34.2730000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "retry",
        "sleep",
        "recursion",
        "exceptions"
      ]
    },
    {
      "id": 1489,
      "title": "password",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-26T02:43:13.2430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1490,
      "title": "Stuff",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-26T17:04:40.3070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1491,
      "title": "test_interfaces.fs",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-28T19:28:16.6930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1492,
      "title": "test_fn.fs",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-28T19:28:55.5930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1493,
      "title": "test.fs",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-09-28T19:30:16.6530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1494,
      "title": "Pattern Matching.fsx",
      "comment": "Single Case Active Patterns",
      "author": "tamizhvendan",
      "link": "",
      "date": "2014-10-01T10:21:41.1770000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "active-patterns",
        "tryfsharp"
      ]
    },
    {
      "id": 1495,
      "title": "Simple normally distributed random number generator",
      "comment": "There are better (faster, more efficient) ways to do this, F# numerics library for a start, but this is at least interesting. This snippet uses the polar form of the Box-Muller method to generate Normal- (Gaussian-) distributed random numbers as an infinite sequence. The polar form is more efficient than the basic form as it does not rely on trigonometric function calls, but there are far more efficient alogrithms (read harder to implement) e.g. the Ziggurat method (for a later post).",
      "author": "Kevin Roche",
      "link": "",
      "date": "2014-10-01T11:09:09.4330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Randon number generation",
        "Statistics",
        "Gaussian distribution",
        "Normal distribution",
        "infinite sequence"
      ]
    },
    {
      "id": 1496,
      "title": "ASCII String",
      "comment": "Type extensions for ASCII strings  represented as byte arrays. Note: requires the F# 3.1 compiler.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-10-05T21:21:11.6530000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "ASCII",
        "String"
      ]
    },
    {
      "id": 1497,
      "title": "List comparison",
      "comment": "Find what's been added, removed or changed between two lists (perfom a diff between two lists of items).",
      "author": "Daniel Bradley",
      "link": "",
      "date": "2014-10-06T14:51:14.2670000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Lists"
      ]
    },
    {
      "id": 1498,
      "title": "title",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-10-07T03:22:27.3270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1499,
      "title": "Async.StartWithContinuations test",
      "comment": "test of Async.StartWithContinuations",
      "author": "omanuke",
      "link": "",
      "date": "2014-10-08T02:38:36.2900000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async"
      ]
    },
    {
      "id": 1500,
      "title": "Event stream projection with actors",
      "comment": "An example of using an actor (MailboxProcessor) to coordinate the projection of events from an event stream into a persisted projection. This example covers handling simple concurrency conflicts via also persisting and checking the latest event ID with with projection. \r\n\r\nThe update command will take the current projection and apply all new events before persisting it back.\r\nThe rebuild command will ignore an existing projection and replay all events in the stream.",
      "author": "Daniel Bradley",
      "link": "",
      "date": "2014-10-08T12:33:03.1830000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "events",
        "event sourcing",
        "cqrs",
        "actors",
        "MailboxProcessor"
      ]
    },
    {
      "id": 1501,
      "title": "title",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-10-09T20:01:33.2770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1502,
      "title": "Reversing RELEASE_NOTES.md",
      "comment": "Reversing RELEASE_NOTES.md\r\nVery ugly version hacked together in a minute",
      "author": "Gustavo Guerra",
      "link": "http://functionalflow.co.uk",
      "date": "2014-10-10T22:45:50.4070000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "RELEASE_NOTES"
      ]
    },
    {
      "id": 1503,
      "title": "Tt",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-10-16T22:16:49.0530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1504,
      "title": "Simple example of cross platform Eto forms library",
      "comment": "Simple example of Eto library usage for drawing",
      "author": "Antonio Cisternino",
      "link": "",
      "date": "2014-10-18T15:30:12.1030000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Eto"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "drawing",
        "gui",
        "Eto"
      ]
    },
    {
      "id": 1505,
      "title": "Decorator Pattern with Object Expressions",
      "comment": "A simple example of a decorator pattern using object expressions and the pipeline operator for a fluent interface",
      "author": "Steve Goguen",
      "link": "",
      "date": "2014-10-23T19:46:03.3100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "patterns"
      ]
    },
    {
      "id": 1506,
      "title": "Composite Pattern with Object Expressions",
      "comment": "An example of the composite pattern implemented simply with functions and object expressions",
      "author": "Steve Goguen",
      "link": "",
      "date": "2014-10-23T19:54:43.3470000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "patterns"
      ]
    },
    {
      "id": 1507,
      "title": "A Lambda Calculus AST",
      "comment": "A work-in-progress implementation of Lambda Calculus - Alpha and Beta reduction is buggy",
      "author": "Steve Goguen",
      "link": "",
      "date": "2014-10-23T20:31:27.5630000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "theory"
      ]
    },
    {
      "id": 1508,
      "title": "Lock-free, mutable list",
      "comment": "Lock-free, mutable list that supports multi-threading scenarios.",
      "author": "Ruxo Zheng",
      "link": "",
      "date": "2014-10-25T04:25:01.8600000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "list",
        "mutable",
        "multithreading"
      ]
    },
    {
      "id": 1509,
      "title": "Similar string Markov chain",
      "comment": "Generates strings that are similar to the input, as measured by the probability of a symbol depending on preceding symbols. (Markov chain)\r\n\r\nThe order, which defines how many preceding symbols to look at before placing another, is variable.",
      "author": "Vandroiy",
      "link": "http://worldbuilding.stackexchange.com/questions/3478/are-there-techniques-for-creating-alien-or-foreign-sounding-names/3492#3492",
      "date": "2014-11-04T14:26:02.7970000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 8,
      "tags": [
        "random",
        "generator",
        "markov chain"
      ]
    },
    {
      "id": 1510,
      "title": "AshtonKJ141111",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-11T14:27:47.6430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1511,
      "title": "Two Logicians",
      "comment": "Solves the \"Two Logicians\" puzzle.",
      "author": "Vandroiy",
      "link": "",
      "date": "2014-11-12T00:43:56.8900000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "Puzzles"
      ]
    },
    {
      "id": 1512,
      "title": "Flat Array2D 'a [,] -> 'a array",
      "comment": "Flat a 2 dimensional array in a one dimension array 'a [,] -> 'a array",
      "author": "",
      "link": "",
      "date": "2014-11-12T02:43:30.7930000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Array2D",
        "array"
      ]
    },
    {
      "id": 1513,
      "title": "Array2D to one dimension",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-12T16:28:23.6530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1514,
      "title": "Array2D to one dimension",
      "comment": "This is a simple way to flat a two dimensional array in a linear one",
      "author": "Riccardo Terrell",
      "link": "@TRikace",
      "date": "2014-11-12T16:40:45.5300000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Array2D",
        "array"
      ]
    },
    {
      "id": 1515,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-13T06:53:02.0700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1516,
      "title": "Invoking a c# method using anonymous type instead of strong type",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-14T16:13:16.0970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1517,
      "title": "title",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-17T16:39:24.9070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1518,
      "title": "title",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-17T18:20:40.5100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1519,
      "title": "title",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-17T18:26:13.9030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1520,
      "title": "Rx vs Observable module vs Nessos Streams",
      "comment": "Naive performance comparison of push model libraries: Reactive Extension (Rx), Observable module (built-in to F#) and Nessos Streams. Note: smaller numbers are better",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-11-17T18:26:23.4700000",
      "likes": 9,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Streams",
        "Rx-Core",
        "Rx-Interfaces",
        "Rx-Linq"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Rx",
        "Observable",
        "Streams"
      ]
    },
    {
      "id": 1521,
      "title": "F# Streams vs Array methods",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-18T15:12:38.7370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Streams"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1522,
      "title": "F# Streams vs Array methods",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-11-18T16:44:59.1970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Streams"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1523,
      "title": "Throttling agent",
      "comment": "Implements a simple agent that lets you throttle the degree of parallelism by limiting the number of work items that are processed in parallel.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-11-19T13:32:59.4670000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "agent",
        "async",
        "parallelism",
        "throttling"
      ]
    },
    {
      "id": 1524,
      "title": "Koch snowflake",
      "comment": "Script to render a Koch snowflake using a Windows Forms bitmap.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-12-02T07:50:45.3030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Koch",
        "snowflake"
      ]
    },
    {
      "id": 1525,
      "title": "Paper snowflake",
      "comment": "Transparent snowflake using polygons and rotational symmetry, based on paper and scissors method. ",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-12-02T08:11:58.3030000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Snowflake"
      ]
    },
    {
      "id": 1526,
      "title": "Rational type for units of measure",
      "comment": "A more idiomatic definition of a Rational type with custom operators.",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2014-12-02T15:23:32.6300000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "rational",
        "math"
      ]
    },
    {
      "id": 1527,
      "title": "Cast object list",
      "comment": "Casts list of objects to any other type. Return objects if cast is possible, so new list can be shorter (or empty). ",
      "author": "RLinde",
      "link": "",
      "date": "2014-12-02T22:15:47.9530000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "list; cast; collections"
      ]
    },
    {
      "id": 1528,
      "title": "Event Sourcing",
      "comment": "Playing with simplified domain modules and event sourcing in F#",
      "author": "mavnn",
      "link": "http://twitter.com/mavnn",
      "date": "2014-12-04T14:45:02.8270000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Fleece",
        "FSharpPlus",
        "FsControl",
        "System.Json",
        "ReadOnlyCollectionExtensions",
        "ReadOnlyCollectionInterfaces"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Event Sourcing",
        "fold"
      ]
    },
    {
      "id": 1529,
      "title": "file1.fsx",
      "comment": "построение дерева решений\n",
      "author": "fpawel",
      "link": "",
      "date": "2014-12-06T16:35:27.7630000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "script",
        "tryfsharp"
      ]
    },
    {
      "id": 1530,
      "title": "file1.fsx",
      "comment": "построение дерева решений\r\n",
      "author": "fpawel",
      "link": "",
      "date": "2014-12-06T16:36:16.2800000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 4,
      "tags": [
        "script",
        "tryfsharp"
      ]
    },
    {
      "id": 1531,
      "title": "Rotations of Pairs",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-12-07T09:02:31.0900000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1532,
      "title": "Rotations of Pairs",
      "comment": "Make it fit in my blog",
      "author": "",
      "link": "",
      "date": "2014-12-07T09:02:33.3870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "none"
      ]
    },
    {
      "id": 1533,
      "title": "Fast Rotations",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-12-07T09:12:53.9600000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1534,
      "title": "Rotations Compare",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-12-07T09:15:04.8970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1535,
      "title": "GrahamScan.fsx",
      "comment": "graham scan algorithm for finding the convex hull of a set of 2-dimensional points",
      "author": "albertpang",
      "link": "",
      "date": "2014-12-07T10:04:23.6730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "tryfsharp",
      "versions": 1,
      "tags": [
        "computational geometry graham scan",
        "tryfsharp"
      ]
    },
    {
      "id": 1536,
      "title": "Check Outlook only once an hour",
      "comment": "Works by forcing yourself to close Outlook and then notifies you an hour later.",
      "author": "David Grenier",
      "link": "",
      "date": "2014-12-08T16:37:28.6570000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "outlook",
        "process",
        "statemachine"
      ]
    },
    {
      "id": 1537,
      "title": "Finite State Machine Parser",
      "comment": "Based on Uncle Bob's State Machine Compiler for Clean Code video series, parser implemented with FParsec, see https://github.com/unclebob/CC_SMC for the Java implementation.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-12-09T21:59:04.7100000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "AST",
        "Parser",
        "FParsec"
      ]
    },
    {
      "id": 1538,
      "title": "Finite State Machine Compiler",
      "comment": "Based on Uncle Bob's State Machine Compiler for Clean Code video series, parser implemented with FParsec, see https://github.com/unclebob/CC_SMC for Uncle Bob's Java implementation.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-12-10T07:20:07.2000000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 3,
      "tags": [
        "AST",
        "Parser",
        "FParsec",
        "Compiler"
      ]
    },
    {
      "id": 1539,
      "title": "drop",
      "comment": "Removes the nth element from a list\r\n",
      "author": "Antonio Prestes García",
      "link": "https://github.com/antonio-pgarcia/",
      "date": "2014-12-10T12:11:18.8270000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "list"
      ]
    },
    {
      "id": 1540,
      "title": "Generate a date range sequence",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-12-10T12:34:18.1770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1541,
      "title": "1",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-12-10T13:21:39.8300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1542,
      "title": "Generate a date range sequence",
      "comment": "Generates a sequence of dates (ascending or descending), incrementing (or decrementing) by one day at a time, inclusive of the start and end dates.",
      "author": "Daniel Bradley",
      "link": "http://www.danielbradley.net",
      "date": "2014-12-11T13:52:51.5570000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seqences",
        "seq",
        "datetime",
        "dates"
      ]
    },
    {
      "id": 1543,
      "title": "Word count analyzer",
      "comment": "Analyse word count from files. You can use it e.g. to create Tag Clouds\r\n",
      "author": "Tuomas Hietanen",
      "link": "https://gist.github.com/Thorium",
      "date": "2014-12-11T18:48:20.0800000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Sparc.TagCloud"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "TagCloud",
        "count"
      ]
    },
    {
      "id": 1544,
      "title": "Microsoft Kinect Body Basics with Kinect SDK 2.0 and F#",
      "comment": "Microsoft Kinect Body Basics with Kinect SDK 2.0 and F-Sharp\r\n",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2014-12-12T00:43:56.5470000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Microsoft.Kinect.2.0"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Kinect"
      ]
    },
    {
      "id": 1545,
      "title": "Mini SNOBOL Interpreter",
      "comment": "Minimal SNOBOL abstract syntax tree (AST), interpreter and internal DSL (but no parser), just enough to run some simple samples from Wikipedia's SNOBOL page: http://en.wikipedia.org/wiki/SNOBOL and most of the pattern matching examples from the SNOBOL 4 Tutorial http://www.snobol4.org/docs/burks/tutorial/ch4.htm",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2014-12-13T20:23:01.0100000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 7,
      "tags": [
        "SNOBOL",
        "Language",
        "AST",
        "Interpreter"
      ]
    },
    {
      "id": 1546,
      "title": "Generate a date range sequence (alternative)",
      "comment": "Generates a sequence of dates (ascending or descending), incrementing (or decrementing) by one day at a time, inclusive of the start and end dates.\r\n\r\nThis is just simpler alternative version of: http://www.fssnip.net/oS (which was password-protected)\r\n",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2014-12-15T23:44:17.2900000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "seqences",
        "seq",
        "datetime",
        "dates"
      ]
    },
    {
      "id": 1547,
      "title": "Musical Note Frequencies",
      "comment": "With the usual Western music it is common to use the Equal temperament:\r\nhttp://en.wikipedia.org/wiki/Equal_temperament\r\nhttp://hyperphysics.phy-astr.gsu.edu/hbase/music/et.html\r\n\r\nThen the note frequencies are calculated by this formula.\r\n\r\nFor more information:\r\nhttp://en.wikipedia.org/wiki/Pitch_(music)\r\nhttp://en.wikipedia.org/wiki/Musical_tuning#Tuning_systems\r\n",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2014-12-16T01:32:01.4170000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "music",
        "frequency table"
      ]
    },
    {
      "id": 1548,
      "title": "Fourth order Runge-Kutta ODE solver",
      "comment": "This is a simple and direct implementation of fourth order runge-kutta ordinary differential equation solver algorithm. In the main function three use cases are shown.",
      "author": "Antonio Prestes García",
      "link": "https://github.com/antonio-pgarcia/",
      "date": "2014-12-17T10:06:34.8700000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Mathematics",
        "Algorithms",
        "Scientific Computing"
      ]
    },
    {
      "id": 1549,
      "title": "Christmas Tree - Best Wishes",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2014-12-25T01:34:46.1070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1550,
      "title": "\"Fastest wins\" parallel download with Hopac",
      "comment": "One of the main features of Hopac - selective synchronization using \"alternatives\". In this snippet we download three web pages in parallel and the one that finishes first \"wins\" (or the timeout alternative becomes available for picking). What's nice in this solution is that the other two downloading jobs are cancelled immediately when the winner/timeout is available (i.e. an implicitly provided to the Asyncs CancellationTokens are cancelled).\r\n\r\nAlts is highly composable and, for example, the whole Alt.choose [ ... ] thing could be nested in another Alt.choose or combined with <|> or <&> operators with another Alt and so on. ",
      "author": "Vasily Kirichenko",
      "link": "",
      "date": "2014-12-28T08:40:09.0830000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Hopac"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "hopac"
      ]
    },
    {
      "id": 1551,
      "title": "Joinads example translated to Hopac",
      "comment": "Joinads example from here https://github.com/tpetricek/FSharp.Joinads/blob/master/README.markdown translated to Hopac. No language extension needed, the code is equally compact and arguably more readable. ",
      "author": "Vasily Kirichenko",
      "link": "",
      "date": "2015-01-01T09:57:44.3130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Hopac"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "hopac",
        "joinads"
      ]
    },
    {
      "id": 1552,
      "title": "MailboxProcessor with exception handling and restarting",
      "comment": "An extension of MailboxProcessor that catches all unhandled exceptions, and ensures that the user-provided function is run repeatedly until it returns normally. Based on the HandlingMailbox defined by Tomas Petricek: fssnip.net/cj",
      "author": "Anthony Perez",
      "link": "amazingant.com",
      "date": "2015-01-02T21:50:05.5600000",
      "likes": 6,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "mailboxprocessor",
        "agent",
        "async",
        "exception"
      ]
    },
    {
      "id": 1553,
      "title": "Joinads' \"One place buffer\" sample ported to Hopac",
      "comment": "https://github.com/tpetricek/FSharp.Joinads/blob/master/src/Joins/Samples.fs#L60 ported to Hopac. ",
      "author": "Vasily Kirichenko",
      "link": "",
      "date": "2015-01-03T09:21:40.4900000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Hopac"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "hopac",
        "joinads"
      ]
    },
    {
      "id": 1554,
      "title": "Parallel map in Hopac",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-01-03T15:23:30.7730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "Hopac"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1555,
      "title": "Parallel tree processing in Hopac",
      "comment": "This is \"Parallel tree processing\" example from http://tryjoinads.org/ ported straitforwardly to Hopac.",
      "author": "Vasily Kirichenko",
      "link": "",
      "date": "2015-01-04T14:21:38.3130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Hopac",
        "FSharpx.Core"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Hopac",
        "Joinads"
      ]
    },
    {
      "id": 1556,
      "title": "Turtle in Gtk#",
      "comment": "Turtle interpreter example using Mono's Gtk# library with example paths for MonoDevelop (running on Linux) and Xamarin Studio (running on Mac and Windows).  ",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2015-01-04T21:17:21.9830000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "Turtle",
        "AST",
        "Interpreter",
        "Gtk#"
      ]
    },
    {
      "id": 1557,
      "title": "Screen Scraping with the XTract Package",
      "comment": "XTract (https://github.com/TahaHachana/XTract) is a simple screen scraping package for F#. This sample shows how to describe the data model using a record, define the extractors that will collect the data using CSS selectors, scrape the data from the target URL(s) and save it.",
      "author": "Taha Hachana",
      "link": "http://tahahachana.github.io/",
      "date": "2015-01-06T07:40:38.0600000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "XTract"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "SCRAPING",
        "DATA"
      ]
    },
    {
      "id": 1558,
      "title": "gtksharp test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-01-06T20:38:24.6870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1559,
      "title": "Working from options",
      "comment": "Adding together Option types",
      "author": "mavnn",
      "link": "http://twitter.com/mavnn",
      "date": "2015-01-08T12:20:40.1170000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FSharpx"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "option",
        "fsharpx"
      ]
    },
    {
      "id": 1560,
      "title": "Parallel fold",
      "comment": "Idea from Guy L. Steele -\r\nOrganizing Functional Code for Parallel Execution; or, foldl and foldr Considered Slightly Harmful - \r\nhttps://vimeo.com/6624203\r\n",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2015-01-10T12:55:32.8100000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fold",
        "aggregate",
        "reduce",
        "parallel",
        "collections"
      ]
    },
    {
      "id": 1561,
      "title": "Querying NuGet via OData TypeProvider",
      "comment": "Querying NuGet package manager via OData TypeProvider\r\n",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2015-01-12T13:20:06.7700000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "nuget",
        "odata",
        "type provider",
        "TypeProvider"
      ]
    },
    {
      "id": 1562,
      "title": "ListShuffle",
      "comment": "This simple snippet shuffles the elements of a list. It can be useful for simulations.",
      "author": "Antonio Prestes García",
      "link": "https://github.com/antonio-pgarcia?tab=activity",
      "date": "2015-01-15T12:52:30.8130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Algorithms"
      ]
    },
    {
      "id": 1563,
      "title": "Advanced Search using FParsec",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-01-16T01:49:33.2930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1564,
      "title": "3D Image Effect ",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-01-18T03:38:07.6770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1565,
      "title": "3D Image Effect ",
      "comment": "You can create a 3D effect by taking each pixel from the source image (removing the red) and the pixel twenty places to its left (removing the blue and green) and blending the two together\r\n   ",
      "author": "Riccardo Terrell",
      "link": "@TRikace",
      "date": "2015-01-18T03:39:26.6530000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Imaging"
      ]
    },
    {
      "id": 1566,
      "title": "merge to SupportedLanguages string",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-01-20T00:28:57.5930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1567,
      "title": "Selections in FSharp",
      "comment": "https://www.haskell.org/pipermail/haskell-cafe/2002-June/003122.html\r\n\r\nSelections is a neat algorithm that I got from here. This is ported in F# just for kicks and measurement.",
      "author": "",
      "link": "",
      "date": "2015-01-22T04:29:32.5100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "selections"
      ]
    },
    {
      "id": 1568,
      "title": "Recursively find all files from a sequence of directories",
      "comment": "A function that will take a sequence of directory names and recursively find and return a sequence of all file names within.",
      "author": "Andreas Ågren",
      "link": "",
      "date": "2015-01-22T08:50:32.8930000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "list files recursive"
      ]
    },
    {
      "id": 1569,
      "title": "Simple HTTP server",
      "comment": "Handle index better",
      "author": "",
      "link": "",
      "date": "2015-01-22T11:49:52.4000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "http"
      ]
    },
    {
      "id": 1570,
      "title": "More Selections in F#",
      "comment": "Just fun",
      "author": "",
      "link": "",
      "date": "2015-01-22T22:20:52.5170000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 4,
      "tags": [
        "selections"
      ]
    },
    {
      "id": 1571,
      "title": "Pluck and TryPluck",
      "comment": "Functions to select the first element in an array that passes some predicate, and separately all the other array elements.  (I'm not sure if this type of operation has a standard name.  Please tweet me if you know!)",
      "author": "Kit Eason",
      "link": "twitter.com/kitlovesfsharp",
      "date": "2015-01-23T15:04:34.7470000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "collections",
        "arrays"
      ]
    },
    {
      "id": 1572,
      "title": "Extending units of measure to arbitrary types",
      "comment": "Continuing from https://twitter.com/JKPappas/status/558339587719045120, here's an approach on extending units of measure to arbitrary types.",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2015-01-23T17:03:58.0330000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "units of measure"
      ]
    },
    {
      "id": 1573,
      "title": "A type-level SAT solver in F#",
      "comment": "A type-level SAT solver in F#, inspired by https://gist.github.com/wouter-swierstra/0b6062c9660e751cd535",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2015-01-24T15:21:56.6830000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Type level"
      ]
    },
    {
      "id": 1574,
      "title": "Faster selections",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-01-25T16:55:47.4670000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1575,
      "title": "Fast Async Stream Copy",
      "comment": "This is a simple code implementation to copy Streams leveraging the Async workflow.\r\nAfter the first read, the write and read processes are done in parallel. I also used an Array of Array as buffer to avoid false sharing memory. An other improvment option could be to increase the buffer size if the copy is done in same machine.",
      "author": "Riccardo Terrell",
      "link": "@Trikace",
      "date": "2015-01-26T00:04:00.5670000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Async",
        "Stream"
      ]
    },
    {
      "id": 1576,
      "title": "Perlin/Gradient Noise",
      "comment": "I came looking for a fast implementation of Perlin Noise, but the only code snippet showed value noise, which has discontinuity in its 2nd derivative. This version of Perlin Noise has 3 improvements over the default.\r\n\r\n1. 1024 gradient vectors\r\n2. Higher order smoothing polynomial\r\n3. A better hash function\r\n\r\nThis implementation has a slight change for performance reasons, and that is the removal of clamping the smoothing polynomial from 0.0 to 1.0, and no clamp on the final value, which would be from -1.0 to 1.0. I have not experienced any issues as in my code I have offset the values by scaling them into the range of 0.0 -> 1.0.\r\n\r\nI have tested this and profiled this code for many hours in order get the absolute best performance I could. This code runs much faster in release mode than it does under debug mode. I have profiled in both debug and release modes, and against Heikki Törmälä's SimplexNoise, and in release mode my gradient noise implementation is a lot faster and since it uses doubles the numerical limit is far greater, as the Simplex Noise function fails once the 32bit floats overflow.\r\n\r\nKeep in mind, this is 2D gradient noise, and I have not tested a 3D version.",
      "author": "Krunoslav Saho",
      "link": "",
      "date": "2015-01-27T13:30:56.0370000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "perlin noise",
        "gradient noise",
        "noise"
      ]
    },
    {
      "id": 1577,
      "title": "BDD without a framework",
      "comment": "A Simple port of the Calculator BDD sample from http://cukes.info.\r\n\r\nMost BDD frameworks require attributes and shared state to run a test (I'm looking at you specflow!)\r\n\r\nAs the test suite grows, the accidental complexity of different steps initialising (or not) class state becomes a huge problem, resulting in fragile tests. By accumulating state until the assertion, the tests become strongly typed and resilient to change.\r\n\r\nF#'s backtick methods combined with continuations and lightweight syntax can be taken to extremes to produce a lightweight internal DSL, with efficient results. ",
      "author": "Neil Danson",
      "link": "http://neildanson.wordpress.com",
      "date": "2015-01-27T21:04:17.7100000",
      "likes": 8,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "NUnit"
      ],
      "source": "",
      "versions": 3,
      "tags": [
        "BDD"
      ]
    },
    {
      "id": 1578,
      "title": "interop 64 bit problem",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-01-28T03:25:02.1300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1579,
      "title": "Omit demo",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-01-29T17:21:10.3330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1580,
      "title": "HList with Mapper and Folder",
      "comment": "Extended from: http://www.fssnip.net/d2",
      "author": "Rick Minerich",
      "link": "http://www.fssnip.net/d2",
      "date": "2015-01-30T00:45:19.0100000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 6,
      "tags": [
        "HList",
        "Types"
      ]
    },
    {
      "id": 1581,
      "title": "Trying to set a default value",
      "comment": "Trying to set a string option",
      "author": "joobus",
      "link": "",
      "date": "2015-01-31T03:12:07.9170000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "set"
      ]
    },
    {
      "id": 1582,
      "title": "MonadPlus operation for option type.",
      "comment": "Taken from FSharpx.",
      "author": "ane",
      "link": "",
      "date": "2015-02-03T10:05:47.0870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "option monadplus"
      ]
    },
    {
      "id": 1583,
      "title": "Async extensions for Socket",
      "comment": "Async extensions for Socket. This extensions use SocketAsyncEventArgs, not Begin / End pattern.",
      "author": "sayuri",
      "link": "",
      "date": "2015-02-04T14:15:48.3600000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "socket",
        "networking",
        "SocketAsyncEventArgs"
      ]
    },
    {
      "id": 1584,
      "title": "How to send SMS using ASP.NET through HTTP (C#)",
      "comment": "Hello Guys,\r\n\r\nThis short ASP.NET code snippet is intended to provide you a brief review on how to add SMS functionality to your website. You will see, this is a very simple but smart solution. This ASP.NET application is able to send messages by using HTTP requests towards the SMS gateway that sends the SMSs to the destination telephone via a GSM modem or an IP SMS connection.\r\n\r\nLet’s take a quick look at the software requirements that are essentially needed for tjis solution. In order to send SMS messages from your ASP.NET application, you need a development platform, e.b Visual Studio, of course, .NET Framework 4.0, Internet Information Services (IIS) and an SMS gateway (I used Ozeki NG – http://www.ozekisms.com). You also need a GSM modem attached to your PC or an IP SMS connection to be able to send messages.\r\n\r\nOkay and now let’s use the code snippet! Copy the content of smssend.aspx and smssend.aspx.cs into the main directory of the IIS server - C:\\Inetpub\\wwwroot\\ directory (). Configure the fixed data in the smssend.aspx.cs file (the IP address and port number of the SMS gateway, username, password). Launch your SMS gateway Server. Start a web browser and enter this URL: http://127.0.0.1/smssend.aspx - where 127.0.0.1 means that the smssend.aspx and smssend.aspx.cs files can be found on the same computer on which the browser has been opened). Fill in the required fields, and then click the Send button. It’s as easy as that!\r\n\r\nHappy coding! :)",
      "author": "Aarav Gupta",
      "link": "http://www.ozekisms.com",
      "date": "2015-02-04T14:20:06.7130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "send",
        "sms",
        "asp",
        "asp.net",
        "http",
        "request",
        "gateway",
        "c#",
        "csharp",
        "website",
        "iis",
        "internet",
        "information",
        "services",
        "gsm",
        "modem",
        "ip sms",
        "smpp",
        "aspx.cs",
        "aspx"
      ]
    },
    {
      "id": 1585,
      "title": "Print a calendar",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-05T13:12:13.9370000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1586,
      "title": "Print a calendar",
      "comment": "How to print  a formatted calendar to the console using F#",
      "author": "Fabio Galuppo",
      "link": "http://fabiogaluppo.wordpress.com/",
      "date": "2015-02-05T13:18:23.1700000",
      "likes": 10,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "list",
        "calendar"
      ]
    },
    {
      "id": 1587,
      "title": "Experimenting with Hopac",
      "comment": "We sometimes come across business processes where it's important to respond within a particular time window. Here's an experiment modelling that with Hopac",
      "author": "mavnn",
      "link": "http://twitter.com/mavnn",
      "date": "2015-02-05T15:35:58.0730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Hopac"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Hopac"
      ]
    },
    {
      "id": 1588,
      "title": "WPF Library",
      "comment": "WPF Library utility\r\n\r\nXamlLoader\r\n==========\r\n\r\nXamlLoader.loadWpfFromString (body:string)  // Create objects directly from XAML string\r\nXamlLoader.LoadWpfFromFile (path:string) // Load XAML file and try to create object with correct corresponding class.\r\nXamlLoader.LoadWpf (path:string) (root:obj) // Load XAML file and use root as the root class.  root can be null.",
      "author": "Ruxo Zheng",
      "link": "",
      "date": "2015-02-07T01:26:44.8700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "wpf",
        "library"
      ]
    },
    {
      "id": 1589,
      "title": "Posting async requests to an unreliable agent with error handling",
      "comment": "This example shows an implementation a MailboxProcessor<'T> extension method for posting messages and awaiting an asynchronous reply from a mailbox processor agent which mail fail. The error continuation is called if a failure event is triggered on the agent after the message is posted. The agent goes into a failed state where the result of all future messages posted with this mechanism is failure.",
      "author": "Anton Tcholakov",
      "link": "",
      "date": "2015-02-07T11:03:28.4770000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Asynchronous Programming"
      ]
    },
    {
      "id": 1590,
      "title": "TOTP - Time Based One Time Password",
      "comment": "Generate timebased one time passwords, for use with tools like google authenticator, etc.",
      "author": "@sillyotter",
      "link": "https://gist.github.com/sillyotter/c8b92686902baffba624#file-totp-fs",
      "date": "2015-02-07T23:58:42.2930000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "TOTP",
        "Authentication"
      ]
    },
    {
      "id": 1591,
      "title": "Attempt to implement a tail calling exception handling combinator",
      "comment": "See also https://fslang.uservoice.com/forums/245727-f-language/suggestions/6536829-implement-ocaml-s-new-match-exception-syntax",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2015-02-10T16:42:36.4900000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "exceptions",
        "ocaml"
      ]
    },
    {
      "id": 1592,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-10T16:52:59.8930000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1593,
      "title": "Why do I get a warning?",
      "comment": "Why do I get warning?",
      "author": "",
      "link": "",
      "date": "2015-02-10T21:50:22.5570000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1594,
      "title": "Print Bits",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-11T18:29:41.8430000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1595,
      "title": "Why do I get a warning?",
      "comment": "TagUnionCaseReflection.fs(17,39): warning FS0064: This construct causes code to be less generic than indicated by the type annotations. The type variable 'TagUnionType has been constrained to be type 'obj'.\r\nSystem.ArgumentException: Type 'System.Object' is not an F# union type.\r\nParameter name: unionType\r\n   at Microsoft.FSharp.Reflection.Impl.checkUnionType(Type unionType, BindingFlags bindingFlags)\r\n   at Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(Type unionType, FSharpOption`1 bindingFlags)\r\n   at FSI_0034.TagUnionCaseReflection`1.GetAll() in C:\\home\\projects\\fsharp.playground\\Smoothdev.Utils\\src\\smoothdev.FSharp.Reflection\\TagUnionCaseReflection.fs:line 17\r\n   at <StartupCode$FSI_0034>.$FSI_0034.main@()\r\nStopped due to error",
      "author": "",
      "link": "",
      "date": "2015-02-12T00:18:19.6400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "warning",
        "generics"
      ]
    },
    {
      "id": 1596,
      "title": "Extending the standard query builder",
      "comment": "The example shows how to extend F# 3.0 'query' builder with a new custom operation that will work with standard lists, but also with queries that are translated using LINQ expressiont trees (such as databases).\r\n\r\nAnnotation:\r\nThis is the same sample as http://www.fssnip.net/go but with a module at the top to support referencing this snippet file via Paket. (see: http://fsprojects.github.io/Paket/http-dependencies.html)",
      "author": "",
      "link": "QueryExpressionBuilderExtensions",
      "date": "2015-02-12T07:30:26.1270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "query",
        "querybuilder",
        "quotation",
        "run",
        "database",
        "list"
      ]
    },
    {
      "id": 1597,
      "title": "Why reader2 is disposable and not StreamReader",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-12T14:36:41.2970000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1598,
      "title": "static member access",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-12T16:09:45.0330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1599,
      "title": "can't use constructor as a functor",
      "comment": "put the ideal syntax in a comment",
      "author": "",
      "link": "",
      "date": "2015-02-12T16:29:08.1300000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "why-not-compiling"
      ]
    },
    {
      "id": 1600,
      "title": "FParsec: caseInsensitiveString",
      "comment": "Attempt to reproduce caseInsensitiveString  from http://stackoverflow.com/a/12938883/17049",
      "author": "Gauthier Segay",
      "link": "",
      "date": "2015-02-14T20:05:33.7630000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "fparsec"
      ]
    },
    {
      "id": 1601,
      "title": "Fast Track F# - Script 1",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-19T10:17:48.9230000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1602,
      "title": "Fast Track F# - Script 2",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-19T10:18:24.5400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1603,
      "title": "Fast Track F# - Script 3",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-19T14:30:55.5500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1604,
      "title": "Freebase with API key",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-19T16:30:09.2830000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1605,
      "title": "Image extraction from assemblies",
      "comment": "Extract images from all resources's ressources of all assmeblies in a folder",
      "author": "Gauthier Segay",
      "link": "",
      "date": "2015-02-20T02:07:47.5930000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "System.Resources"
      ]
    },
    {
      "id": 1606,
      "title": "Retail domain for Tesco",
      "comment": "Simple retail domain for Tesco with scan, cancel and tendering and calculation of total price.",
      "author": "Tomas Petricek & Phil Trelford",
      "link": "",
      "date": "2015-02-20T10:54:34.1870000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "retail",
        "domain"
      ]
    },
    {
      "id": 1607,
      "title": "Getting started with Akka.NET",
      "comment": "Getting started with Akka.NET",
      "author": "Tuomas Hietanen",
      "link": "",
      "date": "2015-02-23T09:50:32.3630000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Akka"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Akka",
        "Actors"
      ]
    },
    {
      "id": 1608,
      "title": "Transform project nuspec to paket template",
      "comment": "Turn a project based nuspec into a project type paket template (see http://fsprojects.github.io/Paket/template-files.html )",
      "author": "mavnn",
      "link": "http://twitter.com/mavnn",
      "date": "2015-02-23T14:28:35.3170000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "paket",
        "nuspec",
        "xml"
      ]
    },
    {
      "id": 1609,
      "title": "Counting 1-bits in a DWORD",
      "comment": "Counting 1-bits in a DWORD (int32) using the 'divide and conquer' strategy",
      "author": "Fabio Galuppo",
      "link": "http://fabiogaluppo.wordpress.com/",
      "date": "2015-02-26T13:04:08.7400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "bits",
        "bit shifting",
        "bit manipulation"
      ]
    },
    {
      "id": 1610,
      "title": "codegen",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-02-26T15:02:37.4830000",
      "likes": 2,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1611,
      "title": "Web API AsyncApiActionInvoker",
      "comment": "Overrides the standard Web API ApiControllerActionInvoker with one that works with controller actions return F# Async<'T> results.",
      "author": "Ryan Riley",
      "link": "http://stackoverflow.com/questions/28734476/in-f-how-do-i-tell-if-an-object-is-an-async-and-how-can-i-cast-it-to-an-as",
      "date": "2015-02-26T17:36:27.3770000",
      "likes": 5,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Microsoft.AspNet.WebApi.Core"
      ],
      "source": "",
      "versions": 5,
      "tags": [
        "webapi",
        "aspnet",
        "async"
      ]
    },
    {
      "id": 1612,
      "title": "System.TimeSpan user-friendly formatting",
      "comment": "Formatting a Timespan to something fully descriptive and user friendly.",
      "author": "Gauthier Segay",
      "link": "",
      "date": "2015-02-27T02:28:48.7730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "TimeSpan",
        "formatting"
      ]
    },
    {
      "id": 1613,
      "title": "Normalisation by evaluation",
      "comment": "Normalisation of \"F# quotations\" by evaluation.",
      "author": "Nick Palladinos",
      "link": "",
      "date": "2015-03-01T19:12:26.1230000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Quotations"
      ]
    },
    {
      "id": 1614,
      "title": "Type Inference for ML/Haskell",
      "comment": "This is just the ML code from http://jozefg.bitbucket.org/posts/2015-02-28-type-inference.html ported to F#.",
      "author": "Rick Minerich",
      "link": "RichardMinerich.com",
      "date": "2015-03-02T20:01:48.0400000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Types",
        "Inference"
      ]
    },
    {
      "id": 1615,
      "title": "Anual",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-03-04T00:36:44.1100000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1616,
      "title": "Simple validation using functions",
      "comment": "This is a \"library\" for validation that collects all validation errors (and does not use the heavy-weight machinery of monads). This is perhaps a simpler variant that could be used e.g. here: http://tinyurl.com/lv2nwkl",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2015-03-07T22:35:06.6870000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "validation",
        "library"
      ]
    },
    {
      "id": 1617,
      "title": "genner thing",
      "comment": "test",
      "author": "chet",
      "link": "",
      "date": "2015-03-10T21:48:13.6570000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "meh"
      ]
    },
    {
      "id": 1618,
      "title": "another thingy",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-03-10T22:28:41.7000000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1619,
      "title": "better thingy",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-03-10T22:29:44.7730000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1620,
      "title": "Chiron experiments",
      "comment": "Playing with Chiron for JSON storage.",
      "author": "mavnn",
      "link": "http://twitter.com/mavnn",
      "date": "2015-03-11T15:31:54.8630000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "Chiron",
        "Aether",
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "chiron"
      ]
    },
    {
      "id": 1621,
      "title": "F# Puzzle - one more",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-03-13T03:24:56.1130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1622,
      "title": "Optimal bitwise CIL-like code optimizer",
      "comment": "Prototype of a CIL code optimizer that generates optimal code for bitwise functions.\r\nUpdate: General improvements",
      "author": "Bjørn Bæverfjord",
      "link": "",
      "date": "2015-03-14T09:31:58.1700000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Optimizer",
        "CIL",
        "Bitwise",
        "Truth table",
        "Boolean function"
      ]
    },
    {
      "id": 1623,
      "title": "Game Evolution",
      "comment": "Game evolution",
      "author": "Paul Orland",
      "link": "",
      "date": "2015-03-15T21:53:13.8500000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "game"
      ]
    },
    {
      "id": 1624,
      "title": "Game Evolution",
      "comment": "Game evolution",
      "author": "Paul Orland",
      "link": "",
      "date": "2015-03-15T21:53:14.9770000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "async",
        "game"
      ]
    },
    {
      "id": 1625,
      "title": "cron scheduling",
      "comment": "Parsing cron expression and calculating next launch time from schedule. \r\nv 1.1: bugs fixed for case */n + catch bad parsings ",
      "author": "dvitel",
      "link": "",
      "date": "2015-03-21T16:20:46.3070000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "cron",
        "regex",
        "scheduling"
      ]
    },
    {
      "id": 1626,
      "title": "inline rec functions",
      "comment": "\"let rec inline\" doesn't always behave as expected",
      "author": "mavnn",
      "link": "http://twitter.com/mavnn",
      "date": "2015-03-27T08:27:29.8330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "EventStore.Client",
        "Chiron"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "rec",
        "inline",
        "eventstore"
      ]
    },
    {
      "id": 1627,
      "title": "Active Pattern FizzBuzz",
      "comment": "FizzBuzz using Active Patterns.",
      "author": "Nathan Smith",
      "link": "fbuzz",
      "date": "2015-03-27T11:11:30.1570000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "fizzbuzz"
      ]
    },
    {
      "id": 1628,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-03-27T16:45:48.7200000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1629,
      "title": "test2",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-03-27T16:51:39.0130000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1630,
      "title": "modules",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-03-28T00:24:32.5800000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1631,
      "title": "sequence fibbonaci",
      "comment": "sequence fibbonaci",
      "author": "vasya pupkin",
      "link": "",
      "date": "2015-03-30T19:40:51.8130000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "sequence fibbonaci"
      ]
    },
    {
      "id": 1632,
      "title": "empty list constructor",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-02T19:14:37.9870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1633,
      "title": "empty list constructor",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-02T19:17:04.5070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1634,
      "title": "empty list constructor",
      "comment": "Shows empty list constructor",
      "author": "fsoikin",
      "link": "",
      "date": "2015-04-02T19:19:12.2870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "list"
      ]
    },
    {
      "id": 1635,
      "title": "Tree walker",
      "comment": "creates folder and file structure on the file system based on a tree output.\r\nGiven a file generated from tree /f /a > file.txt it creates the structure on a given folder",
      "author": "orlandow",
      "link": "",
      "date": "2015-04-02T19:56:20.3900000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "io",
        "tree"
      ]
    },
    {
      "id": 1636,
      "title": "How to implement conference calling for a SIP softphone in C#?",
      "comment": "A conference call is a meeting, conducted over the phone using audio, between two or more people and usually for the purposes of discussing a particular topic. In my former snippets I dealt with text-to-speech and speech-to-text functionalities. So the implementation of conference calling can sound a little bit strange as compared with my previous tutorials. But I thought it provides a good opportunity for a new challange, so I thought I share my upshot expectedly that it will be useful for you. \r\n\r\nA softphone with built-in conference call feature can be greatly used in business communication as well as in companionship. The source code below is ready for use, so you only need to copy&paste it to your Visual Studio, then modify the necessary fields. (Do not forget to add the necessary DLL file providing the VoIP background to your references: http://www.voip-sip-sdk.com)\r\n\r\nThis program will be a console application that functions as a softphone making conference calling possible. This solution assumes that you have a PBX with some SIP extensions installed previously. After creating the necessary using lines and objects, you need to define your PBX and provide the appropriate SIP account details in order to be able to register your application to the phone system. When you have created all the required methods for SIP calling, you need to initialize the conference room and handle the related events. AddToConference is used to add new party to the conference room and RemoveFromConference is used when the call is ended.\r\n\r\nHave a good time!\r\n",
      "author": "warnerBro19",
      "link": "http://www.voip-sip-sdk.com",
      "date": "2015-04-03T11:53:59.7870000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "voip",
        "sip",
        "softphone",
        "conference",
        "call",
        "conferencing",
        "c#",
        "csharp",
        "sdk",
        "library",
        "phone",
        "software",
        "telephone",
        ".net",
        ""
      ]
    },
    {
      "id": 1637,
      "title": "Memoize Async Function",
      "comment": "Cache a function's asynchronously-computed result for each argument to reduce expensive and repetitive computation of an asynchronous operation.  Uses a concurrent dictionary for backing storage, and at-least-once invocation semantics per key.",
      "author": "Jonathan Leaver",
      "link": "http://goo.gl/L73Zjo",
      "date": "2015-04-07T14:11:13.3070000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "memoize async concurrent function"
      ]
    },
    {
      "id": 1638,
      "title": "Optional TryParse",
      "comment": "Generic TryParse to optional type:\r\n\r\nlet (x:DateTime option) = parse \"2015-04-15\"\r\nlet y = parse<DateTime> \"2015-04-15\"",
      "author": "",
      "link": "",
      "date": "2015-04-08T00:21:06.5230000",
      "likes": 1,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "option",
        "tryparse",
        "generic",
        "static",
        "constraint"
      ]
    },
    {
      "id": 1639,
      "title": "temp",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-10T06:28:59.6270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1640,
      "title": "test",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-10T07:07:13.5500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1641,
      "title": "Asynchronous Timer",
      "comment": "DoPeriodicWork schedules an async function periodically.",
      "author": "",
      "link": "",
      "date": "2015-04-11T03:51:18.0700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "async",
        "timer"
      ]
    },
    {
      "id": 1642,
      "title": "Automatically compile LaTeX documents",
      "comment": "A simple script that automatically recompiles LaTeX documents when they are saved. Works nicely when editing papers in Atom and using SumatraPDF for preview (Sumatra automatically reloads PDF documents). Does not report errors or anything clever (!)",
      "author": "Tomas Petricek",
      "link": "",
      "date": "2015-04-12T21:51:53.1300000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "file",
        "process",
        "latex"
      ]
    },
    {
      "id": 1643,
      "title": "Get the name of function",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-13T14:32:27.8070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1644,
      "title": "FShapr.Data reference",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-14T04:41:27.0770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1645,
      "title": "FSharp.Data F# interactive sample",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-14T04:56:33.1700000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "FSharp.Data"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1646,
      "title": "Run the HTTP web request",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-14T05:56:38.4870000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [
        "FSharp.Data"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1647,
      "title": "FSharp.Data UserAgent",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-14T06:16:25.1070000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1648,
      "title": "FSharp.Data UserAgent",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-14T06:16:34.7330000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1649,
      "title": "DownloadHelper",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-14T06:24:18.0530000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1650,
      "title": "Memoization function",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-14T07:49:21.3270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1651,
      "title": "Create a random alphanumeric string",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-14T09:32:37.5500000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1652,
      "title": "Analyzing Government Data",
      "comment": "F# Snippet based on Dave Crook's article \"Intro to C# and Analyzing Government Data\"; http://blogs.msdn.com/b/dave_crooks_dev_blog/archive/2015/04/20/intro-to-c-and-analyzing-government-data.aspx",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2015-04-21T18:31:25.2330000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "ExcelDataReader"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Excel"
      ]
    },
    {
      "id": 1653,
      "title": "Extract info from F# Compiler Service exceptions",
      "comment": "When you get an exception from the F# Compiler Service, it usually does not print any useful information. But you can look at the private fields of the exception and get some more useful things out of it...",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2015-04-24T00:01:17.9870000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "F# compiler service",
        "exceptions"
      ]
    },
    {
      "id": 1654,
      "title": "State evolution and performance",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-24T18:54:48.7270000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1655,
      "title": "Hello world",
      "comment": "A very simple function to print hello world, which is completely useless. Just testin the F# Snippets API...",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2015-04-25T22:59:22.8130000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "fun3d",
      "versions": 1,
      "tags": [
        "test"
      ]
    },
    {
      "id": 1656,
      "title": "Fun3D Castle",
      "comment": "3D castle sample from the Fun3D project, now written using WebGL and running in a web browser...",
      "author": "Tomas Petricek",
      "link": "http://www.fun3d.net",
      "date": "2015-04-26T00:11:44.6900000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "fun3d",
      "versions": 2,
      "tags": [
        "fun3d"
      ]
    },
    {
      "id": 1657,
      "title": "batch-read bytes from file",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-04-29T09:19:13.2030000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1658,
      "title": "C# motion detection source code: How to achieve tripwire with a USB webcam",
      "comment": "Tripwire is a special part of motion detection that can be used to monitor and alert on specific changes. More specifically: tripwire means the detection of intrusion.\r\n\r\nThis code snippet presents how to create a C# software by using prewritten computer vision components (http://www.camera-sdk.com/) allowing you to get notified when your USB webcam triggers an intrusion. For instance, by using this application, you can use your camera to alarm when a people enters into the shop/office, or even to count how many people entered, etc.\r\n\r\nAfter the necessary using lines and objects you need to implement the Main method and the necessary functions for connecting to a USB webcamera. The startBt_Click method is used to start the tripwire functionality. Thereafter you can see how to handle the enter and exit events. \r\n\r\nNothing could be more simple! :)",
      "author": "chewie-wookiee",
      "link": "http://www.camera-sdk.com",
      "date": "2015-04-30T08:58:41.8800000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "c#",
        "motion",
        "detection",
        "camera",
        "tripwire",
        "webcam",
        "ip camera",
        "usb",
        "cam",
        "intrusion",
        "recognition",
        "source",
        "code",
        "example",
        "trigger",
        "notify",
        "camera sdk",
        ""
      ]
    },
    {
      "id": 1659,
      "title": "Dict utilities to use Dictionary in more F#:y way",
      "comment": "Utility module to more naturally use mutable Dictionary type from Collections library",
      "author": "Ville Vainio",
      "link": "",
      "date": "2015-05-01T19:20:59.5900000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "collections",
        "dictionary"
      ]
    },
    {
      "id": 1660,
      "title": "Castle Example",
      "comment": "a",
      "author": "a",
      "link": "http://www.fun3d.net",
      "date": "2015-05-05T00:59:14.5370000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "fun3d",
      "versions": 1,
      "tags": [
        "fun3d"
      ]
    },
    {
      "id": 1661,
      "title": "Castle Example",
      "comment": "castle",
      "author": "castle",
      "link": "http://www.fun3d.net",
      "date": "2015-05-05T00:59:40.3200000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "fun3d",
      "versions": 1,
      "tags": [
        "fun3d"
      ]
    },
    {
      "id": 1662,
      "title": "FsCheck example",
      "comment": "No nulls FsCheck",
      "author": "mavnn",
      "link": "http://twitter.com/mavnn",
      "date": "2015-05-05T14:27:40.2730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "aether",
        "fparsec",
        "nunit",
        "unquote",
        "fscheck",
        "fsharp.core"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "FsCheck"
      ]
    },
    {
      "id": 1663,
      "title": "deserialize Dictionary<string,List<string>> from JObject",
      "comment": "",
      "author": "",
      "link": "",
      "date": "2015-05-08T13:39:11.2770000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        ""
      ]
    },
    {
      "id": 1664,
      "title": "Palindrome ",
      "comment": "Palindrome test.",
      "author": "Pitch Rock",
      "link": "",
      "date": "2015-05-09T16:52:08.8230000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Palindrome"
      ]
    },
    {
      "id": 1665,
      "title": "A bind/return computation expression that does not satisfy any of the monad laws",
      "comment": "A long overdue counterexample of a pure bind/return computation expression that does not satisfy any of the monad laws, as promised to @silverSpoon. This uses binary trees under the hood, which define a binary operation but do not satisfy any unit or associativity laws. Binary trees can also encode the syntactic structure of a computation expression, which is being captured using a state-updating bind implementation.",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2015-05-11T09:58:52.3900000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "counterexample",
        "monads"
      ]
    },
    {
      "id": 1666,
      "title": "Another bind/return computation expression that does not satisfy the monad laws",
      "comment": "c.f. http://fssnip.net/qR\r\n\r\nIn this example different syntactic structures result in different types.",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2015-05-11T10:14:24.0700000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "counterexample"
      ]
    },
    {
      "id": 1667,
      "title": "Flatten Nested Type",
      "comment": "Flatten Nested Type",
      "author": "Pitch Rock",
      "link": "",
      "date": "2015-05-11T14:12:59.2670000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "Flatten"
      ]
    },
    {
      "id": 1668,
      "title": "Simple four function calculator",
      "comment": "This is a simple four function calculator using FParsec.  It would be easy to replace the FParsec combinators with simple parsing combinators to produce the same results, but without the nice error messages produced by FParsec.",
      "author": "Vesa Karvonen",
      "link": "http://stackoverflow.com/questions/30152272/how-do-i-parse-a-string-such-as-a-sum-for-a-calculator-in-f-e-g3-3-and-show",
      "date": "2015-05-11T15:28:36.2700000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FParsec"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "parsing"
      ]
    },
    {
      "id": 1669,
      "title": "Replace Elements",
      "comment": "Replace elements",
      "author": "Pitch Rock",
      "link": "",
      "date": "2015-05-11T16:04:33.1730000",
      "likes": 0,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FsUnit",
        "XUnit",
        "nunit"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "Replace"
      ]
    },
    {
      "id": 1670,
      "title": "Accessing list results by name with RProvider",
      "comment": "R functions often return a list of results, indexed by names. This is a helper function  which allows directly accessing the results using their names.",
      "author": "Evelina Gabasova",
      "link": "",
      "date": "2015-05-12T21:22:34.1130000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "R.NET.Community"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "RProvider",
        "R"
      ]
    },
    {
      "id": 1671,
      "title": "Compress List",
      "comment": "Compress List",
      "author": "Pitch Rock",
      "link": "",
      "date": "2015-05-13T02:17:12.8730000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FsUnit",
        "XUnit",
        "nunit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Compress",
        "List"
      ]
    },
    {
      "id": 1672,
      "title": "Rotate List",
      "comment": "Rotate List",
      "author": "Pitch Rock",
      "link": "",
      "date": "2015-05-13T16:40:07.9700000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FsUnit",
        "NUnit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Rotate",
        "List"
      ]
    },
    {
      "id": 1673,
      "title": "Grouping Data Into Buckets Using Fsharp",
      "comment": "Sample code snippet to group the data into buckets",
      "author": "Tamizhvendan",
      "link": "http://blog.tamizhvendan.in",
      "date": "2015-05-14T03:24:02.1930000",
      "likes": 3,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Active Patterns",
        "Pattern Matching",
        "Pipeline Operator"
      ]
    },
    {
      "id": 1674,
      "title": "Helpers for formatting dates and strings",
      "comment": "Simplistic helpers for formatting dates and strings in a web server (strip HTML tags when reading RSS feeds, nicely format dates etc.)",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2015-05-14T14:46:25.3030000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "web",
        "date",
        "string"
      ]
    },
    {
      "id": 1675,
      "title": "Trigroup",
      "comment": "Trigroup",
      "author": "Pitch Rock",
      "link": "",
      "date": "2015-05-20T18:26:12.1800000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "FsUnit",
        "NUnit"
      ],
      "source": "",
      "versions": 1,
      "tags": [
        "Trigroup"
      ]
    },
    {
      "id": 1676,
      "title": "Cross Join Lists",
      "comment": "Given a list of lists, the function crossJoin outputs all combination of elements from the inner lists, i.e. each combination is a list which contains elements from each of the inner lists in the input.\r\n\r\nNote: Order is not preserved",
      "author": "Faisal Waris",
      "link": "",
      "date": "2015-05-21T17:00:31.0400000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "List",
        "join"
      ]
    },
    {
      "id": 1677,
      "title": "ImmutableDictionary module",
      "comment": "Functional programming operators related to the BCL ImmutableDictionary type.",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2015-05-26T07:33:11.7830000",
      "likes": 4,
      "isPrivate": false,
      "passcode": "",
      "references": [
        "System.Collections.Immutable"
      ],
      "source": "",
      "versions": 2,
      "tags": [
        "BCL",
        "Dictionary"
      ]
    },
    {
      "id": 1678,
      "title": "Async.TryFinally and an application",
      "comment": "F# computation expressions do not allow monadic expressions inside `finally` clauses. If we allow ourselves a bit of ugliness this can be circumvented by using a combinator. Here's an implementation for asynchronous workflows and a small application.",
      "author": "Eirik Tsarpalis",
      "link": "https://twitter.com/eiriktsarpalis",
      "date": "2015-05-28T11:12:56.6330000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 3,
      "tags": [
        "async",
        "try finally",
        ""
      ]
    },
    {
      "id": 1679,
      "title": "Multi-currency report",
      "comment": "Multi-currency report (generated as HTML) based on example given at the start of chapter one of Kent Beck's Test-Driven Development by Example book. ",
      "author": "Phillip Trelford",
      "link": "http://trelford.com/blog",
      "date": "2015-05-31T14:17:39.3070000",
      "likes": 2,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 5,
      "tags": [
        "html",
        "dsl",
        "money"
      ]
    },
    {
      "id": 1680,
      "title": "Parse UNIX time stamp",
      "comment": "Parses UNIX time stamp into DateTime (as returned for example by the OpenWeatherMap API)",
      "author": "Tomas Petricek",
      "link": "http://tomasp.net",
      "date": "2015-06-01T23:54:23.2970000",
      "likes": 1,
      "isPrivate": false,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 1,
      "tags": [
        "datetime"
      ]
    },
    {
      "id": 1681,
      "title": "Active Pattern Performance with Structs",
      "comment": "Demonstrating poor active pattern performance",
      "author": "",
      "link": "",
      "date": "2015-06-02T01:08:41.0400000",
      "likes": 0,
      "isPrivate": true,
      "passcode": "",
      "references": [],
      "source": "",
      "versions": 2,
      "tags": [
        "Active Patterns"
      ]
    }
  ]
}